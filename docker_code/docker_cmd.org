* docker cmd
:PROPERTIES:
:CUSTOM_ID: docker-cmd
:END:
#+begin_src shell
# list all images
docker images

# pull
docker pull nginx

# daemon
docker run --detach --name web nginx:latest

# interactive
docker run --interactive --tty busybox:latest /bin/sh

# restart
docker restart web

# logs
docker logs web

# stop
docker stop web

# exec command
docker exec web ps

# rename
docker rename web web-old

# save and load
## save the image
docker save -o nginx.tar nginx
docker load --input nginx.tar

# commit
$ docker run -ti nginx /bin/bash
root@38d5616406a7:/# touch test
root@38d5616406a7:/# exit
$docker commit -m "commit msg" -a "auther@test.com" 38d5616406a7 new_img_name

# tag and push
docker tag new_img_name:latest user/new_img_name:latest
docker push user/new_img_name:latest

# bind mount volumn
docker run -d --name web -v ~/docs:/usr/local/apapche2/htdocs ubuntu

# mount managed volumn
docker run -d -v /var/lib/data --name web ubuntu

# romove all the containers
docker ps -a | awk '{print $1}' | sed '1d' | xargs -I xxx docker rm xxx

# remove all the images
docker images | awk '{print $3}' | sed '1d' | xargs -I xxx docker rmi -f xxx

# closed container
$cid=$(docker run -d --net none alpine:latest ip addr)
$docker logs $cid
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever

# bridged container
$ docker run --rm --net bridge alpine:latest ip addr

# joined container
Share the container among the container network.
First container
$ docker run -d --name brady --network non alpine:latest nc -l 127.0.0.1:3333

The second container
$ docker run -it --network container:brady alpine:latest netstat -al

# open contrainer
docker run --rm --network host alpine:latest ip addr

# use -h to add hostname
$ docker run -it --rm -h alpine_host alpine:latest /bin/sh
/ # hostname
alpine_host
/ # cat /etc/hosts
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.2      alpine_host
/ # ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
9: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever


# get the contaniner commit history
docker history container_id

# from dockerfile, the build command. The dockerfile is in current working directory.
docker build -t tag_name .
docker build -t tag_name -f dockerfile .

# export and import
# Note that, export is very likely with the save, but it removes the commit history.
# export the container
docker export --output new_image.tar container_id
docker import new_image.tar new_images:tag_name
docker import http://example.com/exampleimage.tgz img_name:tag_name
#+end_src

** entrypoint
:PROPERTIES:
:CUSTOM_ID: entrypoint
:END:
entrypoint is a container loading and running command. If there are many
entryponits, the last command will be running.

** get all tags of image on remote repo
:PROPERTIES:
:CUSTOM_ID: get-all-tags-of-image-on-remote-repo
:END:
#+begin_src shell
 wget -q https://registry.hub.docker.com/v1/repositories/debian/tags -O -  | sed -e 's/[][]//g' -e 's/"//g' -e 's/ //g' | tr '}' '\n'  | awk -F: '{print $3}'
#+end_src

see the
[[https://fordodone.com/2015/10/02/docker-get-list-of-tags-in-repository/][docker
get list of tags in repository]]

** inspect. Find out the meta data of an image or a container
:PROPERTIES:
:CUSTOM_ID: inspect.-find-out-the-meta-data-of-an-image-or-a-container
:END:
#+begin_src shell
docker inspect image_name
docker inspect container_id
#+end_src

** attach. Attatch to the container stdin
:PROPERTIES:
:CUSTOM_ID: attach.-attatch-to-the-container-stdin
:END:
#+begin_src shell
docker attach container_id
#+end_src

** exec. Running cmd in a container like pipeline
:PROPERTIES:
:CUSTOM_ID: exec.-running-cmd-in-a-container-like-pipeline
:END:
#+begin_src shell
docker exec -it container_id /bin/sh
docker exec -d container_id cmd
echo $?
#+end_src

** attch 后，如果从stdin中exit，会导致容器的停止， exec 不会
:PROPERTIES:
:CUSTOM_ID: attch-后如果从stdin中exit会导致容器的停止-exec-不会
:END:
see [[http://blog.csdn.net/halcyonbaby/article/details/46884605][Docker
exec与Docker attach]]

** cp
:PROPERTIES:
:CUSTOM_ID: cp
:END:
#+begin_src shell
docker cp docker_id:file file
docker cp file docker:file
#+end_src

** many parameters together
:PROPERTIES:
:CUSTOM_ID: many-parameters-together
:END:
#+begin_src shell
docker run -d --privileged --restart=always --network host -v $(pwd):/mount_point -e ENV="env"  --name container_name image_name:tag_name
#+end_src

use host network for performance issue.

** No such file or directory for /var/lib/docker/overlay2
:PROPERTIES:
:CUSTOM_ID: no-such-file-or-directory-for-varlibdockeroverlay2
:END:
#+begin_src shell
sudo umount /var/lib/docker/overlay2
sudo rm -rf /var/lib/docker
sudo systemctl restart docker
#+end_src

see [[https://github.com/docker/for-mac/issues/1396][No such file or
directory for /var/lib/docker/overlay2 #1396]]

** -q cmd option
:PROPERTIES:
:CUSTOM_ID: q-cmd-option
:END:
#+begin_src shell
-q, --quiet           Only show numeric IDs
#+end_src

** delete no tag name images
:PROPERTIES:
:CUSTOM_ID: delete-no-tag-name-images
:END:
#+begin_src shell
docker rmi $(docker images -q --filter "dangling=true")
#+end_src

** delete all Exited contrainers
:PROPERTIES:
:CUSTOM_ID: delete-all-exited-contrainers
:END:
#+begin_src shell
docker rm $(docker ps -a | grep Exited | awk '{print $1}')
#+end_src

** stop and delete all containers
:PROPERTIES:
:CUSTOM_ID: stop-and-delete-all-containers
:END:
#+begin_src shell
docker rm $(docker ps -a -q)
#+end_src

** delete all images
:PROPERTIES:
:CUSTOM_ID: delete-all-images
:END:
#+begin_src shell
docker rmi $(docker images -a -q)
#+end_src

** start the stopped container
:PROPERTIES:
:CUSTOM_ID: start-the-stopped-container
:END:
#+begin_src shell
docker start container_id
#+end_src

** debian 9.8 docker installation error
:PROPERTIES:
:CUSTOM_ID: debian-9.8-docker-installation-error
:END:
In debian 9.8, there might be a error, the docker install might be
failed. see [[https://github.com/docker/for-linux/issues/598][Docker CE
install failed on debian 9.8]] The solution is reboot the debian system,
and then reinstall the docker.

** start with /sbin/init
:PROPERTIES:
:CUSTOM_ID: start-with-sbininit
:END:
#+begin_src shell
docker run -ti -d --privileged=true ubuntu:16.04  "/sbin/init"
#+end_src

** udp
:PROPERTIES:
:CUSTOM_ID: udp
:END:
#+begin_src shell
docker run -p 53160:53160 \
    -p 53160:53160/udp -p 58846:58846 \
    -p 8112:8112 -t -i image start.sh
#+end_src

** network commands
:PROPERTIES:
:CUSTOM_ID: network-commands
:END:
#+begin_src shell
$ docker network ls

$ docker network ls --filter name=bridge --format "{{.ID}}"

$ docker network create mybridge

$ docker network prune

$ docker network rm testing_bridge
#+end_src

** rm docker0 interface
:PROPERTIES:
:CUSTOM_ID: rm-docker0-interface
:END:
#+begin_src shell
sudo ip link delete docker0
#+end_src


** dockerfile build with github secret

github workflow yaml file:
#+begin_src shell
build-args: |
  SECRETS_TOKEN=${{ secrets.SECRETS_DSN }}

#+end_src

in dockerfile

#+begin_src docker
ARG SECRETS_TOKEN
ENV SECRETS_TOKEN=${SECRETS_TOKEN}
#+end_src

** docker china mirror

#+begin_src shell
sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
    "registry-mirrors": [
    	"https://dockerpull.com",
        "https://docker.anyhub.us.kg",
        "https://dockerhub.jobcher.com",
        "https://dockerhub.icu",
        "https://docker.awsl9527.cn"
    ]
}
EOF
sudo systemctl daemon-reload && sudo systemctl restart docker

#+end_src

copy from [[https://www.coderjia.cn/archives/dba3f94c-a021-468a-8ac6-e840f85867ea][目前国内可用Docker镜像源汇总（截至2024年8月）
]]
