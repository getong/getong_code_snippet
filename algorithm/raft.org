* raft

** Raft 算法基本原理

#+begin_quote
Raft 将共识问题分解三个子问题：

Leader election 领导选举：有且仅有一个 leader 节点，如果 leader 宕机，通过选举机制选出新的 leader；
Log replication 日志复制：leader 从客户端接收数据更新/删除请求，然后日志复制到 follower 节点，从而保证集群数据的一致性；
Safety 安全性：通过安全性原则来处理一些特殊 case，保证 Raft 算法的完备性；

所以，Raft 算法核心流程可以归纳为：

首先选出 leader，leader 节点负责接收外部的数据更新/删除请求；
然后日志复制到其他 follower 节点，同时通过安全性的准则来保证整个日志复制的一致性；
如果遇到 leader 故障，followers 会重新发起选举出新的 leader；
#+end_quote

** Leader Election 领导选举

#+begin_quote
集群中每个节点只能处于 Leader、Follower 和 Candidate 三种状态的一种:

follower 从节点：
节点默认是 follower；
如果**刚刚开始 ** 或 和 leader 通信超时，follower 会发起选举，变成 candidate，然后去竞选 leader；
如果收到其他 candidate 的竞选投票请求，按照先来先得 & 每个任期只能投票一次 的投票原则投票;

candidate 候选者：
follower 发起选举后就变为 candidate，会向其他节点拉选票。candidate 的票会投给自己，所以不会向其他节点投票
如果获得超过半数的投票，candidate 变成 leader，然后马上和其他节点通信，表明自己的 leader 的地位；
如果选举超时，重新发起选举；
如果遇到更高任期 Term 的 leader 的通信请求，转化为 follower；

leader 主节点：
成为 leader 节点后，此时可以接受客户端的数据请求，负责日志同步；
如果遇到更高任期 Term 的 candidate 的通信请求，这说明 candidate 正在竞选 leader，此时之前任期的 leader 转化为 follower，且完成投票；
如果遇到更高任期 Term 的 leader 的通信请求，这说明已经选举成功新的 leader，此时之前任期的 leader 转化为 follower；

具体的说，Leader 在任期内会周期性向其他 follower 节点发送心跳来维持地位。follower 如果发现心跳超时，就认为 leader 节点宕机或不存在。随机等待一定时间后，follower 会发起选举，变成 candidate，然后去竞选 leader。选举结果有三种情况：

获取超过半数投票，赢得选举：
当 Candidate 获得超过半数的投票时，代表自己赢得了选举，且转化为 leader。此时，它会马上向其他节点发送请求，从而确认自己的 leader 地位，从而阻止新一轮的选举；
投票原则：当多个 Candidate 竞选 Leader 时：
一个任期内，follower 只会投票一次票，且投票先来显得；
Candidate 存储的日志至少要和 follower 一样新（安全性准则），否则拒绝投票；
投票未超过半数，选举失败：
当 Candidate 没有获得超过半数的投票时，说明多个 Candidate 竞争投票导致过于分散，或者出现了丢包现象。此时，认为当期任期选举失败，任期 TermId+1，然后发起新一轮选举；
上述机制可能出现多个 Candidate 竞争投票，导致每个 Candidate 一直得不到超过半数的票，最终导致无限选举投票循环；
投票分散问题解决： Raft 会给每个 Candidate 在固定时间内随机确认一个超时时间（一般为 150-300ms）。这么做可以尽量避免新的一次选举出现多个 Candidate 竞争投票的现象；
收到其他 Leader 通信请求：
如果 Candidate 收到其他声称自己是 Leader 的请求的时候，通过任期 TermId 来判断是否处理；
如果请求的任期 TermId 不小于 Candidate 当前任期 TermId，那么 Candidate 会承认该 Leader 的合法地位并转化为 Follower；
否则，拒绝这次请求，并继续保持 Candidate；
简单的多，Leader Election 领导选举 通过若干的投票原则，保证一次选举有且仅可能最多选出一个 leader，从而解决了脑裂问题。
#+end_quote

copy from [[https://zhuanlan.zhihu.com/p/383555591][分布式一致性算法 Raft]]
