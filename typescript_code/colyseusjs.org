* colyseusjs

** installation

#+begin_src shell
npm install --save colyseus.js
#+end_src

** init template

#+begin_src shell
mkdir server
npm init colyseus-app ./server

cd server
npm install

npm run start
#+end_src

** test

#+begin_src shell
npx colyseus-loadtest script.ts --room battle --numClients 50 --endpoint ws://localhost:2567
#+end_src

copy from [[https://www.cnblogs.com/hacker-linner/p/14758629.html][ColyseusJS 轻量级多人游戏服务器开发框架]]

** colyseus player pattern

#+begin_src typescript
// server/rooms/MyRoom.ts
import { Room, Client } from "colyseus";
import { Schema, type, MapSchema } from "@colyseus/schema";

class Player extends Schema {
    @type("string") name: string;
    @type("string") status: string = "idle"; // idle, ready, playing, finished
    @type("number") progress: number = 0;
}

class State extends Schema {
    @type({ map: Player }) players = new MapSchema<Player>();
}

export class MyRoom extends Room<State> {
    onCreate() {
        this.setState(new State());
    }

    onJoin(client: Client, options: any) {
        const player = new Player();
        player.name = options.name || `Player_${client.sessionId}`;
        this.state.players.set(client.sessionId, player);
    }

    onMessage(client: Client, message: any) {
        const player = this.state.players.get(client.sessionId);
        if (!player) return;

        if (message.type === "update_progress") {
            player.progress = message.progress;
            player.status = message.status;
        }
    }

    onLeave(client: Client) {
        this.state.players.delete(client.sessionId);
    }
}
#+end_src

generated by chatgpt
