* flutter_rust_bridge

** basic commands
#+begin_src shell
cargo install flutter_rust_bridge_codegen

flutter create flutter_rust_bridge_frb_example
cd flutter_rust_bridge_frb_example
flutter pub add flutter_rust_bridge
flutter pub add -d freezed
flutter pub add -d build_runner
flutter pub add -d ffigen
flutter pub add freezed_annotation
flutter pub add ffi


cargo new rust --lib
cd rust
cargo add flutter_rust_bridge
cargo add anyhow
cargo xcode

cd ..


flutter_rust_bridge_codegen \
    --rust-input rust/src/api.rs \
    --dart-output ./lib/bridge_generated.dart \
    --dart-decl-output ./lib/bridge_definitions.dart \
    -c ios/Runner/bridge_generated.h \
    -e macos/Runner/


flutter run

flutter_rust_bridge_codegen \
    -r $crate/src/api.rs \
    -d lib/bridge_generated.dart \
    -c ios/Runner/bridge_generated.h \
    -e macos/Runner/   # if building for MacOS, extra path is essential

#+end_src

copy from [[https://cjycode.com/flutter_rust_bridge/integrate/ios_gen.html][Generating bindings]]

also see [[https://blog.logrocket.com/using-flutter-rust-bridge-cross-platform-development/][Using Flutter Rust Bridge for cross-platform development]]


** flutter_rust_bridge_template

use [[https://github.com/Desdaemon/flutter_rust_bridge_template][flutter_rust_bridge_template]]

#+begin_src shell
git clone https://github.com/Desdaemon/flutter_rust_bridge_template new_project_name
cd new_project_name

flutter_rust_bridge_codegen \
    --rust-input native/src/api.rs \
    --dart-output ./lib/bridge_generated.dart \
    --dart-decl-output ./lib/bridge_definitions.dart \
    -c ios/Runner/bridge_generated.h \
    -e macos/Runner/

flutter run
#+end_src

** macos setting

see [[https://iota-for-flutter.github.io/tutorial/building-without-iota/flutter-and-rust/frb-example-app/macos-instructions.html][Part 4: macOS specific instructions]]


** rust plugin name
Suppose the rust crate inside the flutter_rust_bridge application called native, the flutter object name should be _NativeImpl_.