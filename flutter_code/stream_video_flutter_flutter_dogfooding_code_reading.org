* stream_video_flutter flutter_dogfooding code reading

** code repo

https://github.com/GetStream/stream-video-flutter/tree/main/dogfooding

** stream video data flow

App → GoRouter → CallScreen
                      ↓
                 StreamCallContainer
                      ↓
                 StreamVideoRenderer
                      ↓
                 CallControlsBar

** handle incoming call

#+begin_src dart
streamVideo.state.incomingCall.listen((Call? incomingCall) {
    if (incomingCall != null) {
      _handleIncomingCall(incomingCall);
    }
});
#+end_src

** call screen

#+begin_src dart
class CallScreen extends StatefulWidget {
  final String callId;
  final Call? call;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: StreamCallContainer(
        call: call,
        child: Column(
          children: [
            Expanded(
              child: StreamVideoRenderer(
                call: call,
              ),
            ),
            CallControlsBar(
              call: call,
              onEndCall: () => context.pop(),
            ),
          ],
        ),
      ),
    );
  }
}
#+end_src


** consumeAndAcceptActiveCall

#+begin_src dart
streamVideo.consumeAndAcceptActiveCall(
  onCallAccepted: (call) {
    final extra = (
      call: call,
      connectOptions: null,
    );

    _router.push(CallRoute($extra: extra).location, extra: extra);
  },
);
#+end_src

** observeCallKitEvents

#+begin_src dart
void _observeCallKitEvents() {
  final streamVideo = locator.get<StreamVideo>();

  // On mobile we depend on call kit notifications.
  // On desktop and web they are (currently) not available, so we depend on a
  // websocket which can receive a call when the app is open.
  if (CurrentPlatform.isMobile) {
    _compositeSubscription.add(
      streamVideo.observeCoreCallKitEvents(
        onCallAccepted: (callToJoin) {
          // Navigate to the call screen.
          final extra = (
            call: callToJoin,
            connectOptions: null,
          );

          _router.push(CallRoute($extra: extra).location, extra: extra);
        },
      ),
    );
  } else {
    _compositeSubscription.add(streamVideo.state.incomingCall.listen((call) {
          if (call == null) return;

          // Navigate to the call screen.
          final extra = (
            call: call,
            connectOptions: null,
          );

          _router.push(CallRoute($extra: extra).location, extra: extra);
    }));
  }
}
#+end_src

** Network Data to UI Flow

*** 1. Incoming Call Data Processing
#+BEGIN_SRC dart
// Push notification trigger
FirebaseMessaging.onMessage.listen((RemoteMessage message) {
  streamVideo.handleRingingFlowNotifications(message.data);
});

// StreamVideo state listening
streamVideo.state.incomingCall.listen((Call? call) {
  if (call != null) {
    _showIncomingCallScreen(call);
  }
});
#+END_SRC

*** 2. CallKit Integration Flow
#+BEGIN_SRC dart
// iOS/Android system call interface
streamVideo.observeCoreCallKitEvents(
  onCallAccepted: (Call callToJoin) {
    // Navigate to call UI after user accepts
    context.pushNamed(
      CallRoute.name,
      pathParameters: {'id': callToJoin.id},
    );
  },
  onCallRejected: (Call call) {
    // Handle call rejection
  },
);
#+END_SRC

*** 3. Manual Call Initiation Flow
#+BEGIN_SRC dart
// 1. User initiates call in UI
final call = streamVideo.makeCall(
  callType: StreamCallType.defaultType(),
  id: callId,
);

// 2. Network request to create call
await call.getOrCreate();

// 3. Launch call UI
context.pushNamed(
  CallRoute.name,
  pathParameters: {'id': call.id},
);
#+END_SRC

** Data Flow Architecture

*** Data Flow Diagram
#+BEGIN_EXAMPLE
Push Server → Firebase/APN → Device
    ↓
StreamVideo SDK ← WebSocket ← Stream Server
    ↓
State Management (incomingCall.listen)
    ↓
UI Trigger (GoRouter navigation)
    ↓
Call Screen (CallScreen)
#+END_EXAMPLE

*** Key Network Connection Points

**** Initialization Connection
#+BEGIN_SRC dart
// Initialize in AppInjector
final streamVideo = StreamVideo(
  apiKey: tokenResponse.apiKey,
  user: user,
  userToken: tokenResponse.token,
);

// Connect to Stream server
await streamVideo.connect();
#+END_SRC

**** Real-time Data Listening
#+BEGIN_SRC dart
// Listen to call status changes
call.state.status.listen((CallStatus status) {
  switch (status) {
    case CallStatus.incoming:
      // Show incoming call UI
      break;
    case CallStatus.ringing:
      // Show dialing UI
      break;
    case CallStatus.joined:
      // Enter call UI
      break;
  }
});
#+END_SRC

** UI Component Data Usage

*** 1. Main Listening Location and UI Launch
#+BEGIN_SRC dart
// Core processing in app_content.dart
void _observeCallKitEvents() {
  final streamVideo = locator.get<StreamVideo>();

  if (CurrentPlatform.isMobile) {
    // Mobile uses CallKit events
    _compositeSubscription.add(
      streamVideo.observeCoreCallKitEvents(
        onCallAccepted: (callToJoin) {
          // Direct navigation to call screen
          final extra = (call: callToJoin, connectOptions: null);
          _router.push(CallRoute($extra: extra).location, extra: extra);
        },
      ),
    );
  } else {
    // Desktop and Web use WebSocket listening
    _compositeSubscription.add(
      streamVideo.state.incomingCall.listen((call) {
        if (call == null) return;

        // Navigate to call screen
        final extra = (call: call, connectOptions: null);
        _router.push(CallRoute($extra: extra).location, extra: extra);
      })
    );
  }
}
#+END_SRC

*** 2. Data Flow to UI Components

**** Complete Flow
#+BEGIN_EXAMPLE
StreamVideo.state.incomingCall (Stream<Call?>)
    ↓
GoRouter Navigation System
    ↓
CallScreen UI Component
    ↓
StreamCallContainer (Wrapper)
    ↓
Specific UI Components
#+END_EXAMPLE

**** CallScreen State Usage
#+BEGIN_SRC dart
class CallScreen extends StatefulWidget {
  const CallScreen({
    required this.call,  // Call object from incoming call
    this.connectOptions,
  });

  final Call call;  // Data obtained from incomingCall stream
}

// Usage in StreamCallContainer
StreamCallContainer(
  call: widget.call,  // Pass incoming Call object
  callConnectOptions: widget.connectOptions,
  onCancelCallTap: () async {
    await widget.call.reject(reason: CallRejectReason.cancel());
  },
  onCallDisconnected: (disconnectedProperties) {
    Navigator.of(context).pop();
  },
)
#+END_SRC

*** 3. State Management and Data Binding

**** StreamBuilder Listening to Call State Changes
#+BEGIN_SRC dart
// Listen to call state changes in CallScreen
StreamBuilder<CallState>(
  stream: call.state.asStream(),  // Listen to Call's state stream
  builder: (context, snapshot) {
    final callState = snapshot.data;
    return StreamCallContent(
      call: call,
      callState: callState,
      // Render UI using real-time state data
    );
  },
)
#+END_SRC

**** Real-time Participant List Updates
#+BEGIN_SRC dart
StreamBuilder<CallState>(
  stream: call.state.asStream(),
  builder: (context, snapshot) {
    final callState = snapshot.requireData;
    final participants = callState.callParticipants;  // Real-time participant data

    return ListView.builder(
      itemBuilder: (context, index) {
        final participant = participants[index];
        return ParticipantTile(participant: participant);
      },
      itemCount: participants.length,
    );
  },
)
#+END_SRC

*** 4. Specific UI Component Data Usage

**** Call Control Bar Using Call Data
#+BEGIN_SRC dart
// Call control buttons use Call object methods
ToggleMicrophoneOption(
  call: call,  // Use incoming Call object
  localParticipant: localParticipant,
  onPressed: () => call.setMicrophoneEnabled(!isMuted),
),

ToggleCameraOption(
  call: call,
  localParticipant: localParticipant,
  onPressed: () => call.setCameraEnabled(!isCameraOff),
),
#+END_SRC

**** Call Duration Display
#+BEGIN_SRC dart
StreamBuilder<Duration>(
  stream: widget.call.callDurationStream,  // Use Call's duration stream
  builder: (context, snapshot) {
    final duration = snapshot.data ?? Duration.zero;
    return Text('${duration.inMinutes}:${duration.inSeconds % 60}');
  },
)
#+END_SRC

*** 5. Chat Feature Integration

**** Create Chat Channel Based on Call ID
#+BEGIN_SRC dart
Future<void> _connectChatChannel() async {
  // Create chat channel using Call ID
  _channel = await _userChatRepo.createChannel(widget.call.id);

  if (mounted) setState(() {});  // Rebuild UI to enable chat button
}

// Chat button usage
_ShowChatButton(channel: _channel),  // Pass chat channel
#+END_SRC

*** 6. Reactive State Updates

**** Real-time Participant State Changes
#+BEGIN_SRC dart
// Listen to participant state changes
call.state.participants.listen((participants) {
  // UI automatically updates participant list
  setState(() {
    // Trigger UI rebuild
  });
});

// Listen to call status changes
call.state.status.listen((CallStatus status) {
  switch (status) {
    case CallStatus.incoming:
      // Show incoming call acceptance interface
      break;
    case CallStatus.joined:
      // Enter call interface
      break;
    case CallStatus.ended:
      // Call ended, return to main interface
      break;
  }
});
#+END_SRC

** Summary

*** Reactive Data Flow
The entire data flow is reactive:

1. *Incoming Call Event* → ~streamVideo.state.incomingCall~ stream
2. *Route Navigation* → ~GoRouter.push(CallRoute)~
3. *UI Rendering* → ~CallScreen~ receives ~Call~ object
4. *State Binding* → ~StreamBuilder~ listens to ~call.state~
5. *Real-time Updates* → UI components respond to state changes and automatically rebuild

This design ensures the entire process from incoming call to UI display is real-time responsive, allowing users to see real-time changes in call status, participants, duration, and other information.



** Overview
This document describes how the `streamVideo.state.incomingCall.listen()` stream data is consumed by UI components, state management (BLoC), and routing (GoRouter) in the Flutter Dogfooding app.

*** Core Data Stream
#+BEGIN_SRC dart
streamVideo.state.incomingCall.listen((Call? incomingCall) {
  if (incomingCall != null) {
    _handleIncomingCall(incomingCall);
  }
});
#+END_SRC

*** 1. GoRouter Integration

**** 1.1 Route Configuration
#+BEGIN_SRC dart
// filepath: lib/router/routes.dart
@TypedGoRoute<CallRoute>(
  path: '/call/:id',
  name: 'call',
)
class CallRoute extends GoRouteData {
  const CallRoute({
    required this.id,
    this.$extra,
  });

  final String id;
  final ({Call call, CallConnectOptions? connectOptions})? $extra;

  @override
  Widget build(BuildContext context, GoRouterState state) {
    final call = $extra?.call;
    final connectOptions = $extra?.connectOptions;

    return CallScreen(
      call: call,
      connectOptions: connectOptions,
    );
  }
}
#+END_SRC

**** 1.2 Navigation Trigger from Incoming Call
#+BEGIN_SRC dart
// filepath: lib/app/app_content.dart
void _handleIncomingCall(Call incomingCall) {
  // Navigate to call screen using GoRouter
  final extra = (
    call: incomingCall,
    connectOptions: CallConnectOptions(
      camera: true,
      microphone: true,
    )
  );

  context.pushNamed(
    'call',
    pathParameters: {'id': incomingCall.id},
    extra: extra,
  );
}
#+END_SRC

**** 1.3 Deep Link Handling
#+BEGIN_SRC dart
// filepath: lib/app/app_content.dart
void _handleDeepLink(Uri uri) {
  if (uri.pathSegments.contains('join')) {
    final callId = uri.pathSegments.last;

    // Get call from StreamVideo state
    final call = streamVideo.state.calls.firstWhere(
      (c) => c.id == callId,
      orElse: () => streamVideo.call(callId: callId),
    );

    // Navigate using GoRouter
    context.pushNamed(
      'call',
      pathParameters: {'id': callId},
      extra: (call: call, connectOptions: null),
    );
  }
}
#+END_SRC

*** 2. State Management (BLoC Pattern)

**** 2.1 Call State BLoC
#+BEGIN_SRC dart
// filepath: lib/blocs/call_state_bloc.dart
class CallStateBloc extends Bloc<CallStateEvent, CallStateState> {
  final StreamVideo _streamVideo;
  late StreamSubscription<Call?> _incomingCallSubscription;

  CallStateBloc(this._streamVideo) : super(CallStateInitial()) {
    _incomingCallSubscription = _streamVideo.state.incomingCall.listen(
      (incomingCall) {
        if (incomingCall != null) {
          add(IncomingCallReceived(incomingCall));
        } else {
          add(IncomingCallCleared());
        }
      },
    );
  }

  @override
  Stream<CallStateState> mapEventToState(CallStateEvent event) async* {
    if (event is IncomingCallReceived) {
      yield CallStateIncoming(event.call);
    } else if (event is IncomingCallCleared) {
      yield CallStateInitial();
    }
  }
}
#+END_SRC

**** 2.2 Call State Events
#+BEGIN_SRC dart
abstract class CallStateEvent {}

class IncomingCallReceived extends CallStateEvent {
  final Call call;
  IncomingCallReceived(this.call);
}

class IncomingCallCleared extends CallStateEvent {}

class CallAccepted extends CallStateEvent {
  final Call call;
  CallAccepted(this.call);
}

class CallRejected extends CallStateEvent {
  final Call call;
  CallRejected(this.call);
}
#+END_SRC

**** 2.3 Call State States
#+BEGIN_SRC dart
abstract class CallStateState {}

class CallStateInitial extends CallStateState {}

class CallStateIncoming extends CallStateState {
  final Call call;
  CallStateIncoming(this.call);
}

class CallStateActive extends CallStateState {
  final Call call;
  CallStateActive(this.call);
}

class CallStateEnded extends CallStateState {}
#+END_SRC

*** 3. UI Components Data Consumption

**** 3.1 App-level Incoming Call Handler
#+BEGIN_SRC dart
// filepath: lib/app/app_content.dart
class AppContent extends StatefulWidget {
  @override
  _AppContentState createState() => _AppContentState();
}

class _AppContentState extends State<AppContent> {
  StreamSubscription<Call?>? _incomingCallSubscription;

  @override
  void initState() {
    super.initState();
    _setupIncomingCallListener();
  }

  void _setupIncomingCallListener() {
    final streamVideo = GetIt.instance<StreamVideo>();

    _incomingCallSubscription = streamVideo.state.incomingCall.listen(
      (incomingCall) {
        if (incomingCall != null) {
          _showIncomingCallDialog(incomingCall);
        }
      },
    );
  }

  void _showIncomingCallDialog(Call call) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => IncomingCallDialog(call: call),
    );
  }
}
#+END_SRC

**** 3.2 Incoming Call Dialog Component
#+BEGIN_SRC dart
// filepath: lib/widgets/incoming_call_dialog.dart
class IncomingCallDialog extends StatelessWidget {
  final Call call;

  const IncomingCallDialog({required this.call});

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Incoming Call'),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text('Call from: ${call.state.createdBy?.name ?? 'Unknown'}'),
          Text('Call ID: ${call.id}'),
          StreamBuilder<CallState>(
            stream: call.state.asStream(),
            builder: (context, snapshot) {
              final callState = snapshot.data;
              return Text('Status: ${callState?.status ?? 'Unknown'}');
            },
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => _rejectCall(context),
          child: Text('Reject'),
        ),
        ElevatedButton(
          onPressed: () => _acceptCall(context),
          child: Text('Accept'),
        ),
      ],
    );
  }

  void _acceptCall(BuildContext context) {
    Navigator.of(context).pop();

    // Navigate to call screen
    context.pushNamed(
      'call',
      pathParameters: {'id': call.id},
      extra: (call: call, connectOptions: null),
    );
  }

  void _rejectCall(BuildContext context) {
    call.reject();
    Navigator.of(context).pop();
  }
}
#+END_SRC

**** 3.3 Call Screen Component
#+BEGIN_SRC dart
// filepath: lib/screens/call_screen.dart
class CallScreen extends StatefulWidget {
  final Call? call;
  final CallConnectOptions? connectOptions;

  const CallScreen({
    this.call,
    this.connectOptions,
  });

  @override
  _CallScreenState createState() => _CallScreenState();
}

class _CallScreenState extends State<CallScreen> {
  late Call _call;

  @override
  void initState() {
    super.initState();
    _call = widget.call ?? _getCallFromRouter();
    _setupCallStateListener();
  }

  void _setupCallStateListener() {
    _call.state.status.listen((status) {
      switch (status) {
        case CallStatus.incoming:
          // Show incoming call UI
          break;
        case CallStatus.ringing:
          // Show ringing UI
          break;
        case CallStatus.joined:
          // Show active call UI
          break;
        case CallStatus.ended:
          // Navigate back
          context.pop();
          break;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: StreamCallContainer(
        call: _call,
        child: Column(
          children: [
            _buildVideoRenderer(),
            _buildCallControls(),
            _buildParticipantsList(),
          ],
        ),
      ),
    );
  }

  Widget _buildParticipantsList() {
    return StreamBuilder<List<CallParticipant>>(
      stream: _call.state.participants.asStream(),
      builder: (context, snapshot) {
        final participants = snapshot.data ?? [];
        return ListView.builder(
          itemCount: participants.length,
          itemBuilder: (context, index) {
            final participant = participants[index];
            return ParticipantTile(participant: participant);
          },
        );
      },
    );
  }
}
#+END_SRC

*** 4. Service Layer Integration

**** 4.1 Notification Service
#+BEGIN_SRC dart
// filepath: lib/services/notification_service.dart
class NotificationService {
  final StreamVideo _streamVideo;

  NotificationService(this._streamVideo) {
    _setupIncomingCallNotifications();
  }

  void _setupIncomingCallNotifications() {
    _streamVideo.state.incomingCall.listen((call) {
      if (call != null) {
        _showLocalNotification(call);
      }
    });
  }

  void _showLocalNotification(Call call) {
    final notification = LocalNotification(
      title: 'Incoming Call',
      body: 'Call from ${call.state.createdBy?.name ?? 'Unknown'}',
      payload: call.id,
    );

    NotificationManager.show(notification);
  }
}
#+END_SRC

**** 4.2 Analytics Service
#+BEGIN_SRC dart
// filepath: lib/services/analytics_service.dart
class AnalyticsService {
  final StreamVideo _streamVideo;

  AnalyticsService(this._streamVideo) {
    _trackIncomingCalls();
  }

  void _trackIncomingCalls() {
    _streamVideo.state.incomingCall.listen((call) {
      if (call != null) {
        _trackEvent('incoming_call_received', {
          'call_id': call.id,
          'caller_id': call.state.createdBy?.id,
          'timestamp': DateTime.now().toIso8601String(),
        });
      }
    });
  }

  void _trackEvent(String eventName, Map<String, dynamic> parameters) {
    // Send to analytics service
    FirebaseAnalytics.instance.logEvent(
      name: eventName,
      parameters: parameters,
    );
  }
}
#+END_SRC

*** 5. Dependency Injection Setup

**** 5.1 Service Registration
#+BEGIN_SRC dart
// filepath: lib/di/injector.dart
class AppInjector {
  static void init() {
    // Register StreamVideo
    GetIt.instance.registerSingleton<StreamVideo>(
      StreamVideo(/*...*/),
    );

    // Register BLoC
    GetIt.instance.registerFactory<CallStateBloc>(
      () => CallStateBloc(GetIt.instance<StreamVideo>()),
    );

    // Register Services
    GetIt.instance.registerSingleton<NotificationService>(
      NotificationService(GetIt.instance<StreamVideo>()),
    );

    GetIt.instance.registerSingleton<AnalyticsService>(
      AnalyticsService(GetIt.instance<StreamVideo>()),
    );
  }
}
#+END_SRC

*** 6. Complete Data Flow Architecture

**** 6.1 Data Flow Diagram
#+BEGIN_EXAMPLE
StreamVideo.state.incomingCall (Stream<Call?>)
            |
            ├── GoRouter Navigation
            |   └── CallRoute.build() → CallScreen
            |
            ├── BLoC State Management
            |   ├── CallStateBloc.listen()
            |   └── CallStateEvent → CallStateState
            |
            ├── UI Components
            |   ├── IncomingCallDialog
            |   ├── CallScreen
            |   └── ParticipantsList
            |
            └── Services
                ├── NotificationService
                └── AnalyticsService
#+END_EXAMPLE

**** 6.2 Event Sequence
#+BEGIN_EXAMPLE
1. Incoming Call Received
   ↓
2. streamVideo.state.incomingCall emits Call object
   ↓
3. Multiple Listeners React:
   ├── App-level listener → Show dialog
   ├── BLoC listener → Update state
   ├── Router listener → Navigate
   └── Service listeners → Notify/Track
   ↓
4. UI Components Update:
   ├── IncomingCallDialog renders
   ├── CallScreen prepares
   └── State-dependent widgets rebuild
   ↓
5. User Interaction:
   ├── Accept → Navigate to CallScreen
   └── Reject → Dismiss and cleanup
#+END_EXAMPLE

*** 7. Best Practices and Patterns

**** 7.1 Stream Subscription Management
#+BEGIN_SRC dart
class ComponentWithSubscription extends StatefulWidget {
  @override
  _ComponentState createState() => _ComponentState();
}

class _ComponentState extends State<ComponentWithSubscription> {
  StreamSubscription<Call?>? _subscription;

  @override
  void initState() {
    super.initState();
    _subscription = streamVideo.state.incomingCall.listen(_handleCall);
  }

  @override
  void dispose() {
    _subscription?.cancel(); // Prevent memory leaks
    super.dispose();
  }

  void _handleCall(Call? call) {
    if (mounted && call != null) {
      // Handle call safely
    }
  }
}
#+END_SRC

**** 7.2 Error Handling
#+BEGIN_SRC dart
_subscription = streamVideo.state.incomingCall.listen(
  (call) => _handleCall(call),
  onError: (error) {
    // Log error and show user-friendly message
    print('Incoming call error: $error');
    _showErrorDialog('Failed to receive incoming call');
  },
);
#+END_SRC

**** 7.3 Testing Considerations
#+BEGIN_SRC dart
// Mock for testing
class MockStreamVideo extends Mock implements StreamVideo {
  final StreamController<Call?> _incomingCallController =
      StreamController<Call?>.broadcast();

  @override
  Stream<Call?> get incomingCall => _incomingCallController.stream;

  void simulateIncomingCall(Call call) {
    _incomingCallController.add(call);
  }
}
#+END_SRC

*** Summary

The `streamVideo.state.incomingCall.listen()` stream serves as the central data source for incoming call handling, with multiple components consuming this data:

- *GoRouter*: Handles navigation to call screens
- *BLoC*: Manages application state and business logic
- *UI Components*: Render incoming call interfaces and update displays
- *Services*: Handle notifications, analytics, and other side effects

This architecture ensures a reactive, scalable approach to incoming call management while maintaining separation of concerns and testability.

This document describes how the `streamVideo.state.incomingCall.listen()` stream data is consumed by UI components, state management (BLoC), and routing (GoRouter) in the Flutter Dogfooding app.

*** Core Data Stream
#+BEGIN_SRC dart
streamVideo.state.incomingCall.listen((Call? incomingCall) {
  if (incomingCall != null) {
    _handleIncomingCall(incomingCall);
  }
});
#+END_SRC

*** 1. GoRouter Integration

**** 1.1 Route Configuration
#+BEGIN_SRC dart
// filepath: lib/router/routes.dart
@TypedGoRoute<CallRoute>(
  path: '/call/:id',
  name: 'call',
)
class CallRoute extends GoRouteData {
  const CallRoute({
    required this.id,
    this.$extra,
  });

  final String id;
  final ({Call call, CallConnectOptions? connectOptions})? $extra;

  @override
  Widget build(BuildContext context, GoRouterState state) {
    final call = $extra?.call;
    final connectOptions = $extra?.connectOptions;

    return CallScreen(
      call: call,
      connectOptions: connectOptions,
    );
  }
}
#+END_SRC

**** 1.2 Navigation Trigger from Incoming Call
#+BEGIN_SRC dart
// filepath: lib/app/app_content.dart
void _handleIncomingCall(Call incomingCall) {
  // Navigate to call screen using GoRouter
  final extra = (
    call: incomingCall,
    connectOptions: CallConnectOptions(
      camera: true,
      microphone: true,
    )
  );

  context.pushNamed(
    'call',
    pathParameters: {'id': incomingCall.id},
    extra: extra,
  );
}
#+END_SRC

**** 1.3 Deep Link Handling
#+BEGIN_SRC dart
// filepath: lib/app/app_content.dart
void _handleDeepLink(Uri uri) {
  if (uri.pathSegments.contains('join')) {
    final callId = uri.pathSegments.last;

    // Get call from StreamVideo state
    final call = streamVideo.state.calls.firstWhere(
      (c) => c.id == callId,
      orElse: () => streamVideo.call(callId: callId),
    );

    // Navigate using GoRouter
    context.pushNamed(
      'call',
      pathParameters: {'id': callId},
      extra: (call: call, connectOptions: null),
    );
  }
}
#+END_SRC

*** 2. State Management (BLoC Pattern)

**** 2.1 Call State BLoC
#+BEGIN_SRC dart
// filepath: lib/blocs/call_state_bloc.dart
class CallStateBloc extends Bloc<CallStateEvent, CallStateState> {
  final StreamVideo _streamVideo;
  late StreamSubscription<Call?> _incomingCallSubscription;

  CallStateBloc(this._streamVideo) : super(CallStateInitial()) {
    _incomingCallSubscription = _streamVideo.state.incomingCall.listen(
      (incomingCall) {
        if (incomingCall != null) {
          add(IncomingCallReceived(incomingCall));
        } else {
          add(IncomingCallCleared());
        }
      },
    );
  }

  @override
  Stream<CallStateState> mapEventToState(CallStateEvent event) async* {
    if (event is IncomingCallReceived) {
      yield CallStateIncoming(event.call);
    } else if (event is IncomingCallCleared) {
      yield CallStateInitial();
    }
  }
}
#+END_SRC

**** 2.2 Call State Events
#+BEGIN_SRC dart
abstract class CallStateEvent {}

class IncomingCallReceived extends CallStateEvent {
  final Call call;
  IncomingCallReceived(this.call);
}

class IncomingCallCleared extends CallStateEvent {}

class CallAccepted extends CallStateEvent {
  final Call call;
  CallAccepted(this.call);
}

class CallRejected extends CallStateEvent {
  final Call call;
  CallRejected(this.call);
}
#+END_SRC

**** 2.3 Call State States
#+BEGIN_SRC dart
abstract class CallStateState {}

class CallStateInitial extends CallStateState {}

class CallStateIncoming extends CallStateState {
  final Call call;
  CallStateIncoming(this.call);
}

class CallStateActive extends CallStateState {
  final Call call;
  CallStateActive(this.call);
}

class CallStateEnded extends CallStateState {}
#+END_SRC

*** 3. UI Components Data Consumption

**** 3.1 App-level Incoming Call Handler
#+BEGIN_SRC dart
// filepath: lib/app/app_content.dart
class AppContent extends StatefulWidget {
  @override
  _AppContentState createState() => _AppContentState();
}

class _AppContentState extends State<AppContent> {
  StreamSubscription<Call?>? _incomingCallSubscription;

  @override
  void initState() {
    super.initState();
    _setupIncomingCallListener();
  }

  void _setupIncomingCallListener() {
    final streamVideo = GetIt.instance<StreamVideo>();

    _incomingCallSubscription = streamVideo.state.incomingCall.listen(
      (incomingCall) {
        if (incomingCall != null) {
          _showIncomingCallDialog(incomingCall);
        }
      },
    );
  }

  void _showIncomingCallDialog(Call call) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => IncomingCallDialog(call: call),
    );
  }
}
#+END_SRC

**** 3.2 Incoming Call Dialog Component
#+BEGIN_SRC dart
// filepath: lib/widgets/incoming_call_dialog.dart
class IncomingCallDialog extends StatelessWidget {
  final Call call;

  const IncomingCallDialog({required this.call});

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Incoming Call'),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text('Call from: ${call.state.createdBy?.name ?? 'Unknown'}'),
          Text('Call ID: ${call.id}'),
          StreamBuilder<CallState>(
            stream: call.state.asStream(),
            builder: (context, snapshot) {
              final callState = snapshot.data;
              return Text('Status: ${callState?.status ?? 'Unknown'}');
            },
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => _rejectCall(context),
          child: Text('Reject'),
        ),
        ElevatedButton(
          onPressed: () => _acceptCall(context),
          child: Text('Accept'),
        ),
      ],
    );
  }

  void _acceptCall(BuildContext context) {
    Navigator.of(context).pop();

    // Navigate to call screen
    context.pushNamed(
      'call',
      pathParameters: {'id': call.id},
      extra: (call: call, connectOptions: null),
    );
  }

  void _rejectCall(BuildContext context) {
    call.reject();
    Navigator.of(context).pop();
  }
}
#+END_SRC

**** 3.3 Call Screen Component
#+BEGIN_SRC dart
// filepath: lib/screens/call_screen.dart
class CallScreen extends StatefulWidget {
  final Call? call;
  final CallConnectOptions? connectOptions;

  const CallScreen({
    this.call,
    this.connectOptions,
  });

  @override
  _CallScreenState createState() => _CallScreenState();
}

class _CallScreenState extends State<CallScreen> {
  late Call _call;

  @override
  void initState() {
    super.initState();
    _call = widget.call ?? _getCallFromRouter();
    _setupCallStateListener();
  }

  void _setupCallStateListener() {
    _call.state.status.listen((status) {
      switch (status) {
        case CallStatus.incoming:
          // Show incoming call UI
          break;
        case CallStatus.ringing:
          // Show ringing UI
          break;
        case CallStatus.joined:
          // Show active call UI
          break;
        case CallStatus.ended:
          // Navigate back
          context.pop();
          break;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: StreamCallContainer(
        call: _call,
        child: Column(
          children: [
            _buildVideoRenderer(),
            _buildCallControls(),
            _buildParticipantsList(),
          ],
        ),
      ),
    );
  }

  Widget _buildParticipantsList() {
    return StreamBuilder<List<CallParticipant>>(
      stream: _call.state.participants.asStream(),
      builder: (context, snapshot) {
        final participants = snapshot.data ?? [];
        return ListView.builder(
          itemCount: participants.length,
          itemBuilder: (context, index) {
            final participant = participants[index];
            return ParticipantTile(participant: participant);
          },
        );
      },
    );
  }
}
#+END_SRC

*** 4. Service Layer Integration

**** 4.1 Notification Service
#+BEGIN_SRC dart
// filepath: lib/services/notification_service.dart
class NotificationService {
  final StreamVideo _streamVideo;

  NotificationService(this._streamVideo) {
    _setupIncomingCallNotifications();
  }

  void _setupIncomingCallNotifications() {
    _streamVideo.state.incomingCall.listen((call) {
      if (call != null) {
        _showLocalNotification(call);
      }
    });
  }

  void _showLocalNotification(Call call) {
    final notification = LocalNotification(
      title: 'Incoming Call',
      body: 'Call from ${call.state.createdBy?.name ?? 'Unknown'}',
      payload: call.id,
    );

    NotificationManager.show(notification);
  }
}
#+END_SRC

**** 4.2 Analytics Service
#+BEGIN_SRC dart
// filepath: lib/services/analytics_service.dart
class AnalyticsService {
  final StreamVideo _streamVideo;

  AnalyticsService(this._streamVideo) {
    _trackIncomingCalls();
  }

  void _trackIncomingCalls() {
    _streamVideo.state.incomingCall.listen((call) {
      if (call != null) {
        _trackEvent('incoming_call_received', {
          'call_id': call.id,
          'caller_id': call.state.createdBy?.id,
          'timestamp': DateTime.now().toIso8601String(),
        });
      }
    });
  }

  void _trackEvent(String eventName, Map<String, dynamic> parameters) {
    // Send to analytics service
    FirebaseAnalytics.instance.logEvent(
      name: eventName,
      parameters: parameters,
    );
  }
}
#+END_SRC

*** 5. Dependency Injection Setup

**** 5.1 Service Registration
#+BEGIN_SRC dart
// filepath: lib/di/injector.dart
class AppInjector {
  static void init() {
    // Register StreamVideo
    GetIt.instance.registerSingleton<StreamVideo>(
      StreamVideo(/*...*/),
    );

    // Register BLoC
    GetIt.instance.registerFactory<CallStateBloc>(
      () => CallStateBloc(GetIt.instance<StreamVideo>()),
    );

    // Register Services
    GetIt.instance.registerSingleton<NotificationService>(
      NotificationService(GetIt.instance<StreamVideo>()),
    );

    GetIt.instance.registerSingleton<AnalyticsService>(
      AnalyticsService(GetIt.instance<StreamVideo>()),
    );
  }
}
#+END_SRC

*** 6. Complete Data Flow Architecture

**** 6.1 Data Flow Diagram
#+BEGIN_EXAMPLE
StreamVideo.state.incomingCall (Stream<Call?>)
            |
            ├── GoRouter Navigation
            |   └── CallRoute.build() → CallScreen
            |
            ├── BLoC State Management
            |   ├── CallStateBloc.listen()
            |   └── CallStateEvent → CallStateState
            |
            ├── UI Components
            |   ├── IncomingCallDialog
            |   ├── CallScreen
            |   └── ParticipantsList
            |
            └── Services
                ├── NotificationService
                └── AnalyticsService
#+END_EXAMPLE

**** 6.2 Event Sequence
#+BEGIN_EXAMPLE
1. Incoming Call Received
   ↓
2. streamVideo.state.incomingCall emits Call object
   ↓
3. Multiple Listeners React:
   ├── App-level listener → Show dialog
   ├── BLoC listener → Update state
   ├── Router listener → Navigate
   └── Service listeners → Notify/Track
   ↓
4. UI Components Update:
   ├── IncomingCallDialog renders
   ├── CallScreen prepares
   └── State-dependent widgets rebuild
   ↓
5. User Interaction:
   ├── Accept → Navigate to CallScreen
   └── Reject → Dismiss and cleanup
#+END_EXAMPLE

*** 7. Best Practices and Patterns

**** 7.1 Stream Subscription Management
#+BEGIN_SRC dart
class ComponentWithSubscription extends StatefulWidget {
  @override
  _ComponentState createState() => _ComponentState();
}

class _ComponentState extends State<ComponentWithSubscription> {
  StreamSubscription<Call?>? _subscription;

  @override
  void initState() {
    super.initState();
    _subscription = streamVideo.state.incomingCall.listen(_handleCall);
  }

  @override
  void dispose() {
    _subscription?.cancel(); // Prevent memory leaks
    super.dispose();
  }

  void _handleCall(Call? call) {
    if (mounted && call != null) {
      // Handle call safely
    }
  }
}
#+END_SRC

**** 7.2 Error Handling
#+BEGIN_SRC dart
_subscription = streamVideo.state.incomingCall.listen(
  (call) => _handleCall(call),
  onError: (error) {
    // Log error and show user-friendly message
    print('Incoming call error: $error');
    _showErrorDialog('Failed to receive incoming call');
  },
);
#+END_SRC

**** 7.3 Testing Considerations
#+BEGIN_SRC dart
// Mock for testing
class MockStreamVideo extends Mock implements StreamVideo {
  final StreamController<Call?> _incomingCallController =
      StreamController<Call?>.broadcast();

  @override
  Stream<Call?> get incomingCall => _incomingCallController.stream;

  void simulateIncomingCall(Call call) {
    _incomingCallController.add(call);
  }
}
#+END_SRC

** callconnectionOption

#+begin_src dart
void joinCallPressed() {
  var options = const CallConnectOptions();

  final cameraTrack = _cameraTrack;
  if (cameraTrack != null) {
    options = options.copyWith(
      camera: TrackOption.enabled(),
    );
  }

  final microphoneTrack = _microphoneTrack;
  if (microphoneTrack != null) {
    options = options.copyWith(
      microphone: TrackOption.enabled(),
    );
  }

  widget.onJoinCallPressed(options);
}
#+end_src

** participant view

#+begin_src dart
callParticipantsBuilder: (context, call, callState) {
  return StreamCallParticipants(
    call: call,
    participants: callState.callParticipants,
    layoutMode: _currentLayoutMode,
  );
},
#+end_src

** localParticipant and call state

#+begin_src dart
localParticipant.isAudioEnabled

localParticipant.isVideoEnabled

call.setMicrophoneEnabled(enabled: !localParticipant.isAudioEnabled)

callControlsBuilder: (
  BuildContext context,
  Call call,
  CallState callState,
) {
  final localParticipant = callState.localParticipant!;
  return Container(
    child: SafeArea(
      child: Row(children: [

        ToggleMicrophoneOption(
          call: call,
          localParticipant: localParticipant,
          disabledMicrophoneBackgroundColor: AppColorPalette.appRed,
        ),

        ToggleCameraOption(
          call: call,
          localParticipant: localParticipant,
          disabledCameraBackgroundColor: AppColorPalette.appRed,
        ),
        // ...
      ]),
    ),
  );
},

#+end_src

** _handleMobileAudioInterruptions function

#+begin_src dart
void _handleMobileAudioInterruptions() {
  if (!CurrentPlatform.isMobile) return;

  RtcMediaDeviceNotifier.instance.handleCallInterruptionCallbacks(
    onInterruptionStart: () {
      final call = StreamVideo.instance.activeCall;
      _microphoneEnabledBeforeInterruption =
      call?.state.value.localParticipant?.isAudioEnabled;

      call?.setMicrophoneEnabled(enabled: false);
    },
    onInterruptionEnd: () {
      if (_microphoneEnabledBeforeInterruption == true) {
        StreamVideo.instance.activeCall?.setMicrophoneEnabled(enabled: true);
      }
      _microphoneEnabledBeforeInterruption = null;
    },
  );
}

void _tryConsumingIncomingCallFromTerminatedState() {
  if (!CurrentPlatform.isAndroid) return;

  if (_router.routerDelegate.navigatorKey.currentContext == null) {
    // App is not running yet. Postpone consuming after app is in the foreground
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
        final streamVideo = locator.get<StreamVideo>();
        streamVideo.consumeAndAcceptActiveCall(
          onCallAccepted: (call) {
            final extra = (
              call: call,
              connectOptions: null,
            );

            _router.push(CallRoute($extra: extra).location, extra: extra);
          },
        );
    });
  } else {
    // no-op. If the app is already running we'll handle it via events
  }
}

#+end_src

*** Summary

The `streamVideo.state.incomingCall.listen()` stream serves as the central data source for incoming call handling, with multiple components consuming this data:

- *GoRouter*: Handles navigation to call screens
- *BLoC*: Manages application state and business logic
- *UI Components*: Render incoming call interfaces and update displays
- *Services*: Handle notifications, analytics, and other side effects

This architecture ensures a reactive, scalable approach to incoming call management while maintaining separation of concerns and testability.

** code architecture

#+begin_example
https://github.com/GetStream/stream-video-flutter/blob/main/dogfooding/lib/di/injector.dart add streamvideo as get_it;
https://github.com/GetStream/stream-video-flutter/blob/main/dogfooding/lib/app/app_content.dart get_it streamvideo _observeCallKitEvents, use called
https://github.com/GetStream/stream-video-flutter/blob/main/dogfooding/lib/router/routes.dart define routes;
https://github.com/GetStream/stream-video-flutter/blob/main/dogfooding/lib/screens/call_screen.dart use StreamCallContent to show ui;
https://github.com/GetStream/stream-video-flutter/blob/main/dogfooding/lib/router/routes.dart routes definition;
https://github.com/GetStream/stream-video-flutter/blob/main/dogfooding/lib/screens/call_participants_list.dart participants list screen;
https://github.com/GetStream/stream-video-flutter/blob/main/dogfooding/lib/screens/call_stats_screen.dart call stats screen;
https://github.com/GetStream/stream-video-flutter/blob/main/dogfooding/lib/screens/home_screen.dart generateAlphanumericString() generate callid, _getOrCreateCall() makecall

#+end_example


结合你提供的 app_content.dart 代码和全局上下文，针对 streamvideo invitation 消息的处理机制，逐条解答如下：

1. 如何处理 streamvideo invitation 消息
处理 invitation 消息的入口主要有两个：
FCM 消息监听：_observeFcmMessages() 方法中，FirebaseMessaging.onMessage.listen(_handleRemoteMessage)，而 _handleRemoteMessage 最终会调用 streamVideo.handleRingingFlowNotifications(message.data)，由 SDK 解析和处理 invitation。
CallKit 事件监听：_observeCallKitEvents() 方法中，streamVideo.observeCoreCallKitEvents(onCallAccepted: ...)，当有来电时会回调 onCallAccepted，并跳转到通话页面。
2. 如何已读该消息
invitation 消息的已读（消费）逻辑通常由 SDK 内部管理。对于 Android 终端，_tryConsumingIncomingCallFromTerminatedState() 里有 streamVideo.consumeAndAcceptActiveCall(...)，这会消费（已读）掉未处理的 invitation。
另外，streamVideo.handleRingingFlowNotifications 也会在处理后自动标记消息为已读，防止重复弹窗。
3. 如何不重复处理该消息
依赖 SDK 的“消费”机制：如 consumeAndAcceptActiveCall 只会消费一次未处理的 invitation，处理后即被标记，后续不会再触发。
FCM/CallKit 事件监听和处理后，SDK 内部会维护状态，防止同一 invitation 被多次处理。
代码层面没有手动去重逻辑，完全依赖 SDK 的幂等和状态管理。
4. 如何判断这个消息不是自己发出来的从而不弹出邀请
一般 invitation 消息体会包含发起者 userId 或 senderId。

你可以在 _handleRemoteMessage 或 onCallAccepted 回调中，判断 invitation 的发起者 id 是否等于当前用户 id，如果是自己发的，则直接 return，不弹窗。

伪代码示例（需结合实际 invitation 数据结构）：
void _handleInvitation(Map<String, dynamic> data) {
  final currentUserId = _userAuthController.currentUser?.id;
  final senderId = data['sender_id']; // 具体字段名需查实际消息体
  if (senderId == currentUserId) {
    // 是自己发的邀请，忽略
    return;
  }
  // 不是自己发的，弹出邀请
  // ...处理逻辑...
}
你可以在 _handleRemoteMessage 里加上类似判断，或者在 onCallAccepted 回调前做判断。

总结：

处理 invitation 依赖 FCM/CallKit 事件和 SDK 的 handle/consume 方法。
已读和去重由 SDK 内部机制保障。
判断是否自己发的 invitation 需在消息体中比对 senderId 和当前用户 id，手动过滤。
如需具体代码实现，可补充 invitation 消息体结构。

FCM消息是指 Firebase Cloud Messaging（Firebase 云消息推送）发送到客户端应用的消息。在你的代码中，FCM消息主要用于推送音视频通话相关的通知（如来电邀请、通话状态变更等）。

在本项目里，FirebaseMessaging.onMessage.listen(_handleRemoteMessage) 监听的就是 FCM 消息。收到消息后，_handleRemoteMessage 会把消息内容交给 streamVideo.handleRingingFlowNotifications(message.data) 处理，通常这些消息内容包括通话邀请、通话状态、通话ID、发起人ID等信息。

总结：
FCM消息就是服务端通过 Firebase 推送到你 app 的通知消息，内容一般为音视频通话的事件数据。
