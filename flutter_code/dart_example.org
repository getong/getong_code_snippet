* dart example

** basic data types:

#+begin_src
Number
String
Boolean
List
Set
Map
Rune
Symbol
#+end_src


** constructor function

#+begin_src
class ClassName {
    int a;
    int b;
    ClassName(this.a, this.b);
}
#+end_src


** fat arrow function

#+begin_src
int funcName() => 42;
#+end_src


** get and set function

#+begin_src
class myClass {
  String name;
  String get getName => name;
  set setName(String aValue) => name = aValue;
}

var myObject = myClass();
myObject.setName = "Sanjib";
print(myObject.getName);
#+end_src


** override
@override is not a must tag, with it can enhances the code reading.

#+begin_src
@override
void hello() {
    return "world";
}
#+end_src

** mixin

#+begin_src
class A extends B with C
// Use A class all methods and the methods that B class does not cover
class T = A with B;
#+end_src

A can inheritance B class and use C class functions.

** null check

#+begin_src
x ??= 3;
#+end_src


** Cascades

#+begin_src
"String".length.toString(); // 6
"String"..length.toString(); // "String"
#+end_src

** type

#+begin_src
var type_string = <String> ['a', 'b', 'c'];
print(type_string);
print("hello" + "world");
print("hello" * 2);
#+end_src


** Set, StringBuffer data type

#+begin_src
Set mySet = {1, 2, 3};
mySet.lookup(2);

StringBuffer stringBuffer = StringBuffer('test string');
stringBuffer.write(' append string');
#+end_src

** Future class

#+begin_src
import 'dart:async';

void main(){

  print("The main UI thread is starting on here.");
  Future<String> displayingNewsHeadlines = Future.delayed(Duration(seconds: 1), (){
      return "The latest headlines are displayed here after 1 second.";
  });

  displayingNewsHeadlines.then((displayString){
      print("Displaying news headlines here: $displayingNewsHeadlines, the displayString : $displayString");
  });
  print("The main UI thread ends.");

}
#+end_src

the output:

#+begin_src
The main UI thread is starting on here.
The main UI thread ends.
Displaying news headlines here: Instance of 'Future<String>', the displayString : The latest headlines are displayed here after 1 second.
#+end_src

It is noted that, the Future object still runs after the end of the main function.
Some methods:

#+begin_src
catchError(Function onError, {bool test(Object error)}) → Future<T>
then<R>(FutureOr<R> onValue(T value), {Function onError}) → Future<R>
timeout(Duration timeLimit, {FutureOr<T> onTimeout()}) → Future<T>
whenComplete(FutureOr action()) → Future<T>
#+end_src


** runZonedGuarded function

#+begin_src
// 这样就可以处理所有未处理的异常了。
void main() async {
  runZonedGuarded(() => runApp(const App()));
 }
#+end_src

copy from [[https://segmentfault.com/a/1190000022892971][Flutter runZonedGuarded捕捉不到未处理错误问题的原因]]

** Isolate

#+begin_src
Isolate.spawn<T>(void entryPoint(T message), T message, {bool paused: false, bool errorsAreFatal, SendPort onExit, SendPort onError, String debugName}) → Future<Isolate>
Isolate.kill({int priority: beforeNextEvent}) → void
#+end_src


** async, await

#+begin_src
main() {
    getData();
    print("continue...");
}

getData() async {
    var data = await "data string";
    print(data);
}
#+end_src

** ~/ operator

#+begin_src
5 ~/ 2 == 2;
7 ~/ 4 == 2;
#+end_src
