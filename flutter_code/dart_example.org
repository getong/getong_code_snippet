* dart example

** basic data types:

#+begin_src dartrt
Number(int double)
String
Boolean
List
Set
Map
Rune
Symbol
null
tuple
#+end_src


** constructor function

#+begin_src dart
class ClassName {
    int a;
    int b;
    ClassName(this.a, this.b);
}
#+end_src


** fat arrow function

#+begin_src dart :results output
int funcName() => 42;
#+end_src


** get and set function

#+begin_src dart :results output
class myClass {
  String name = '';
  String get getName => name;
  set setName(String aValue) => name = aValue;
}

void main() {
var myObject = myClass();
myObject.setName = "Sanjib";
print(myObject.getName);
}
#+end_src

#+RESULTS:
: Sanjib

** another get and set function

#+begin_src dart :results output
class Circle {
  double _radius = 0;

  Circle(double radius) {
    this.radius = radius;
  }

  set radius(double value) {
    if (value >= 0) {
      _radius = value;
    }
  }

  double get radius => _radius;

  get area => radius * radius * 3.14;
}


void main() {
  var circle = Circle(10);
  circle.radius = 100;
  print('The area is ${circle.area}');
}
#+end_src

#+RESULTS:
: The area is 31400.0


** override
@override is not a must tag, with it can enhances the code reading.

#+begin_src dart
@override
void hello() {
    return "world";
}
#+end_src

** mixin

#+begin_src dart
class A extends B with C
// Use A class all methods and the methods that B class does not cover
class T = A with B;
#+end_src

A can inheritance B class and use C class functions.

** null check

#+begin_src dart :results output
x ??= 3;
#+end_src


** Cascades

#+begin_src dart :results output
print("String".length.toString()); // 6
print("String"..length.toString()); // "String"
#+end_src

#+RESULTS:
: 6
: String

** type

#+begin_src dart :results output
var type_string = <String> ['a', 'b', 'c'];
print(type_string);
print("hello" + "world");
print("hello" * 2);
#+end_src

#+RESULTS:
: [a, b, c]
: helloworld
: hellohello


** Set, StringBuffer data type

#+begin_src dart :results output
Set mySet = {1, 2, 3};
print(mySet.lookup(2));

StringBuffer stringBuffer = StringBuffer('test string');
stringBuffer.write(' append string');
print(stringBuffer);
#+end_src

#+RESULTS:
: 2
: test string append string

** Future class

#+begin_src dart :results output
import 'dart:async';

void main(){

  print("The main UI thread is starting on here.");
  Future<String> displayingNewsHeadlines = Future.delayed(Duration(seconds: 1), (){
      return "The latest headlines are displayed here after 1 second.";
  });

  displayingNewsHeadlines.then((displayString){
      print("Displaying news headlines here: $displayingNewsHeadlines, the displayString : $displayString");
  });
  print("The main UI thread ends.");

}
#+end_src

the output:

#+RESULTS:
: The main UI thread is starting on here.
: The main UI thread ends.
: Displaying news headlines here: Instance of 'Future<String>', the displayString : The latest headlines are displayed here after 1 second.


It is noted that, the Future object still runs after the end of the main function.
Some methods:

#+begin_src dart :results output
catchError(Function onError, {bool test(Object error)}) → Future<T>
then<R>(FutureOr<R> onValue(T value), {Function onError}) → Future<R>
timeout(Duration timeLimit, {FutureOr<T> onTimeout()}) → Future<T>
whenComplete(FutureOr action()) → Future<T>
#+end_src


** runZonedGuarded function

#+begin_src dart :results output
// 这样就可以处理所有未处理的异常了。
void main() async {
  runZonedGuarded(() => runApp(const App()));
 }
#+end_src

copy from [[https://segmentfault.com/a/1190000022892971][Flutter runZonedGuarded捕捉不到未处理错误问题的原因]]

** Isolate

#+begin_src dart :results output
Isolate.spawn<T>(void entryPoint(T message), T message, {bool paused: false, bool errorsAreFatal, SendPort onExit, SendPort onError, String debugName}) → Future<Isolate>
Isolate.kill({int priority: beforeNextEvent}) → void
#+end_src


** async, await

#+begin_src dart :results output
main() {
    getData();
    print("continue...");
}

getData() async {
    var data = await "data string";
    print(data);
}
#+end_src

#+RESULTS:
: continue...
: data string



** ~/ operator

#+begin_src dart :results output
5 ~/ 2 == 2;
7 ~/ 4 == 2;
#+end_src

#+RESULTS:

** number example
#+begin_src dart :results output
void main() {
  var i = 2;
  print(i.runtimeType);
  String value1 = "123";
  int parseValue = int.parse(value1);
  print(parseValue);
  print(parseValue.runtimeType);

  String value2 = "2.2";
  print(value2.runtimeType);
  double parseValue2 = double.parse(value2);
  print(parseValue2.runtimeType);
  print(parseValue2);
}
#+end_src

#+RESULTS:
: int
: 123
: int
: String
: double
: 2.2
