* dart stream and timer

** StreamController example

#+begin_src dart :results output
import 'dart:async';

void main() async {
    final streamController = StreamController<DateTime>();
    Timer.periodic(Duration(seconds: 1), (timer) {
      streamController.add(DateTime.now());
    });

    streamController.stream.listen((event) {
      print(event);
    });
}
#+end_src

** Cleaning up the stream subscription

#+begin_src dart :results output
import 'dart:async';

void main() async {
   final streamController = StreamController<DateTime>();
    final unsubscribeAt = DateTime.now().add(Duration(seconds: 10));
    StreamSubscription<DateTime>? subscription;

    Timer.periodic(Duration(seconds: 2), (timer) {
      streamController.add(DateTime.now());
    });

    subscription = streamController.stream.listen((event) async {
      print(event);
      if (event.isAfter(unsubscribeAt)) {
        print("It's after ${unsubscribeAt}, cleaning up the stream");
        await subscription?.cancel();
      }
    });
}
#+end_src

** stream error

#+begin_src dart :results output
import 'dart:async';

void main() async {
   final streamController = StreamController<DateTime>();
    final unsubscribeAt = DateTime.now().add(Duration(seconds: 10));
    late StreamSubscription<DateTime> subscription;

    final timer = Timer.periodic(Duration(seconds: 2), (timer) {
      streamController.add(DateTime.now());
      if (DateTime.now().second % 3 == 0) {
        streamController.addError(() => Exception('Seconds are divisible by three.'));
      }
    });

    subscription = streamController.stream.listen((event) async {
      print(event);
      if (event.isAfter(unsubscribeAt)) {
        print("It's after ${unsubscribeAt}, cleaning up the stream");
        timer.cancel();
        await streamController.close();
        await subscription.cancel();
      }
    }, onError: (err, stack) {
      print('the stream had an error :(');
    }, onDone: () {
      print('the stream is done :)');
    });
}
#+end_src

#+RESULTS:
: 2023-04-16 01:37:23.097879
: 2023-04-16 01:37:25.095293
: 2023-04-16 01:37:27.094806
: the stream had an error :(
: 2023-04-16 01:37:29.095187
: 2023-04-16 01:37:31.095688
: It's after 2023-04-16 01:37:31.090588, cleaning up the stream
: the stream is done :)


copy from [[https://blog.logrocket.com/understanding-flutter-streams/][Understanding Flutter streams]]

** stream vs future

|       | Single value | Zero or more values |
|-------+--------------+---------------------|
| Sync  | int          | Iterator<int>       |
| Async | Future<int>  | Stream<int>         |


** four of those parameters of stream
With all four of those parameters combined — onError, onDone, cancelOnError, and the required parameter (onData) — you can be ready in advance for whatever happens.
#+begin_src dart
final subscription = myStream.listen(
  (data) {
    print('Data: $data');
  },
  onError: (err) {
    print('Error!');
  },
  cancelOnError: false,
  onDone: () {
    print('Done!');
  },
);
#+end_src

** StreamSubscription

The little subscription object that listen() returns has some useful methods of its own. It’s a StreamSubscription, and you can use it to pause, resume, and even cancel the flow of data.

#+begin_src dart
final subscription = myStream.listen(...);

subscription.pause();
subscription.resume();
subscription.cancel();
#+end_src

** Using and manipulating streams

#+begin_src dart
NumberCreator().stream
    .map((i) => 'String $i')
    .listen(print);
/*
OUTPUT:
String 1
String 2
String 3
String 4
,*/


NumberCreator().stream
    .where((i) => i % 2 == 0)
    .map((i) => 'String $i')
    .listen(print);
/*
OUTPUT:
String 2
String 4
String 6
String 8
,*/

myReduxStore.onChange
    .map((s) => MyViewModel(s))
    .distinct()
    .listen( /* update UI */ );
#+end_src

copy from [[https://medium.com/dartlang/dart-asynchronous-programming-streams-2569a993324d][Dart asynchronous programming: Streams]]


** Methods that modify a stream

#+begin_src dart
Stream<R> cast<R>();
Stream<S> expand<S>(Iterable<S> Function(T element) convert);
Stream<S> map<S>(S Function(T event) convert);
Stream<T> skip(int count);
Stream<T> skipWhile(bool Function(T element) test);
Stream<T> take(int count);
Stream<T> takeWhile(bool Function(T element) test);
Stream<T> where(bool Function(T event) test);

Stream<E> asyncExpand<E>(Stream<E>? Function(T event) convert);
Stream<E> asyncMap<E>(FutureOr<E> Function(T event) convert);
Stream<T> distinct([bool Function(T previous, T next)? equals]);

Stream<T> handleError(Function onError, {bool Function(dynamic error)? test});
Stream<T> timeout(Duration timeLimit,
    {void Function(EventSink<T> sink)? onTimeout});
Stream<S> transform<S>(StreamTransformer<T, S> streamTransformer);
#+end_src

copy from [[https://dart.dev/tutorials/language/streams][Asynchronous programming: Streams]]

** simple timer

#+begin_src dart :results output
import 'dart:async';

void main() {
  final stream = Stream.periodic(Duration(seconds: 2), (i) => i)
      .take(5); // create a stream that emits an integer every second, for 5 seconds

  final timeout = Duration(seconds: 1); // set a timeout of 3 seconds

  stream.timeout(timeout, onTimeout: (event) {
    print('Timeout occurred!');
    // return 0; // return a default value when a timeout occurs
  }).listen((event) {
    print('Received $event');
  });
}
#+end_src

#+RESULTS:
#+begin_example
Timeout occurred!
Received 0
Timeout occurred!
Received 1
Timeout occurred!
Received 2
Timeout occurred!
Received 3
Timeout occurred!
Received 4
#+end_example
