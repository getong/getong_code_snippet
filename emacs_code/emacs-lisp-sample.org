* emacs lisp sample

#+begin_src elisp
(+ 2 2)
'(this is an unquoted list)
(concat "abc" "def")
(substring "The quick brown fox jumped." 16 19)
(setq fill-column 72)
(concat "The " (number-to-string (+ 2 fill-column)) " red foxes.")
(* 3 4 5)
(+ 2 'hello)
(message "This message app")
(message "The name of this buffer is: %s." (buffer-name))

(set 'flowers '(rose vilet daisy buttercup))

(setq carnivores '(lion tiger leopard))

(setq trees '(pine fir oak maple)
      herbivores '(gazelle antelope zebra))

(setq counter 0)
(setq counter (+ counter 1))
(message counter)

(message "The name of this buffer is: %s." (buffer-file-name))

(current-buffer)
(switch-to-buffer (other-buffer))

(buffer-size)

(point)
(point-min)
(point-max)

(defun multiply-by-seven (number)
  "Multiply NUMBER by seven."
  (* 7 number))

(multiply-by-seven 7)

(defun multiply-by-seven-i (number) ; Interactive version.
  "Multiply NUMBER by seven."
  (interactive "p")
  (message "The result is %d" (* 7 number)))

;; c-u 3 M-x multiply-by-seven-i

(let ((zebra 'stripes)
      (tiger 'fierce))
  (message "One kind of animal has %s and another is %s."
           zebra tiger))

(let ((birch 3)
      pine
      fir
      (oak 'some))
  (message
   "Here are %d variables with %s, %s, and %s value."
   birch pine fir oak))

(if (> 5 4) ; if-part
    (message "5 is greater than 4!"))

(defun type-of-animal (characteristic)
  "Print message in echo area depending on CHARACTERISTIC.
If the CHARACTERISTIC is the symbol ‘fierce’,
then warn of a tiger."
  (if (equal characteristic 'fierce)
      (message "It’s a tiger!")))

(type-of-animal 'fierce)

(type-of-animal 'zebra)

(if (> 4 5) ; if-part
    (message "5 is greater than 4!") ; then-part
  (message "4 is not greater than 5!")) ; else-part

(defun type-of-animal (characteristic) ; Second version.
  "Print message in echo area depending on CHARACTERISTIC.
If the CHARACTERISTIC is the symbol ‘fierce’,
then warn of a tiger;
else say it’s not fierce."
  (if (equal characteristic 'fierce)
      (message "It’s a tiger!")
    (message "It’s not fierce!")))

(type-of-animal 'fierce)
(type-of-animal 'zebra)

(if 4
    'true
  'false)
(if nil
    'true
  'false)

(> 5 4)

(let ((foo (buffer-name))
      (bar (buffer-size)))
  (message
   "This buffer is %s and has %d characters."
   foo bar))

(message "We are %d characters into this buffer."
         (- (point)
            (save-excursion
              (goto-char (point-min)) (point))))

(defun simplified-beginning-of-buffer ()
  "Move point to the beginning of the buffer;
leave mark at previous position."
  (interactive)
  (push-mark)
  (goto-char (point-min)))


#+end_src