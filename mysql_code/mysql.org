* mysql
:PROPERTIES:
:CUSTOM_ID: mysql
:END:
** dump table struct
:PROPERTIES:
:CUSTOM_ID: dump-table-struct
:END:
#+begin_example
mysqldump --comments -uuser -ppassword -h host_ip --opt database -d -B --single-transaction | sed 's/ AUTO_INCREMENT=[0-9]*\b//' | sed 's/CREATE TABLE/CREATE TABLE IF NOT EXISTS/g' | sed '/DROP/d' > database_struct.sql
#+end_example

** mysql查询结果输出到文件
:PROPERTIES:
:CUSTOM_ID: mysql查询结果输出到文件
:END:
#+begin_example
mysql -h host_ip -u user -p database -P 3306 -e "select * from table"  > filename
#+end_example

** 查看表的索引
:PROPERTIES:
:CUSTOM_ID: 查看表的索引
:END:
#+begin_example
mysql> show keys from table_name;

mysql> show index from table_name;
#+end_example

** 查看表结构
:PROPERTIES:
:CUSTOM_ID: 查看表结构
:END:
#+begin_example
mysql> desc table_name;
#+end_example

** 允许user用户远程登陆
:PROPERTIES:
:CUSTOM_ID: 允许user用户远程登陆
:END:
用root用户登陆mysql， 在mysql 的shell里面运行下面命令：

#+begin_example
mysql>grant all on *.* to user@'%' identified by 'password';
#+end_example

解析

#+begin_example
"*.*"：第一个*代表数据库名；第二个*代表表名。这里的意思是所有数据库里的所有表都授权给用户。
user：授予user账号。
"%"：表示授权的用户IP可以指定，这里代表任意的IP地址都能访问MySQL数据库。
"password"：分配账号对应的密码，这里密码替换成user帐号对应的mysql密码。
#+end_example

最后，运行下面命令：

#+begin_example
mysql> flush privileges;
#/etc/init.d/mysqld restart
#+end_example

要注意my.cnf里面要配置正确：

#+begin_example
Just comment out bind-address= altogether. When you do that, it will bind to all addresses.
Also make sure that you don't have skip-networking enabled in your my.cnf.
#+end_example

** InnoDB: mmap(137363456 bytes) failed; errno 12
:PROPERTIES:
:CUSTOM_ID: innodb-mmap137363456-bytes-failed-errno-12
:END:
MySQL 5.6 或者 MariaDB
10会占用很多内存。这个错误是因为启动的时候申请大块内存失败导致的。
在my.cnf设置 innodb_buffer_pool_size=8M

** rand()
:PROPERTIES:
:CUSTOM_ID: rand
:END:
#+begin_src sql
select ceiling(rand() * 1000);
select floor(rand() * 1000);
update table set column = ceiling(rand() * 1000) where id = 9;
#+end_src

** mysql delete user and add user again fail in 5.6
:PROPERTIES:
:CUSTOM_ID: mysql-delete-user-and-add-user-again-fail-in-5.6
:END:
see
[[https://stackoverflow.com/questions/17008610/error-1396-hy000-operation-create-user-failed-for-usernamelocalhost-iden][ERROR
1396 (HY000): Operation CREATE USER failed for 'username'@'localhost'
IDENTIFIED BY 'mypassword';]]

#+begin_src sql
delete from mysql.user where user='username';
DROP USER 'username'@'%';
delete from mysql.db where user='username';
flush privileges;
CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';
#+end_src

** allow user only login from 10.x.x.x subnetwork
:PROPERTIES:
:CUSTOM_ID: allow-user-only-login-from-10.x.x.x-subnetwork
:END:
#+begin_src sql
CREATE USER 'username'@'10.%' IDENTIFIED BY 'password';
create database test_subnetwork;
GRANT ALL PRIVILEGES ON test_subnetwork.* TO 'username'@'10.%' IDENTIFIED BY 'password' WITH GRANT OPTION;
#+end_src

** mariadb set root password
:PROPERTIES:
:CUSTOM_ID: mariadb-set-root-password
:END:
#+begin_src shell
$ sudo mysql -u root
MariaDB [mysql]> drop user 'root'@'localhost';
MariaDB [mysql]> create user 'root'@'%' identified by 'password';
MariaDB [mysql]> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%';
MariaDB [mysql]> FLUSH PRIVILEGES;
#+end_src

** is NULL
:PROPERTIES:
:CUSTOM_ID: is-null
:END:
select NULL property

#+begin_src sql
select * from table where column_name is NULL;
#+end_src

*select * from table where column_name = NULL* not works.

** order by multi column
:PROPERTIES:
:CUSTOM_ID: order-by-multi-column
:END:
#+begin_src 1c-enterprise
select * from table_name order by id;
select * from table_name order by id, other_column;
select * from table_name order by id desc, other_column;
select * from table_name order by id, other_column desc;
#+end_src

** change the password
:PROPERTIES:
:CUSTOM_ID: change-the-password
:END:
#+begin_src shell
# change /etc/mysql/my.cnf
[mysqld]
skip-grant-tables
#+end_src

Then restart mariadb service

#+begin_src shell
sudo systemctl restart mariadb.service
# change password in the mysql shell
mysql -u root -p
#+end_src

copy from
[[https://blog.csdn.net/wen_dy/article/details/51829296][mariadb或mysql下忘记密码找回]]

** stop mariadb performance schema
:PROPERTIES:
:CUSTOM_ID: stop-mariadb-performance-schema
:END:
mariadb will use 400MB RAM in the performace mode by defult, and with
other memory in case of database. Disable it by adding this unde mysqld

#+begin_example
performance_schema = off
#+end_example

In the production environment, use it by recommend. But if it is used
under test mode, disable it.

** replace into
:PROPERTIES:
:CUSTOM_ID: replace-into
:END:
#+begin_src sql

1. replace into tbl_name(col_name, ...) values(...)
2. replace into tbl_name(col_name, ...) select ...
3. replace into tbl_name set col_name=value, ...
#+end_src

use it carefully. copy from
[[https://blog.csdn.net/risingsun001/article/details/38977797][MySQL
replace into 用法（insert into 的增强版）]]

** mysql触发器报错 1422 Explicit or implicit commit is not allowed in stored function or trigger.
:PROPERTIES:
:CUSTOM_ID: mysql触发器报错-1422-explicit-or-implicit-commit-is-not-allowed-in-stored-function-or-trigger.
:END:
在mysql的事务中执行select中遇到这个错误，搜索发现如下：

#+begin_example
这个错误的中文翻译是“在存储函数或触发器中不允许显式或隐式提交”。
#+end_example

copy from
[[https://www.cnblogs.com/marx-luo/p/6713086.html][mysql触发器报错
1422]]

#+begin_example
默认情况下, MySQL启用自动提交模式（变量autocommit为ON）。这意味着, 只要你执行DML操作的语句,MySQL会立即隐式提交事务（Implicit Commit）。
#+end_example

copy from
[[https://www.cnblogs.com/kerrycode/p/8649101.html][MySQL的自动提交模式]]

#+begin_example
DML（data manipulation language）：
       它们是SELECT、UPDATE、INSERT、DELETE，就象它的名字一样，这4条命令是用来对数据库里的数据进行操作的语言
DDL（data definition language）：
       DDL比DML要多，主要的命令有CREATE、ALTER、DROP等，DDL主要是用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上，他们大多在建立表时使用
DCL（Data Control Language）：
       是数据库控制功能。是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke等）语句。在默认状态下，只有sysadmin,dbcreator,db_owner或db_securityadmin等人员才有权力执行DCL
#+end_example

copy from
[[https://blog.csdn.net/level_level/article/details/4248685][DML、DDL、DCL区别]]

结论就是由于自动提交模式下，开启了事务操作，然后在事务操作里面包括了DML的操作，导致了这个错误。要么不用事务，要么在事务里面不使用DML。

** copy table data
:PROPERTIES:
:CUSTOM_ID: copy-table-data
:END:
#+begin_src sql
CREATE TABLE new_table LIKE old_table;
INSERT new_table SELECT * FROM old_table;

## or
CREATE TABLE destination_db.new_table LIKE source_db.old_table;
INSERT destination_db.new_table SELECT * FROM source_db.old_table;
#+end_src

copy from
[[https://tableplus.com/blog/2018/11/how-to-duplicate-a-table-in-mysql.html][How
to duplicate a MySQL table, including indexes and data?]]

** add default valut to BLOB, GEOMETRY, JSON type data
:PROPERTIES:
:CUSTOM_ID: add-default-valut-to-blob-geometry-json-type-data
:END:
add this to my.cnf

#+begin_src sql
set sql_mode="NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION";
#+end_src

copy from
[[https://juejin.im/post/5d64c3615188256bf6119a86][mysql给text设置一个默认值(干货)]]

** bigint can only be 64 bit number
:PROPERTIES:
:CUSTOM_ID: bigint-can-only-be-64-bit-number
:END:
#+begin_example
The range for the signed MySQL BIGINT type is between -9223372036854775808 and 9223372036854775807

For unsigned BIGINT type, the value ranges from 0 to 18446744073709551615.
#+end_example

copy from [[https://linuxhint.com/mysql-bigint-number-ranges/][MySQL
BIGINT Number Ranges]]

The higher value can use varchar:

#+begin_example
If for some reason you believe you'd need a value greater than this, store it in a VARCHAR as a combination of digits and characters instead... e.g. 00-09, then 0a-0Z (really crude and won't actually be a good idea in this exact form but you get the point) etc going up systematically like that for as long as you like, that way if you need more space you can just increase the size of the field
#+end_example

copy from
[[https://stackoverflow.com/questions/52830878/does-a-64-bit-integer-practically-have-a-limit][Does
a 64-bit Integer PRACTICALLY have a limit?]]

** copy table definition
:PROPERTIES:
:CUSTOM_ID: copy-table-definition
:END:
#+begin_src sql
CREATE TABLE new_table LIKE old_table;

CREATE TABLE bigger_orders (
  another_orderkey bigint,
  LIKE orders,
  another_orderdate date
) COMMENT 'A table to keep track of orders.';
#+end_src

copy from
[[https://prestodb.io/docs/current/sql/create-table.html][CREATE
TABLE#]]

** AUTO_INCREMENT values
:PROPERTIES:
:CUSTOM_ID: auto_increment-values
:END:
#+begin_src sql
mysql> create table new_table like old_table;

mysql> select @my_auto_increment:=auto_increment from information_schema.tables where table_name='old_table';

mysql> set @query = CONCAT("alter table new_table auto_increment = ", @my_auto_increment);

mysql> prepare stmt from @query;

mysql> execute stmt;

mysql> deallocate prepare stmt;
#+end_src

copy from
[[https://stackoverflow.com/questions/2361982/create-table-new-table-name-like-old-table-name-with-old-table-names-auto-incre][CREATE
TABLE new_table_name LIKE old_table_name with old_table_name's
AUTO_INCREMENT values]]
