* unreal engine class

** class inheritance

#+BEGIN_SRC plantuml :file ./unreal_class.png :width 800 :exports results
@startuml
!theme materia
scale 0.8
skinparam componentStyle rectangle
class UObject
class UActorComponent
class AActor
class UGameInstance
class USceneComponent
class AInfo
class APawn
class AController
class AGameModeBase
class AGameStateBase
class ACharacter
class APlayerController
class AAiController

UActorComponent -up-|> UObject
AActor -up-|> UObject
UGameInstance -up-|> UObject

AInfo -up-|> AActor
APawn -up-|> AActor
AController -up-|> AActor

USceneComponent -up-|> UActorComponent

APlayerController -up-|> AController
AAiController -up-|> AController

ACharacter -up-|> APawn

AGameModeBase -up-|> AInfo
AGameStateBase -up-|> AInfo
@enduml
#+END_SRC

#+RESULTS:
[[file:./resource/unreal_class.png]]


** Actor, Pawn, Character difference

- AActor

  #+begin_quote
AActor is the base class for creating a wide range of objects, such as buildings, spawn points,
portals, vehicles, characters, and so on. We will extend this class to create ADefenseTower,
AWeapon, and AProjectile classes.
  #+end_quote

- APawn

  #+begin_quote
APawn is a subclass of AActor that is used to create non-character, player-controllable actors
(not characters) that accept and react to player inputs—racing cars, for example.
  #+end_quote


- ACharacter

  #+begin_quote
ACharacter extends the APawn class for creating characters. A character can not only
accept user inputs and moves but also has at least one skeletal mesh and the character state
animations, such as idle, walk, run, attack, die, and so on. We will extend this class to create a
new APlayerAvatar class.
  #+end_quote

- pawn and character difference

  #+begin_quote
The main difference between ACharacter and AActor and APawn is that ACharacter
contains the SkeletalMesh, Movement, and Capsule collider components by default,
as well as the animation supports.
  #+end_quote


** unreal engine class instances
#+begin_quote
UEngine：它是引擎类，在All classes页面搜索这个类，可以找到它的文档页面链接（每个类都可以在这个页面搜索到它的API文档）。如其名，它完成引擎方面的工作。在本示例中，用该类的全局变量GEngine来获取其下管理的所有UWorld对象。

UWorld：它是描述游戏世界的类。每个UWorld对象都有一个类型成员，通过该成员区别这个world是编辑器中正在处于编辑状态的世界（Editor类型），还是编辑器中模拟运行的游戏世界（Game类型），或者独立EXE运行的游戏世界。

ULevel：它是关卡对象。每个UWorld都管理着一个或者多个ULevel对象。

AActor：所有可以放置在viewport中的对象都是AActor实例。比如说玩家对象，花草树木，高山大海……等等。

UActorComponent：这个类用于对actor进行各种属性拓展，使之可以表达世间万物。举例来说，如果给一个球体添加一个光源组件（light component），便可以令其发光，使其表现得像一个灯泡或者太阳。

以上这些就是UE非常基础且核心的几个类，它们的关系是：UEngine下管理着若干个UWorld，UWorld下若干个ULevel，ULevel下若干个AActor，AActor下若干个UActorComponent。
#+end_quote

copy from [[https://zhuanlan.zhihu.com/p/643791806][Unreal engine C++开发从路人到入门（一）hello world]]

#+BEGIN_SRC plantuml :file ./unreal_class_instance.png :width 800 :exports results
@startuml
!theme materia
scale 0.8
skinparam componentStyle rectangle

node "UEngine" {
  [UWorld Class]
}

node "UWorld" {
  [ULevel Class]
}

node "ULevel" {
  [AActor Class]
}

node "AActor" {
    [UActorComponent Class]
}


[UWorld Class] --> [ULevel Class]
[ULevel Class] --> [AActor Class]
[AActor Class] --> [UActorComponent Class]
@enduml
#+end_src

#+RESULTS:
[[file:./resource/unreal_class_instance.png]]



** Unreal gameplay framework classes

#+begin_quote
The Unreal gameplay framework includes four classes, PlayerController, GameModeBase,
GameState, and GameInstance, playing vital roles in managing various aspects of gameplay
and overall game functionality.
#+end_quote

*** The GameMode class

#+begin_quote
The GameMode object is needed for all UE projects. It stores important game information and settings,
such as the starting level, the default player pawn, the player controller, and so on. By extending the
GameModeBase class, you can add more gameplay information and rules to the child class. It could
include the following:
• Flags that allow pausing the game, playing cinematics, enabling tutorials, and so on
• Level-transition conditions and processes
• Spawn locations
• For multiplayer games, the minimum number of players to start the game
• The conditions to end a game—the maximum game time, for example
For online games, the GameMode object only exists on the server side.
#+end_quote

*** The GameState class

#+begin_quote
The GameState object is usually used to store dynamic gameplay information. By extending the
GameStateBase class, you can store important gameplay information in the child class. It could
include the following:
• The time elapsed since the start of the game
• Total scores
• Waves of enemies
• Enemy positions for the minimap
• A countdown timer
For online games, the GameState object exists on both the server and client sides. The GameState
object’s information can be synced from the server to the clients.
#+end_quote

*** The GameInstance class

#+begin_quote
The GameInstance object is a high-level manager representing the instance of a running game.
By extending the UGameInstance class, you can put important local gameplay variables into the
child class. In the context of online games, it’s important to note that the GameInstance object
exclusively exists on the client side.

Unreal games are internally built up on the multiplayer game framework, even if they may be single-player
games. Therefore, during game development, you should always assume that the game was an online
game and determine whether those global variables are necessary on the server. If a variable doesn’t
need to exist on the server, it can be considered a local gameplay variable and appropriately assigned
as an attribute of the GameInstance class.
Obviously, the gameplay framework class instances encompass global variables that we may need to
access from any part of our code. Thus, our next objective is to learn how to retrieve the instances to
gain access to them.
#+end_quote

*** the PlayerController class

#+begin_quote
PlayerController is the engine’s base C++ class, which can be extended for specific gameplay
controls.
It is not mandatory but recommended to consider using PlayerController in your game.
PlayerController can be considered an invisible pawn that bridges the player and the controlled
pawn or character. PlayerController decouples the player pawn’s logic and view and makes it
easier to let the player possess different pawns or characters.
When using PlayerController, you should consider letting it take care of the following responsibilities:
• Receiving and handling player inputs
• Moving and rotating the controlled pawn or character
• Changing the state of the controlled pawn or character
• Manipulating the camera views
#+end_quote

** get world code example

#+begin_src cpp
TObjectPtr<UWorld> World = GetWorld();
TObjectPtr<APlayerController> PlayerController = World-> GetFirstPlayerController();
TObjectPtr<AGameModeBase> GameMode = World->GetAuthGameMode();
TObjectPtr<AGameStateBase> GameState = World->GetGameState();
TObjectPtr<UGameInstance> GameInstance = World->GetGameInstance();
#+end_src

** cast code example

#+begin_src cpp
TObjectPtr<APangaeaPlayerController> pangaeaPlayerController = Cast<APangaeaPlayerController>(playerController);
TObjectPtr<APangaeaGameMode> pangaeaGameMode = Cast<APangaeaGameMode*> gameMode;
TObjectPtr<APangaeaGameStateBase> pangaeaGameState = Cast<APangaeaGameStateBase*>(gameState);
TObjectPtr<UPangaeaGameInstance> panGaeaGameInstance = Cast<UPangaeaGameInstance>(gameInstance);
#+end_src


** spawn actor

#+begin_src cpp
GetWorld()->GetTimerManager().SetTimer(TimerHandle, [&]()
{
const auto Character = Cast<AUS_Character>(GetOwner());
const auto ProjectileSpawnLocation = GetComponentLocation();
const auto ProjectileSpawnRotation = GetComponentRotation();
auto ProjectileSpawnParams = FActorSpawnParameters();
ProjectileSpawnParams.Owner = GetOwner();
ProjectileSpawnParams.Instigator = Character;
GetWorld()->SpawnActor<AUS_BaseWeaponProjectile>(ProjectileClass,
ProjectileSpawnLocation, ProjectileSpawnRotation,
ProjectileSpawnParams);
}, .4f, false);
}
#+end_src
