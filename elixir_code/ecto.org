* ecto
:PROPERTIES:
:CUSTOM_ID: ecto
:END:
** ecto works as a database middleware
:PROPERTIES:
:CUSTOM_ID: ecto-works-as-a-database-middleware
:END:
The [[https://hexdocs.pm/ecto/getting-started.html][getting started
guide]] is a must read.

** limit sql example
:PROPERTIES:
:CUSTOM_ID: limit-sql-example
:END:
#+begin_example
import Ecto.Query

def list_messages(room_id, limit \\ 15) do
  Repo.all(
    from msg in Message,
    left_join: user in assoc(msg, :user),
    where: msg.room_id == ^room_id,
    order_by: [desc: msg.inserted_at],
    limit: ^limit,
    select: %{content: msg.content, user: %{username: user.username}}
  )
end
#+end_example

copy from
[[http://whatdidilearn.info/2018/03/18/more-about-ecto-and-ecto-queries.html][More
about Ecto and Ecto queries]]

** multi primary keys
:PROPERTIES:
:CUSTOM_ID: multi-primary-keys
:END:
#+begin_src elixir
    alter table(:rooms_units) do
      modify(:room_id, :integer, primary_key: true)
      modify(:unit_id, :integer, primary_key: true)
      modify(:date_from, :utc_datetime, primary_key: true)
      modify(:date_to, :utc_datetime, primary_key: true)
    end
#+end_src

copy from [[https://xbuba.com/questions/55038829][ecto中的复合主键]]
elixir schema definition

#+begin_src elixir
  @primary_key false
  schema "players" do
    field :name, :string, primary_key: true
    field :position, :string, primary_key: true
    field :number, :integer

    timestamps
  end
#+end_src

copy from [[https://github.com/elixir-ecto/ecto/pull/1210][Support for
composite primary keys in schema]]

** rename postgres table
:PROPERTIES:
:CUSTOM_ID: rename-postgres-table
:END:
#+begin_src elixir
qry = "ALTER TABLE abc RENAME to abc_20190516;"
Ecto.Adapters.SQL.query(Repo, qry, [])
#+end_src

copy from
[[https://stackoverflow.com/questions/27751216/how-to-use-raw-sql-with-ecto-repo][How
to use raw sql with ecto Repo]]

** Elixir Ecto: 多对多关系
:PROPERTIES:
:CUSTOM_ID: elixir-ecto-多对多关系
:END:
read the doc [[https://segmentfault.com/a/1190000005036198][Elixir Ecto:
多对多关系]]

** Ecto query pipeline
:PROPERTIES:
:CUSTOM_ID: ecto-query-pipeline
:END:
#+begin_src elixir
def getProductByNameAndBrand(name, brand) do
    Api.Product |> Ecto.Query.where(name: ^name) |> Ecto.Query.where(brand: ^brand) |> all
  end
#+end_src

copy from
[[https://stackoverflow.com/questions/44211863/ecto-where-and-where-clause][Ecto
'where and where' clause]]

#+begin_src elixir
"users"
|> where([u], u.age > 18)
|> select([u], u.name)
#+end_src

copy from [[https://hexdocs.pm/ecto/Ecto.Query.html][Ecto.Query]]

** join
:PROPERTIES:
:CUSTOM_ID: join
:END:
#+begin_example
Receives a source that is to be joined to the query and a condition for the join. The join condition can be any expression that evaluates to a boolean value. The join is by default an inner join, the qualifier can be changed by giving the atoms: :inner, :left, :right, :cross, :full, :inner_lateral or :left_lateral. For a keyword query the :join keyword can be changed to: :inner_join, :left_join, :right_join, :cross_join, :full_join, :inner_lateral_join or :left_lateral_join.
#+end_example

The use the :left_join is very common. see
[[https://mazhuang.org/2017/09/11/joins-in-sql/][图解 SQL 里的各种
JOIN]]
[[https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins][Visual
Representation of SQL Joins]]

** transaction
:PROPERTIES:
:CUSTOM_ID: transaction
:END:
The first way to run Repo.transaction is by passing in a function
containing the operations you'd like to run within transaction.

#+begin_src elixir
Repo.transaction(fn ->
    Repo.insert(variable)
end)
#+end_src

rollback

#+begin_src elixir
Repo.transaction(fn ->
    case Repo.insert(variable) do
      {:ok, _variable} ->
          :ok
      {:error, _error_reason} ->
         Repo.rollback("insert failed")
    end
end)
#+end_src

The second way is to use Multi module.

#+begin_src elixir
multi =
    Multi.new()
    |> Multi.insert(:a, a)
    |> Multi.update(:b, b)
    |> Multi.run(:c, M, :function, args)

Repo.transaction(multi)
#+end_src

explain multi

#+begin_src elixir
Multi.to_list(multi)
#+end_src

** convert the ecto statement to sql
:PROPERTIES:
:CUSTOM_ID: convert-the-ecto-statement-to-sql
:END:
#+begin_src elixir
query = from Table, select: [:id]
Ecto.Adapters.SQL.to_sql(:all, Repo, query)

Repo.to_sql(:all, query)

IO.puts(elem(Imcircle.Repo.to_sql(:all, query), 0))
#+end_src

** Upserts
:PROPERTIES:
:CUSTOM_ID: upserts
:END:
#+begin_src elixir
{:ok, ignored} = MyRepo.insert(%Post{title: "this is unique"}, on_conflict: :nothing)
on_conflict = [set: [body: "updated"]]
{:ok, updated} = MyRepo.insert(%Post{title: "this is unique"},
                               on_conflict: on_conflict, conflict_target: :title)
#+end_src

or use the query paramter:

#+begin_src elixir
query =
      Query.from(post in Post,
        where: post.number == 1,
        update: [set: [number: post.number + 1]]
      )
Repo.insert(%Post{number: 1},
      on_conflict: query,
      conflict_target: :number
    )
#+end_src

** bigint type
:PROPERTIES:
:CUSTOM_ID: bigint-type
:END:
#+begin_src shell
mix phx.gen.context Context Schema table_name type:integer
#+end_src

then in the migration file, change the =integer= to =bigint= befor:

#+begin_src elixir
add :type, :integer
#+end_src

after:

#+begin_src elixir
add :type, :bigint
#+end_src

and change the schema file:

#+begin_src elixir
field :type, :id
#+end_src

then run the migrate command:

#+begin_src shell
mix ecto.migrate
#+end_src

the default =id= type in the ecto is :bigint see
[[https://github.com/elixir-ecto/postgrex/issues/316][:bigint field
type]]

** post schema
:PROPERTIES:
:CUSTOM_ID: post-schema
:END:
Writing a Custom Migration Task with Ecto Migrator

#+begin_src shell
defmodule MyApp.ReleaseTasks do
  def migrate do
   {:ok, _} = Application.ensure_all_started(:my_app)
    path = Application.app_dir(:my_app, "priv/repo/migrations")
    Ecto.Migrator.run(MyApp.Repo, path, :up, all: true)
  end
end
#+end_src

copy from
[[https://medium.com/flatiron-labs/run-ecto-migrations-in-production-with-distillery-boot-hooks-7f576d2b93ed][Run
Ecto Migrations in Production with Distillery Boot Hooks]] user =prefix=
option to indicate the postgresql schema.

create a new schema:

#+begin_src elixir
Ecto.Adapters.SQL.query(MyApp.Repo, "create schema schema_name")
#+end_src

** use variable in ecto query prefix
:PROPERTIES:
:CUSTOM_ID: use-variable-in-ecto-query-prefix
:END:
#+begin_src elixir
query =
        from u in User,
          order_by: [asc: u.full_name, asc: u.id],
          select: struct(u, [:id, :first_name, :last_name, :full_name])
query = Map.put(query, :prefix, params["prefix"])
Repo.all(query)
#+end_src

copy from
[[https://elixirforum.com/t/using-variable-in-ecto-query-prefix/21178/4][Using
variable in ecto query prefix]]

** Multi work with pipeline
:PROPERTIES:
:CUSTOM_ID: multi-work-with-pipeline
:END:
work with the previous operation result

#+begin_src elixir
Ecto.Multi.new()
|> Ecto.Multi.insert(:team, team_changeset)
|> Ecto.Multi.run(:user, fn repo, %{team: team} ->
  # Use the inserted team.
  repo.update(user_changeset)
end)

Ecto.Multi.new()
|> Ecto.Multi.insert_all(:users, MyApp.User, users)
|> Ecto.Multi.run(:pro_users, fn _repo, %{users: users} ->
  result = Enum.filter(users, &(&1.role == "pro"))
  {:ok, result}
end)
#+end_src

work with multiple Multis and dynanic data:

#+begin_src elixir
posts_multi =
  posts
  |> Stream.filter(fn post ->
    # Filter old posts...
  end)
  |> Stream.map(fn post ->
    # Create changesets.
    Ecto.Changeset.change(post, %{category: "new"})
  end)
  |> Stream.map(fn post_cs ->
    # Create a Multi with a single update
    # operation, generating a unique key for the op.
    key = String.to_atom("post_#{post_cs.data.id})
    Ecto.Multi.update(Ecto.Multi.new(), key, post_cs)
  end)
  |> Enum.reduce(Multi.new(), &Multi.append/2)
#+end_src

copy from
[[https://medium.com/heresy-dev/a-brief-guide-to-ecto-multi-9c8ea0c729f0][A
brief guide to Ecto.Multi]]

** insert_all act like upsert_all
:PROPERTIES:
:CUSTOM_ID: insert_all-act-like-upsert_all
:END:
#+begin_src elixir
list_list =
a_very_long_list
|> Stream.map(fn _id ->
## here might be a map, not the schema struct
%{a: "a",
b: "b",
c: "c"
} end)
|> Stream.chunk_every(5000)
|> Enum.to_list()

Enum.each(list_list, fn list ->
      Repo.insert_all(SchemaTable, list)
    end)
#+end_src

The SchemaTable property list must all be set in the map list without
the id property.

** insert act like upsert
:PROPERTIES:
:CUSTOM_ID: insert-act-like-upsert
:END:
#+begin_src elixir
data = %Data{}
Repo.insert(data, conflict_target: unchange_list, on_conflict: {:replace, change_list})
#+end_src

** dynamic table name
:PROPERTIES:
:CUSTOM_ID: dynamic-table-name
:END:
copy from
[[https://stackoverflow.com/questions/40687186/how-can-you-dynamically-set-a-schema-table-name-for-a-ecto-model][How
can you dynamically set a schema table name for a ecto model]]

#+begin_src elixir
## query
from p in {"posts2", Post}, where p.id == 1

## insert or update
Ecto.put_meta(struct, source: "source")
#+end_src

** Date/time intevals
:PROPERTIES:
:CUSTOM_ID: datetime-intevals
:END:
Date/time intervals: datetime_add/3, date_add/3, from_now/2, ago/2 copy
from [[https://hexdocs.pm/ecto/Ecto.Query.API.html][Ecto.Query.API]]

#+begin_src elixir
# Get all items published since the last month
## The following intervals are supported: year, month, week, day, hour, minute, second, millisecond and microsecond.
from p in Post, where: p.published_at >
                       datetime_add(^NaiveDateTime.utc_now, -1, "month")
# Get all items published since the last month
The following intervals are supported: year, month, week, day, hour, minute, second, millisecond and microsecond.
from p in Post, where: p.published_at >
                       datetime_add(^NaiveDateTime.utc_now, -1, "month")
from a in Account, where: a.expires_at < from_now(3, "month")
from p in Post, where: p.published_at > ago(3, "month")
#+end_src

** implement the Access behaviour for the Ecto.Schema file
:PROPERTIES:
:CUSTOM_ID: implement-the-access-behaviour-for-the-ecto.schema-file
:END:
put the below code into the schema file

#+begin_src elixir
@behaviour Access

defdelegate fetch(map, key), to: Map

defdelegate get_and_update(map, key, fun), to: Map

defdelegate pop(map, key), to: Map
#+end_src

As we all know, the schema is a map in elixir, and the Access behaviour
needs to implement three callbacks:

#+begin_src elixir
fetch(term, key)
get_and_update(data, key, function)
pop(data, key)
#+end_src

here I just delegate the three functiosn to the Map module, and we can
use Schema like this:

#+begin_src elixir
a = %Schema{}
a["property_a"]
#+end_src

** select_merge
:PROPERTIES:
:CUSTOM_ID: select_merge
:END:
#+begin_src elixir
 def for_admission(query \\ AdmissionEvent, admission) do
    from(ae in query,
      where: ae.admission_id == ^admission.id,
      order_by: [desc: ae.occurred_at],

      #### STEP TWO ####
      #  Join on User  #
      ##################
      join: u in User,
      on: ae.admitter_uuid == u.uuid,

      ############ STEP THREE #############
      #  Select Merge into Virtual Field  #
      #####################################
      select_merge: %{admitter_name: u.full_name}
    )
  end
end
#+end_src

the output:

#+begin_src elixir
iex(1)> admission = Repo.get(Admission, 1)
iex(2)> AdmissionEvent.for_admission(admission) |> Repo.all()
[
  %Registrar.Tracking.AdmissionEvent{
    __meta__: #Ecto.Schema.Metadata<:loaded, "admission_events">,
    action: "Student Admitted",
    admission_id: 3,
    admitter_name: "Albus Dumbledore",
    id: 1,
    occurred_at: ~N[2019-07-29 02:22:18]
  }
]
iex(3)> event = List.first(events)
iex(4)> event.admitter_name
"Albus Dumbledore"
#+end_src

copy from
[[https://dev.to/ktravers/til-how-to-select-merge-with-ecto-query-1944][TIL
How to Select Merge with Ecto.Query]]

** update
:PROPERTIES:
:CUSTOM_ID: update
:END:
Updates are used to update the filtered entries. In order for updates to
be applied, Ecto.Repo.update_all/3 must be invoked.

#+begin_src elixir
query = from(u in User, update: [set: [name: "new name"]])
Repo.update_all(query, [], [])
#+end_src

** delete
:PROPERTIES:
:CUSTOM_ID: delete
:END:
#+begin_src elixir
query = from(post in Post, where: post.name == "abc")
Repo.delete_all(query)
#+end_src

** catch the ecto error
:PROPERTIES:
:CUSTOM_ID: catch-the-ecto-error
:END:
#+begin_src elixir
chset =
  %SomeModel{}
  |> SomeModel.changeset(attrs)
try do
  chset
  |> Repo.insert()
catch :error,  %Postgrex.Error{postgres: %{code: :invalid_password}} ->
  { :error ,
    chset
    |> Changeset.add_error(:username, "may be invalid")
    |> Changeset.add_error(:password, "may be invalid")
  }
else
  {:ok, lr} -> {:ok, Map.put(lr, :password, nil)}
  error -> error
end
#+end_src

copy from
[[https://stackoverflow.com/questions/40280887/elixir-try-catch-vs-try-rescue][Elixir -
try/catch vs try/rescue?]]

** foreign_key and references
:PROPERTIES:
:CUSTOM_ID: foreign_key-and-references
:END:
#+begin_src elixir
belongs_to :ref, Project.Ref,
    ## current a_name in this schema
      foreign_key: :a_name,
      ## b_name in the Project.Ref
      references: :b_name,
      ## not define field
      define_field: false
#+end_src

** migration
:PROPERTIES:
:CUSTOM_ID: migration
:END:
#+begin_src elixir
create unique_index(:posts, [:slug])
drop unique_index(:posts, [:name])
#+end_src

[[https://devhints.io/phoenix-migrations][Phoenix: Ecto migrations
cheatsheet]] [[https://devhints.io/phoenix-ecto][Phoenix: Ecto
cheatsheet]]
