* solana concept

** program_id

program_id is pubkey

** accounts

accounts is array

** instruction_data

instruction_data is byte array

** account

account use to store data
accoutns have a max size of 10mb
each account has a unique address
account data storage is paid with rent
Default account owner is the System Program
PDA have a max size of 10kb, can be used to sign in behalf of a program

*** account types
_Data account_ are for data storing
_Program Accoutns_ are for storing executable programs(smart contract)
_Native Accounts_ are native solana programs: _System_, _Stake_, and _Vote_

** instructions "ingredients"

The _program_id_ of the program invoked
An _array of all accounts_ it tries to read from or write to
an _instruction_data_ byte array that is specific to the intended program

** Transaction

Transactions are limited to 1232 bytes
The max age of a transaction's blockhash is 150 blocks

** solana fees

Transactions fees aka as "gas fees"
Rent fees for storing data on the chain

** PDA
Program Derived Addresses (PDAs) can create accounts that are designed to be controlled by a specific program.
Need a seed + bump
Can perform Cross Program Invocation CPI withour reading a Private Key
- [X] PDAs are 32 byte strings similar to solana public keys, but they don't have a private key they don't live in the ed25519 Elliptic Curve
- [X] _findProgramAddress_ can derive deterministically a PDA using a ProgramId and Seeds
- [X] Bump (one byte) -> used to push away a PDA from the ed25519 Elliptic Curve
- [X] Programs may sign for their PDAs by providing the seeds + bump -> invoke_signed in CPI
- [X] PDA can be only signed by Program that was Derived
- [X] PDA provide -> hashmap-like interface for indexing accounts


** Getting the transaction history in Solana

#+begin_src typescript
let web3 = require('@solana/web3.js');

const solanaConnection = new web3.Connection(web3.clusterApiUrl("mainnet-beta"));

const getTransactions = async(address,limit) => {
  const pubKey = new web3.PublicKey(address);
  let transactionList = await solanaConnection.getSignaturesForAddress(pubKey, {limit: limit});
  let signatureList = transactionList.map(transaction => transaction.signature);

  console.log(signatureList);

  for await (const sig of signatureList) {
    console.log(await solanaConnection.getParsedTransaction(sig, {maxSupportedTransactionVersion: 0}));
  }
}

let myAddress = "enter and address here";

getTransactions(myAddress, 3);
#+end_src

copy from [[https://www.rareskills.io/post/solana-logs-transaction-history][Solana logs, “events,” and transaction history]]

** rust solana get parsed transaction

#+begin_src rust
let tx = rpc_client.get_transaction(/* ... signature ... */, UiTransactionEncoding::JsonParsed);
#+end_src

#+begin_quote
It's a bit confusing, but you can fetch a parsed transaction by specifying JsonParsed for the encoding in get_transaction at https://github.com/solana-labs/solana/blob/99760e519ad7ba55f7b67d155e63e7f697c223b0/rpc-client/src/rpc_client.rs#L2592
#+end_quote

copy from [[https://solana.stackexchange.com/questions/9942/request-for-assistance-retrieving-parsed-transaction-data-in-rust-for-solana-te][Request for Assistance: Retrieving Parsed Transaction Data in Rust for Solana Test Validator]]


** get_transaction_with_config example

#+begin_src rust
async fn process_transaction(rpc_client: &RpcClient, signature: &str) -> Result<()> {
  println!("Processing transaction");

  let raydium_program_id = Pubkey::from_str("routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS")?;
  let jupiter_program_id = Pubkey::from_str("JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4")?;

  let transaction_with_meta = rpc_client.get_transaction_with_config(
    &Signature::from_str(signature)?,
    RpcTransactionConfig {
      encoding: Some(UiTransactionEncoding::JsonParsed),
      commitment: Some(CommitmentConfig::confirmed()),
      max_supported_transaction_version: Some(0),
    },
  )?;

  if let Some(meta) = &transaction_with_meta.transaction.meta {
    if let EncodedTransaction::Json(parsed_tx) = &transaction_with_meta.transaction.transaction {
      if let UiMessage::Parsed(message) = &parsed_tx.message {
        let mut is_raydium_tx = false;
        let mut is_jupiter_tx = false;

        // Check if any instruction interacts with Raydium or Jupiter
        for instruction in &message.instructions {
          if let UiInstruction::Parsed(UiParsedInstruction::PartiallyDecoded(partially_decoded)) =
            instruction
          {
            if partially_decoded.program_id == raydium_program_id.to_string() {
              is_raydium_tx = true;
            } else if partially_decoded.program_id == jupiter_program_id.to_string() {
              is_jupiter_tx = true;
            }
          }
        }

        // Route transaction to appropriate handler
        if is_raydium_tx {
          parse_raydium_swap(message, meta, rpc_client).await?;
        } else if is_jupiter_tx {
          parse_jupiter_swap(message)?;
        } else {
          println!("No Raydium or Jupiter instructions found.");
        }
      }
    }
  }

  Ok(())
}
#+end_src

copy from [[https://github.com/joaquinsoza/soltrac][soltrac]]
