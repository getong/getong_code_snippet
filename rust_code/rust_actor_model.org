* Rust actor model
:PROPERTIES:
:CUSTOM_ID: rust-actor-model
:END:
+Rust is based on actor model.+ Rust uses channel, more like CSP.

** Actix
:PROPERTIES:
:CUSTOM_ID: actix
:END:
[[https://github.com/actix/actix][actix]]

** rust example
:PROPERTIES:
:CUSTOM_ID: rust-example
:END:
#+begin_src rust
loop {
    let (socket, addr) = listener.accept().await.unwrap();

    // these clones look expensive but they're just reference counted mutexes so it's cheap
    let players = players.clone();
    let active_account_ids = active_account_ids.clone();
    let world = world.clone();

    let num_of_players = players.lock().await.len();
    if num_of_players >= SETTINGS.server.max_connections as usize {
        warn!("{} has been disconnected because the server is full", addr);
        continue;
    }

    info!(
        "connection accepted ({}) {}/{}",
        addr,
        num_of_players + 1,
        SETTINGS.server.max_connections
    );

    let pool = pool.clone();

    // Spawn a new task to handle each player async
    tokio::spawn(async move {
        if let Err(e) = handle_player(world, players, active_account_ids, socket, pool).await {
            error!("there was an error processing player: {:?}", e);
        }
    });
}


impl Player {
    pub async fn new(players: Players, socket: TcpStream, player_id: EOShort) -> Self {
        /// this creates the channel for writing/reading to the player task
        let (tx, rx) = mpsc::unbounded_channel();

        // we insert the write half into the hashmap owned by the main server function
        players.lock().await.insert(player_id, tx);

        Self {
            rx,
            bus: PacketBus::new(socket),
            state: State::Uninitialized,
            account_id: 0,
            character_id: 0,
            num_of_characters: 0,
        }
    }
}

if let Some(packet) = queue.get_mut().pop_front() {
    let db_pool = db_pool.clone();
    match handle_packet(
        player_id,
        packet,
        &mut player.bus,
        world.clone(),
        players.clone(),
        active_account_ids.clone(),
        db_pool,
        &player_ip,
        player.account_id,
        player.num_of_characters,
        &character,
    )
    .await
    {
        Ok(()) => {}
        Err(e) => {
            error!("error handling packet: {:?}", e);
        }
    }
}
#+end_src

copy from [[https://eo-rs.dev/blog/the-actor-pattern-with-async-rust/][The Actor pattern with async rust]]


** Actors with Tokio
#+begin_src rust
use tokio::sync::{oneshot, mpsc};

struct MyActor {
    receiver: mpsc::Receiver<ActorMessage>,
    next_id: u32,
}
enum ActorMessage {
    GetUniqueId {
        respond_to: oneshot::Sender<u32>,
    },
}

impl MyActor {
    fn new(receiver: mpsc::Receiver<ActorMessage>) -> Self {
        MyActor {
            receiver,
            next_id: 0,
        }
    }
    fn handle_message(&mut self, msg: ActorMessage) {
        match msg {
            ActorMessage::GetUniqueId { respond_to } => {
                self.next_id += 1;

                // The `let _ =` ignores any errors when sending.
                //
                // This can happen if the `select!` macro is used
                // to cancel waiting for the response.
                let _ = respond_to.send(self.next_id);
            },
        }
    }
}

async fn run_my_actor(mut actor: MyActor) {
    while let Some(msg) = actor.receiver.recv().await {
        actor.handle_message(msg);
    }
}


#[derive(Clone)]
pub struct MyActorHandle {
    sender: mpsc::Sender<ActorMessage>,
}

impl MyActorHandle {
    pub fn new() -> Self {
        let (sender, receiver) = mpsc::channel(8);
        let actor = MyActor::new(receiver);
        tokio::spawn(run_my_actor(actor));

        Self { sender }
    }

    pub async fn get_unique_id(&self) -> u32 {
        let (send, recv) = oneshot::channel();
        let msg = ActorMessage::GetUniqueId {
            respond_to: send,
        };

        // Ignore send errors. If this send fails, so does the
        // recv.await below. There's no reason to check the
        // failure twice.
        let _ = self.sender.send(msg).await;
        recv.await.expect("Actor task has been killed")
    }
}


loop {
    tokio::select! {
        opt_msg = chan1.recv() => {
            let msg = match opt_msg {
                Some(msg) => msg,
                None => break,
            };
            // handle msg
        },
        Some(msg) = chan2.recv() => {
            // handle msg
        },
    }
}
#+end_src

copy from [[https://ryhl.io/blog/actors-with-tokio/][Actors with Tokio]]

** Actor with FnOnce
#+begin_src rust
use futures::channel::oneshot;

fn block<T>(function: impl FnOnce() -> T) -> impl Future<Item=T> {
  let (sender, receiver) = oneshot::channel();

  GLOBAL_THREAD_POOL.submit_work(move || {
    let result = function();
    sender.send(result);
  });

  receiver
}
#+end_src

copy from [[https://users.rust-lang.org/t/what-is-best-tokio-based-actor-framework-also-support-multi-threading/71509][What is Best tokio based actor framework also support multi-threading]]