* rust global pool
:PROPERTIES:
:CUSTOM_ID: rust-global-pool
:END:
** global r2d2 pool
:PROPERTIES:
:CUSTOM_ID: global-r2d2-pool
:END:
copy from
[[https://stackoverflow.com/questions/63150183/how-do-i-keep-a-global-postgres-connection][How
do I keep a global Postgres connection?]]

#+begin_src rust
use r2d2_postgres::postgres::{NoTls, Client};
use r2d2_postgres::PostgresConnectionManager;

#[macro_use]
extern crate lazy_static;

lazy_static! {
    static ref POOL: r2d2::Pool<PostgresConnectionManager<NoTls>> = {
        let manager = PostgresConnectionManager::new(
            // TODO: PLEASE MAKE SURE NOT TO USE HARD CODED CREDENTIALS!!!
            "host=localhost user=postgres password=password".parse().unwrap(),
            NoTls,
        );
        r2d2::Pool::new(manager).unwrap()
    };
}



pub fn get_player(id: i32) {
    // Use global client connection object:
    let mut client = POOL.get().unwrap();
    for row in client.query("SELECT * FROM public.\"User\" WHERE \"accountID\"=$1;",&[&id]).unwrap(){
        let id: i32 = row.get(0);
        let name: &str = row.get(1);

        println!("found player: {} {}", id, name);
    }
}
#+end_src

** static mut example
:PROPERTIES:
:CUSTOM_ID: static-mut-example
:END:
#+begin_src rust
static mut DB: Option<PgPool> = None;

static GUARD: Mutex<i8> = Mutex::new(0);

pub async fn connection() -> &'static PgPool {
    unsafe {
        let profile = std::env::var("app.profile").unwrap_or("default".to_owned());
        let _ = GUARD.lock().expect("Failed to lock for DB.");
        if profile == "test" {
            DB = Some(init_db().await);
            DB.as_ref().unwrap()
        } else {
            if let Some(db) = &DB {
                db
            } else {
                DB = Some(init_db().await);
                DB.as_ref().unwrap()
            }
        }
    }
}

async fn init_db() -> PgPool {
    let user = get_env_or_default("DB_USER", "postgres");
    let password = get_env_or_default("DB_PASSWORD", "");
    let host = get_env_or_default("DB_HOST", "localhost");
    let port = get_env_or_default("DB_PORT", "5432");
    let name = get_env_or_default("DB_NAME", "postgres");
    let connection_url = if password.is_empty() {
        format!("postgresql://{}@{}:{}/{}", user, host, port, name)
    } else {
        format!(
            "postgresql://{}:{}@{}:{}/{}",
            user, password, host, port, name
        )
    };
    println!("Connecting to db: {}.", connection_url);

    PgPoolOptions::new()
        .max_connections(5)
        .connect(&connection_url)
        .await
        .expect("Failed to connect to DB.")
}

fn get_env_or_default(env: &str, default: &str) -> String {
    return env::var(env).unwrap_or_else(|_| default.to_owned());
}
#+end_src

copy from
[[https://www.reddit.com/r/rust/comments/y81k35/database_connection_creation/][Database
connection creation]]
