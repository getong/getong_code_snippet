* renegade code reading

** openraft raft start

#+begin_src rust
/// A client interface to the raft
#[derive(Clone)]
pub struct RaftClient {
    /// The client's config
    pub(crate) config: RaftClientConfig,
    /// The inner raft
    raft: Raft,
    /// The network to use for the raft client
    network_factory: P2PNetworkFactoryWrapper,
    /// A lock to prevent simultaneous membership changes
    membership_change_lock: Arc<Mutex<()>>,
}

impl RaftClient {
  /// Create a new raft client
  pub async fn new<N: P2PNetworkFactory>(
    config: RaftClientConfig,
    db: Arc<DB>,
    net_factory: N,
    state_machine: StateMachine,
  ) -> Result<Self, ReplicationV2Error> {
    let raft_config = Arc::new(RaftConfig {
      cluster_name: config.cluster_name.clone(),
      heartbeat_interval: config.heartbeat_interval,
      election_timeout_min: config.election_timeout_min,
      election_timeout_max: config.election_timeout_max,
      snapshot_max_chunk_size: config.snapshot_max_chunk_size,
      install_snapshot_timeout: config.install_snapshot_timeout,
      max_payload_entries: config.max_payload_entries,
      ..Default::default()
    });

    // Create the raft
    let p2p_factory = P2PNetworkFactoryWrapper::new(net_factory);
    let log_store = LogStore::new(db.clone());
    let raft = Raft::new(config.id, raft_config, p2p_factory.clone(), log_store, state_machine)
      .await
      .map_err(err_str!(ReplicationV2Error::RaftSetup))?;

    // Initialize the raft
    if config.init {
      let initial_nodes = config.initial_nodes.clone();
      let members = initial_nodes.into_iter().collect::<BTreeMap<_, _>>();
      raft.initialize(members).await.map_err(err_str!(ReplicationV2Error::RaftSetup))?;
    }

    Ok(Self {
      config,
      raft,
      network_factory: p2p_factory,
      membership_change_lock: Arc::new(Mutex::new(())),
    })
  }
}
#+end_src

** P2PNetworkFactory definition

#+begin_src rust
pub trait P2PNetworkFactory: Send + Sync + 'static {
  /// Create a new p2p client
  fn new_p2p_client(&self, target: NodeId, target_info: Node) -> P2PRaftNetworkWrapper;
}

/// A wrapper around the p2p raft network that allows for a default
/// `RaftNetwork` implementation and to hide generics from higher level
/// interfaces
pub struct P2PRaftNetworkWrapper {
  /// The inner p2p network
  inner: Box<dyn P2PRaftNetwork + Send + Sync>,
}

/// A generalization of the raft network trait that specifically allows for
/// point-to-point communication
///
/// We implement the general raft network trait for all types that fit this
/// signature by simply calling out to the p2p implementation
#[async_trait]
pub trait P2PRaftNetwork: 'static + Sync + Send {
  /// The target this client is sending requests to
  fn target(&self) -> NodeId;
  /// Send an request to the target node
  async fn send_request(
    &self,
    target: NodeId,
    request: RaftRequest,
  ) -> Result<RaftResponse, RPCError<NodeId, Node, RaftError<NodeId>>>;
}

/// The request type a raft node may send to another
#[derive(Clone, Debug, Serialize, Deserialize)]
pub enum RaftRequest {
  /// A request to append entries
  AppendEntries(AppendEntriesRequest<TypeConfig>),
  /// A request to install a snapshot
  InstallSnapshot(InstallSnapshotRequest<TypeConfig>),
  /// A request to vote
  Vote(VoteRequest<NodeId>),
  /// A proposal forwarded to the leader
  ForwardedProposal(Proposal),
}

/// The response type a raft node may send to another
#[derive(Debug, Serialize, Deserialize)]
pub enum RaftResponse {
  /// A simple ack when no data must be returned
  Ack,
  /// A response to an append entries request
  AppendEntries(AppendEntriesResponse<NodeId>),
  /// A response to an install snapshot request
  InstallSnapshot(Result<InstallSnapshotResponse<NodeId>, InstallSnapshotError>),
  /// A response to a vote request
  Vote(VoteResponse<NodeId>),
}
#+end_src

** openraft type definition

#+begin_src rust
// Declare the types config for the raft
openraft::declare_raft_types! (
    /// The type config for the raft
    pub TypeConfig:
        D = Proposal,
        R = (), // Response
        Node = RaftNode,
        SnapshotData = tokio::fs::File,
);

/// A type alias for the node id type
pub type NodeId = <TypeConfig as RaftTypeConfig>::NodeId;
/// A type alias for the node type
pub type Node = <TypeConfig as RaftTypeConfig>::Node;

/// The network shim
#[derive(Clone)]
pub struct GossipNetwork {
    /// The target node for this instance
    target: NodeId,
    /// The target node info
    target_info: Node,
    /// A sender to the network manager's queue
    network_sender: NetworkManagerQueue,
}

#+end_src

** libp2p code example

#+begin_src rust
use libp2p::request_response::ResponseChannel;
use libp2p_core::Multiaddr;
use tokio::sync::{
    mpsc::{unbounded_channel, UnboundedSender as TokioSender},
    oneshot::{channel as oneshot_channel, Receiver as OneshotReceiver, Sender as OneshotSender},
};

/// The job type for the network manager
#[derive(Debug)]
pub enum NetworkManagerJob {
    /// Send an outbound pubsub message
    ///
    /// The first field is the topic, the second is the message body
    Pubsub(String, PubsubMessage),
    /// Send a gossip request
    ///
    /// Optionally, the sending worker may specify a channel to receive the
    /// corresponding gossip response on
    Request(WrappedPeerId, GossipRequest, Option<NetworkResponseChannel>),
    /// Send a gossip response
    Response(GossipResponse, ResponseChannel<AuthenticatedGossipResponse>),
    /// An internal networking directive
    Internal(NetworkManagerControlSignal),
}

/// The task queue type for the network manager
pub type NetworkManagerQueue = TokioSender<NetworkManagerJob>;
/// The task queue receiver type for the network manager
pub type NetworkManagerReceiver = MeteredTokioReceiver<NetworkManagerJob>;

/// The composed behavior that handles all types of network requests that
/// various workers need access to
#[derive(NetworkBehaviour)]
#[behaviour(out_event = "ComposedProtocolEvent")]
pub struct ComposedNetworkBehavior {
    /// The request/response behavior; provides a point-to-point communication
    /// primitive for relayers to dial each other directly on
    pub request_response: RequestResponse<RelayerGossipCodec>,
    /// The Kademlia DHT behavior; used for storing distributed state, including
    /// peer address information
    pub kademlia_dht: Kademlia<MemoryStore>,
    /// The Gossipsub behavior; used for broadcast (pubsub) primitives
    pub pubsub: Gossipsub,
    /// The identify protocol behavior, used for getting publicly facing
    /// information about the local node
    pub identify: IdentifyProtocol,
}

fn start(&mut self) -> Result<(), Self::Error> {
  // Build a quic transport
  let hostport = format!("/ip4/{}/udp/{}/quic-v1", self.config.bind_addr, self.config.port);
  let addr: Multiaddr = hostport.parse().unwrap();

  // Build the quic transport
  let config = QuicConfig::new(&self.local_keypair);
  let quic_transport = QuicTransport::new(config)
    .map(|(peer_id, quic_conn), _| (peer_id, StreamMuxerBox::new(quic_conn)))
    .boxed();

  // Defines the behaviors of the underlying networking stack: including gossip,
  // pubsub, address discovery, etc
  let mut behavior = ComposedNetworkBehavior::new(
    ,*self.local_peer_id,
    ProtocolVersion::Version0,
    &self.local_keypair,
  )?;

  // Add any bootstrap addresses to the peer info table
  let peer_index = block_on(self.config.clone().global_state.get_peer_info_map())?;
  for (peer_id, peer_info) in peer_index.iter() {
    info!("Adding {:?}: {} to routing table...", peer_id, peer_info.get_addr());
    behavior.kademlia_dht.add_address(peer_id, peer_info.get_addr());
  }

  // Connect the behavior and the transport via swarm and enter the network
  let mut swarm =
    SwarmBuilder::with_tokio_executor(quic_transport, behavior, *self.local_peer_id)
    .build();
  swarm.listen_on(addr).map_err(|err| NetworkManagerError::SetupError(err.to_string()))?;
}
#+end_src

** job queue and notification

#+begin_src rust
/// Create a new task driver queue
pub fn new_task_driver_queue() -> (TaskDriverQueue, TaskDriverReceiver) {
    let (send, recv) = crossbeam::channel::unbounded();
    (send, MeteredCrossbeamReceiver::new(recv, TASK_DRIVER_QUEUE_NAME))
}

/// Create a new notification channel and job for the task driver
pub fn new_task_notification(task_id: TaskIdentifier) -> (TaskNotificationReceiver, TaskDriverJob) {
    let (sender, receiver) = oneshot_channel();
    (receiver, TaskDriverJob::Notify { task_id, channel: sender })
}
#+end_src


** raft request response function

#+begin_src rust
/// Propose an update to the raft
pub async fn propose_transition(&self, update: Proposal) -> Result<(), ReplicationV2Error> {
    // If the current node is not the leader, forward to the leader
    let (mut leader_nid, leader_info) = self
        .leader_info()
        .ok_or_else(|| ReplicationV2Error::Proposal(ERR_NO_LEADER.to_string()))?;

    // If we're expiring the leader, first change leader then propose an expiry
    if let StateTransition::RemoveRaftPeers { peer_ids } = update.transition.as_ref()
        && peer_ids.contains(&leader_nid)
    {
        info!("removing raft leader");
        leader_nid = self.change_leader().await?;
    }

    if leader_nid != self.node_id() {
        // Get a client to the leader's raft
        let net = self.network_factory.new_p2p_client(leader_nid, leader_info);

        // Send a message
        let msg = RaftRequest::ForwardedProposal(update);
        net.send_request(leader_nid, msg)
            .await
            .map_err(err_str!(ReplicationV2Error::Proposal))?;
        return Ok(());
    }

    match *update.transition {
        StateTransition::AddRaftLearners { learners } => {
            self.handle_add_learners(learners).await
        },
        StateTransition::AddRaftVoters { peer_ids } => self.handle_add_voters(peer_ids).await,
        StateTransition::RemoveRaftPeers { peer_ids } => {
            self.handle_remove_peers(peer_ids).await
        },
        _ => self
            .raft()
            .client_write(update)
            .await
            .map_err(err_str!(ReplicationV2Error::Proposal))
            .map(|_| ()),
    }
}
#+end_src
