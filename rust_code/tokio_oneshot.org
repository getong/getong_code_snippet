* tokio oneshot
:PROPERTIES:
:CUSTOM_ID: tokio-oneshot
:END:
** A channel for sending a =single= message between asynchronous tasks.
:PROPERTIES:
:CUSTOM_ID: a-channel-for-sending-a-single-message-between-asynchronous-tasks.
:END:
The oneshow sender can be used only once. see the =send= method
definition:

#+begin_src rust
pub fn send(mut self: Self, t: T) -> Result<(), T>
#+end_src

** use oneshot with loop method
:PROPERTIES:
:CUSTOM_ID: use-oneshot-with-loop-method
:END:
#+begin_src rust
use tokio::sync::oneshot; //

fn main() {
    let (sender, receiver) = oneshot::channel::<u8>();
    tokio::spawn(async move {
        sender.send(3).unwrap();

        loop {
            // Do things
        }
    });
}
#+end_src

Or:

#+begin_src rust
use tokio::sync::oneshot;

fn main() {
    let (sender, receiver) = oneshot::channel::<u8>();
    tokio::spawn(async move {
        let mut sender = Some(sender);

        loop {
            if let Some(sender) = sender.take() {
                sender.send(3).unwrap();
            }
            // Do things
        }
    });
}
#+end_src

copy from
[[https://stackoverflow.com/questions/66282294/how-do-i-use-a-tokio-oneshot-sender-and-receiver-on-different-tasks-with-inner-l][How
do I use a Tokio oneshot sender and receiver on different tasks with
inner loops?]]
