* bytes prost

** struct data type definition

#+begin_src rust
#[must_use]
#[derive(Clone)]
pub struct SrvMessage {
    header: SrvHeader,
    transaction: Option<SrvTxn>,
    message_id: String,
    body: Bytes,
}
#+end_src


** decode bytes into struct

#+begin_src rust
impl Decoder for SrvCodec {
    type Error = io::Error;
    type Item = SrvMessage;

    fn decode(&mut self, bytes: &mut BytesMut) -> Result<Option<Self::Item>, io::Error> {
        if bytes.len() < HEADER_LEN {
            trace!("Got fewer than HEADER_LEN bytes: {}", bytes.len());
            return Ok(None);
        }
        trace!("Decoding SrvMessage\n  -> Bytes: {:?}", bytes);
        let mut buf = Cursor::new(bytes);
        let header = SrvHeader(buf.get_u32());
        trace!("  -> SrvHeader: {:?}", header);
        let txn = if header.is_transaction() {
            if buf.remaining() < TXN_LEN {
                return Ok(None);
            }
            let t = SrvTxn(buf.get_u32());
            trace!("  -> SrvTxn: {:?}", t);
            Some(t)
        } else {
            None
        };
        if buf.remaining() < (header.message_id_len() + header.body_len()) {
            trace!("  -> Not enough bytes to read message_id and body");
            return Ok(None);
        }
        buf.copy_to_slice(&mut self.recv_buf[0..header.message_id_len()]);
        let message_id = str::from_utf8(&self.recv_buf[0..header.message_id_len()]).map_err(|e| {
                             trace!("  -> Invalid message data: {}", e);
                             io::Error::new(io::ErrorKind::InvalidData, e)
                         })?
                         .to_string();
        buf.copy_to_slice(&mut self.recv_buf[0..header.body_len()]);
        let position = buf.position() as usize;
        let bytes = buf.into_inner();
        bytes.advance(position);
        Ok(Some(SrvMessage { header,
                             transaction: txn,
                             message_id,
                             body:
                                 Bytes::copy_from_slice(&self.recv_buf[0..header.body_len()]) }))
    }
}
#+end_src

** encode

#+begin_src rust
impl Encoder<SrvMessage> for SrvCodec {
    type Error = io::Error;

    fn encode(&mut self, msg: SrvMessage, buf: &mut BytesMut) -> io::Result<()> {
        buf.reserve(msg.size());
        buf.put_u32(msg.header().0);
        if let Some(txn) = msg.transaction {
            buf.put_u32(txn.0);
        }
        buf.put_slice(msg.message_id().as_bytes());
        buf.put_slice(msg.body());
        Ok(())
    }
}
#+end_src

** format the parse method code
#+begin_src rust
impl SrvMessage {
    pub fn parse<T>(&self) -> Result<T, prost::DecodeError>
        where T: Message + MessageStatic + Default
    {
        T::decode(self.body())
    }
}
#+end_src
it call the prost::Message::decode()

** usage example
#+begin_src rust
include!(concat!(env!("OUT_DIR"), "/sup.ctl.rs"));

fn handle_ctl_reply(reply: &SrvMessage) -> result::Result<(), SrvClientError> {
    let mut progress_bar = pbr::ProgressBar::<io::Stdout>::new(0);
    progress_bar.set_units(pbr::Units::Bytes);
    progress_bar.show_tick = true;
    progress_bar.message("    ");
    match reply.message_id() {
        "ConsoleLine" => {
            let m = reply.parse::<sup_proto::ctl::ConsoleLine>()
                         .map_err(SrvClientError::Decode)?;
            let mut new_spec = ColorSpec::new();
            let msg_spec = match m.color {
                Some(color) => {
                    new_spec.set_fg(Some(Color::from_str(&color)?))
                            .set_bold(m.bold)
                }
                None => new_spec.set_bold(m.bold),
            };
            common::ui::print(UI::default_with_env().out(), m.line.as_bytes(), msg_spec)?;
        }
        "NetProgress" => {
            let m = reply.parse::<sup_proto::ctl::NetProgress>()
                         .map_err(SrvClientError::Decode)?;
            progress_bar.total = m.total;
            if progress_bar.set(m.position) >= m.total {
                progress_bar.finish();
            }
        }
        "NetErr" => {
            let m = reply.parse::<sup_proto::net::NetErr>()
                         .map_err(SrvClientError::Decode)?;
            return Err(SrvClientError::from(m));
        }
        _ => (),
    }
    Ok(())
}

#+end_src

** from definition
#+begin_src rust
impl<T> From<T> for SrvMessage where T: Message + MessageStatic
{
    fn from(msg: T) -> Self {
        let mut buf = BytesMut::with_capacity(msg.encoded_len());
        msg.encode(&mut buf).unwrap();
        let body = buf.freeze();
        let message_id = T::MESSAGE_ID.to_string();
        SrvMessage { header: SrvHeader::new(body.len() as u32, message_id.len() as u32, false),
                     transaction: None,
                     message_id,
                     body }
    }
}
#+end_src

** from usage code example
#+begin_src rust
// Send the handshake message to the server
let handshake = protocol::ctl::Handshake { secret_key: Some(Self::ctl_secret_key()?), };
let mut message = SrvMessage::from(handshake);
message.set_transaction(current_transaction);
tcp_stream.send(message).await?;
#+end_src

copy from habitat codec.rs

** Trait for decode

#+begin_src rust
impl Backend {
    fn post<I, O>(&self, service: &str, input: I) -> Result<O>
    where
        I: Message,
        O: Message + Default,
    {
        self.runtime_handle().block_on(async move {
            let out = self
                .web_client()
                .post(service_url(service))
                .body(input.encode_to_vec())
                .timeout(Duration::from_secs(60))
                .send()
                .await?
                .error_for_status()?
                .bytes()
                .await?;
            let out: O = O::decode(&out[..])?;
            Ok(out)
        })
    }
}

impl BackendAnkiwebService for Backend {
    fn get_addon_info(&self, input: GetAddonInfoRequest) -> Result<GetAddonInfoResponse> {
        self.post("desktop/addon-info", input)
    }

    fn check_for_update(&self, input: CheckForUpdateRequest) -> Result<CheckForUpdateResponse> {
        self.post("desktop/check-for-update", input)
    }
}
#+end_src

make it short:
#+begin_src rust
pub fn decode<O>(bytes: &[u8]) -> Result<Message, Box<dyn std::error::Error>>
where
    O: Message + Default,
{
    let out: O = O::decode(bytes)?;
    Ok(out)
}

#+end_src

copy from [[https://github.com/ankitects/anki][anki]] ankiweb.rs


** macro for bytes
#+begin_src rust
use std::convert::TryFrom;

pub(crate) mod antidote;

use self::antidote::*;
use thiserror::Error;

#[derive(Debug, Error)]
pub enum AntidoteError {
    #[error("unknown error")]
    Unknown = 0,
    #[error("the request has timed out")]
    Timeout = 1,
    #[error("not enough permissions")]
    NoPermissions = 2,
    #[error("the request has been aborted")]
    Aborted = 3,
}

impl From<u32> for AntidoteError {
    fn from(code: u32) -> Self {
        match code {
            1 => Self::Timeout,
            2 => Self::NoPermissions,
            3 => Self::Aborted,
            _ => Self::Unknown,
        }
    }
}

macro_rules! apb_messages {
    ($($msg:ident = $code:literal,)*) => {
        #[derive(Debug, Copy, Clone, PartialEq, Eq)]
        pub enum ApbMessageCode {
            $(
                $msg = $code,
            )*
        }

        pub trait ApbMessage: prost::Message {
            fn code() -> ApbMessageCode;
        }

        #[derive(Debug, Error)]
        #[error("unknown message code: {0}")]
        pub struct MessageCodeError(u8);

        impl TryFrom<u8> for ApbMessageCode {
            type Error = MessageCodeError;

            fn try_from(code: u8) -> Result<ApbMessageCode, MessageCodeError> {
                match code {
                    $(
                        $code => Ok(ApbMessageCode::$msg),
                    )*
                    code => Err(MessageCodeError(code))
                }
            }
        }

        $(
            impl ApbMessage for $msg {
                fn code() -> ApbMessageCode {
                    ApbMessageCode::$msg
                }
            }
        )*
    };
}

apb_messages! {
    ApbErrorResp = 0,
    ApbRegUpdate = 107,
    ApbGetRegResp = 108,
    ApbCounterUpdate = 109,
    ApbGetCounterResp = 110,
    ApbOperationResp = 111,
    ApbSetUpdate = 112,
    ApbGetSetResp = 113,
    ApbTxnProperties = 114,
    ApbBoundObject = 115,
    ApbReadObjects = 116,
    ApbUpdateOp = 117,
    ApbUpdateObjects = 118,
    ApbStartTransaction = 119,
    ApbAbortTransaction = 120,
    ApbCommitTransaction = 121,
    ApbStaticUpdateObjects = 122,
    ApbStaticReadObjects = 123,
    ApbStartTransactionResp = 124,
    ApbReadObjectResp = 125,
    ApbReadObjectsResp = 126,
    ApbCommitResp = 127,
    ApbStaticReadObjectsResp = 128,
    ApbCreateDc = 129,
    ApbCreateDcResp = 130,
    ApbConnectToDCs = 131,
    ApbConnectToDCsResp = 132,
    ApbGetConnectionDescriptor = 133,
    ApbGetConnectionDescriptorResp = 134,
}

#+end_src

copy from [[https://github.com/scality/elmerfs][elmerfs]] proto.rs

** sercode frame

#+begin_src rust
#[must_use]
#[derive(Clone)]
pub struct SrvMessage {
    header:      SrvHeader,
    transaction: Option<SrvTxn>,
    message_id:  String,
    body:        Bytes,
}

pub trait Decoder {
    type Item;
    type Error: From<io::Error>;
    fn decode(&mut self, src: &mut BytesMut) -> Result<Option<Self::Item>, Self::Error>;
    fn decode_eof(&mut self, buf: &mut BytesMut) -> Result<Option<Self::Item>, Self::Error> {
        match self.decode(buf)? {
            Some(frame) => Ok(Some(frame)),
            None => {
                if buf.is_empty() {
                    Ok(None)
                } else {
                    Err(io::Error::new(io::ErrorKind::Other, "bytes remaining on stream").into())
                }
            }
        }
    }
    fn framed<T: AsyncRead + AsyncWrite + Sized>(self, io: T) -> Framed<T, Self>
    where
        Self: Sized,
    {
        Framed::new(io, self)
    }
}

impl Decoder for SrvCodec {
    type Error = io::Error;
    type Item = SrvMessage;

    fn decode(&mut self, bytes: &mut BytesMut) -> Result<Option<Self::Item>, io::Error> {
        if bytes.len() < HEADER_LEN {
            trace!("Got fewer than HEADER_LEN bytes: {}", bytes.len());
            return Ok(None);
        }
        trace!("Decoding SrvMessage\n  -> Bytes: {:?}", bytes);
        let mut buf = Cursor::new(bytes);
        let header = SrvHeader(buf.get_u32());
        trace!("  -> SrvHeader: {:?}", header);
        let txn = if header.is_transaction() {
            if buf.remaining() < TXN_LEN {
                return Ok(None);
            }
            let t = SrvTxn(buf.get_u32());
            trace!("  -> SrvTxn: {:?}", t);
            Some(t)
        } else {
            None
        };
        if buf.remaining() < (header.message_id_len() + header.body_len()) {
            trace!("  -> Not enough bytes to read message_id and body");
            return Ok(None);
        }
        buf.copy_to_slice(&mut self.recv_buf[0..header.message_id_len()]);
        let message_id = str::from_utf8(&self.recv_buf[0..header.message_id_len()]).map_err(|e| {
                             trace!("  -> Invalid message data: {}", e);
                             io::Error::new(io::ErrorKind::InvalidData, e)
                         })?
                         .to_string();
        buf.copy_to_slice(&mut self.recv_buf[0..header.body_len()]);
        let position = buf.position() as usize;
        let bytes = buf.into_inner();
        bytes.advance(position);
        Ok(Some(SrvMessage { header,
                             transaction: txn,
                             message_id,
                             body:
                                 Bytes::copy_from_slice(&self.recv_buf[0..header.body_len()]) }))
    }
}

impl Encoder<SrvMessage> for SrvCodec {
    type Error = io::Error;

    fn encode(&mut self, msg: SrvMessage, buf: &mut BytesMut) -> io::Result<()> {
        buf.reserve(msg.size());
        buf.put_u32(msg.header().0);
        if let Some(txn) = msg.transaction {
            buf.put_u32(txn.0);
        }
        buf.put_slice(msg.message_id().as_bytes());
        buf.put_slice(msg.body());
        Ok(())
    }
}

pub trait Encoder<Item> {
    type Error: From<io::Error>;
    fn encode(&mut self, item: Item, dst: &mut BytesMut) -> Result<(), Self::Error>;
}

impl SrvMessage {
    pub fn parse<T>(&self) -> Result<T, prost::DecodeError>
        where T: Message + MessageStatic + Default
    {
        T::decode(self.body())
    }
}


fn handle_ctl_reply(reply: &SrvMessage) -> result::Result<(), SrvClientError> {
    let mut progress_bar = pbr::ProgressBar::<io::Stdout>::new(0);
    progress_bar.set_units(pbr::Units::Bytes);
    progress_bar.show_tick = true;
    progress_bar.message("    ");
    match reply.message_id() {
        "ConsoleLine" => {
            let m = reply.parse::<sup_proto::ctl::ConsoleLine>()
                         .map_err(SrvClientError::Decode)?;
            let mut new_spec = ColorSpec::new();
            let msg_spec = match m.color {
                Some(color) => {
                    new_spec.set_fg(Some(Color::from_str(&color)?))
                            .set_bold(m.bold)
                }
                None => new_spec.set_bold(m.bold),
            };
            common::ui::print(UI::default_with_env().out(), m.line.as_bytes(), msg_spec)?;
        }
        "NetProgress" => {
            let m = reply.parse::<sup_proto::ctl::NetProgress>()
                         .map_err(SrvClientError::Decode)?;
            progress_bar.total = m.total;
            if progress_bar.set(m.position) >= m.total {
                progress_bar.finish();
            }
        }
        "NetErr" => {
            let m = reply.parse::<sup_proto::net::NetErr>()
                         .map_err(SrvClientError::Decode)?;
            return Err(SrvClientError::from(m));
        }
        _ => (),
    }
    Ok(())
}
#+end_src

copy from [[https://github.com/habitat-sh/habitat][habitat]] codec.rs gameway_util.rs