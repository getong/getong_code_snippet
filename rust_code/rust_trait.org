* rust trait
:PROPERTIES:
:CUSTOM_ID: rust-trait
:END:
** PartialOrd , PartialEq
:PROPERTIES:
:CUSTOM_ID: partialord-partialeq
:END:
#+begin_example
比较运算符实际上也是某些 trait 的语法糖，不过比较运算符所实现的 trait 只有2个：std::cmp::PartialEq和 std::cmp::PartialOrd。

其中，==和!= 实现的是 PartialEq，<、>、>= 和 <=实现的是 PartialOrd。

标准库中，std::cmp 这个 mod 下有4个 trait，而且直观来看 Ord 和 Eq 岂不是更好？但 Rust 对于这4个 trait 的处理是很明确的。因为在浮点数有一个特殊的值叫 NaN，这个值表示未定义的一个浮点数。在 Rust 中可以用0.0f32 / 0.0f32来求得其值，这个数是一个都确定的值，但它表示的是一个不确定的数，那么NaN != NaN 的结果是啥？标准库告诉我们是 true。但这么写有不符合Eq定义里的total equal（每位一样两个数就一样）的定义。因此有了 PartialEq这么一个定义，NaN 这个情况就给它特指了。

为了普适的情况，Rust 的编译器就选择了PartialOrd 和PartialEq来作为其默认的比较符号的trait。
#+end_example

** Iterator
:PROPERTIES:
:CUSTOM_ID: iterator
:END:
#+begin_example
iter()  返回一个只读可重入迭代器，迭代器元素的类型为 &T
into_iter() 返回一个只读不可重入迭代器，迭代器元素的类型为 T
iter_mut()  返回一个可修改可重入迭代器，迭代器元素的类型为 &mut T
#+end_example

copy from
[[https://www.twle.cn/c/yufei/rust/rust-basic-iterator.html][Rust 迭代器
Iterator]]

** Fn, FnMut, FnOnce
:PROPERTIES:
:CUSTOM_ID: fn-fnmut-fnonce
:END:
#+begin_src rust
#[lang = "fn_once"]
pub trait FnOnce<Args> {
    type Output;
    extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
}

#[lang = "fn_mut"]
pub trait FnMut<Args>: FnOnce<Args> {
    extern "rust-call" fn call_mut(&mut self, args: Args) -> Self::Output;
}

#[lang = "fn"]
pub trait Fn<Args>: FnMut<Args> {
    extern "rust-call" fn call(&self, args: Args) -> Self::Output;
}
#+end_src

#+begin_example
FnOnce, 参数类型是 self，所以，这种类型的闭包会获取变量的所有权，生命周期只能是当前作用域，之后就会被释放了。
FnMut, 参数类型是 &mut self，所以，这种类型的闭包是可变借用，会改变变量，但不会释放该变量。所以可以运行多次。
Fn, 参数类型是 &self，所以，这种类型的闭包是不可变借用，不会改变变量，也不会释放该变量。所以可以运行多次。
#+end_example

copy from
[[https://www.dazhuanlan.com/2019/12/09/5dee50f786c92/][谈一谈Fn, FnMut,
FnOnce的区别]]

** From, Into trait
:PROPERTIES:
:CUSTOM_ID: from-into-trait
:END:
From trait

#+begin_src rust
use std::convert::From;

#[derive(Debug)]
struct Number {
    value: i32,
}

impl From<i32> for Number {
    fn from(item: i32) -> Self {
        Number { value: item }
    }
}

fn main() {
    let num = Number::from(30);
    println!("My number is {:?}", num);
}
#+end_src

Into trait

#+begin_src rust
use std::convert::From;

#[derive(Debug)]
struct Number {
    value: i32,
}

impl From<i32> for Number {
    fn from(item: i32) -> Self {
        Number { value: item }
    }
}

fn main() {
    let int = 5;
    let num: Number = int.into();
    println!("My number is {:?}", num);
}
#+end_src

如果你为你的类型实现了 From，那么同时你也就免费获得了 Into。

使用 Into trait
通常要求指明要转换到的类型，因为编译器大多数时候不能推断它。 copy from
[[https://rustwiki.org/zh-CN/rust-by-example/conversion/from_into.html][From
和 Into]]

** Drop trait
:PROPERTIES:
:CUSTOM_ID: drop-trait
:END:
#+begin_src rust
struct HasDrop;

impl Drop for HasDrop {
    fn drop(&mut self) {
        println!("Dropping HasDrop!");
    }
}

struct HasTwoDrops {
    one: HasDrop,
    two: HasDrop,
}

impl Drop for HasTwoDrops {
    fn drop(&mut self) {
        println!("Dropping HasTwoDrops!");
    }
}

fn main() {
    let _x = HasTwoDrops { one: HasDrop, two: HasDrop };
    println!("Running!");
}
#+end_src

output

#+begin_example
Running!
Dropping HasTwoDrops!
Dropping HasDrop!
Dropping HasDrop!
#+end_example

function:

#+begin_src rust
fn drop(&mut self)
#+end_src

#+begin_example
Copy and Drop are exclusive
You cannot implement both Copy and Drop on the same type. Types that are Copy get implicitly duplicated by the compiler, making it very hard to predict when, and how often destructors will be executed. As such, these types cannot have destructors.
#+end_example

copy from [[https://doc.rust-lang.org/std/ops/trait.Drop.html][Trait
std::ops::Drop]]

#+begin_example
Types that implement Drop trait, have a drop() method, but explicitly calling it is illegal within user code.

`use std::mem::drop` brings the function drop into local scope, and free the variable's memory.
#+end_example

#+begin_src rust
use std::mem::drop;

let a:i32 = Box::new(1);
drop(a);
#+end_src

** Index trait
:PROPERTIES:
:CUSTOM_ID: index-trait
:END:
#+begin_src rust
pub trait Index<Idx>
where
    Idx: ?Sized,
{
    type Output: ?Sized;
    fn index(&self, index: Idx) -> &Self::Output;
}
#+end_src

Accessing list["key"] is syntatic sugar for list.index("key")

** trait object
:PROPERTIES:
:CUSTOM_ID: trait-object
:END:
#+begin_example
Trait objects have three forms of syntax: &dyn Trait, &Trait, and Box<Trait>.
• &dyn Trait
• &Trait
• Box<dyn Trait>
#+end_example

#+begin_example
Common use cases for trait objects:
• creating collections of of heterogeneous objects
• as a return value, they can enable functions to returning multiple concrete types
• supporting dynamic dispatch, whereby the function that is called is determined at
run-time, rather than compile time
Trait objects are not objects in the sense that an object-oriented programmer would
understand. They’re perhaps closer to a mixin class. Trait objects don’t exist on their
own. They’re agents of some other type.
#+end_example

** str::parse
:PROPERTIES:
:CUSTOM_ID: strparse
:END:
#+begin_src rust
pub fn parse<F>(&self) -> Result<F, <F as FromStr>::Err>
where
    F: FromStr,

Parses this string slice into another type.

Because parse is so general, it can cause problems with type inference. As such, parse is one of the few times you'll see the syntax affectionately known as the 'turbofish': ::<>. This helps the inference algorithm understand specifically which type you're trying to parse into.

parse can parse any type that implements the FromStr trait.

Errors
Will return Err if it's not possible to parse this string slice into the desired type.
#+end_src

usage:

#+begin_src rust
let four: u32 = "4".parse().unwrap();
assert_eq!(4, four);

let four = "4".parse::<u32>();
assert_eq!(Ok(4), four);
#+end_src

** std::slice::IterMut
:PROPERTIES:
:CUSTOM_ID: stdsliceitermut
:END:
example:

#+begin_src rust
// First, we declare a type which has `iter_mut` method to get the `IterMut`
// struct (&[usize here]):
let mut slice = &mut [1, 2, 3];

// Then, we iterate over it and increment each element value:
for element in slice.iter_mut() {
    *element += 1;
}

// We now have "[2, 3, 4]":
println!("{:?}", slice);
#+end_src

copy from
[[https://doc.rust-lang.org/std/slice/struct.IterMut.html][Struct
std::slice::IterMut]]

** trait types
:PROPERTIES:
:CUSTOM_ID: trait-types
:END:
#+begin_example
simple trait
generic trait
marker trait
associated type trait
inherited trait
#+end_example

** trait bound
:PROPERTIES:
:CUSTOM_ID: trait-bound
:END:
#+begin_src rust
use std::fmt::Display;

struct Foo<T: Display> {
    bar : T
}

struct Bar<F> where F: Display {
    inner: F
}

fn show_me(val: impl Display) {
    println!("{}", val);
}

fn main() {
    show_me("test string");
}
#+end_src

** trait object
:PROPERTIES:
:CUSTOM_ID: trait-object-1
:END:
#+begin_example
There are two ways of using traits to write polymorphic code in Rust: trait objects and generics.

A reference to a trait type, like writer, is called a trait object.

&dyn Trait, &mut dyn Trait, Box<dyn Trait>, impl Trait
impl Trait is implemented through static dispatch.
dyn Trait is dynamic dispatch.
#+end_example

code :

#+begin_src rust
// plain function
fn say_hello(out: &mut dyn Write)

// generic function
fn say_hello<W: Write>(out: &mut W)
#+end_src

The choice of whether to use trait objects or generic code is subtle.
Since both features are based on traits, they have a lot in common.

** impl Trait and dyn Trait
:PROPERTIES:
:CUSTOM_ID: impl-trait-and-dyn-trait
:END:
impl Trait 和 dyn Trait 在 Rust 分别被称为静态分发和动态分发. 在第一版的
Rust Book 这样解释分发(dispatch)

When code involves polymorphism, there needs to be a mechanism to
determine which specific version is actually run. This is called
'dispatch'. There are two major forms of dispatch: static dispatch and
dynamic dispatch. While Rust favors static dispatch, it also supports
dynamic dispatch through a mechanism called 'trait objects'.
即当代码涉及多态时, 需要某种机制决定实际调用类型. 静态分发,
正如静态类型语言的”静态”一词说明的, 在编译期就确定了具体调用类型. Rust
编译器会通过单态化(Monomorphization) 将泛型函数展开.

#+begin_src rust
&mut impl Trait
&impl Trait
#+end_src

copy from [[https://zhuanlan.zhihu.com/p/109990547][捋捋 Rust 中的 impl
Trait 和 dyn Trait]] also see
[[https://liujiacai.net/blog/2021/04/27/trait-usage/][Trait
使用及原理分析]]

** Index, IndexMut trait
:PROPERTIES:
:CUSTOM_ID: index-indexmut-trait
:END:
#+begin_src rust

pub trait Index<Idx>
where
    Idx: ?Sized,
{
    type Output: ?Sized;
    fn index(&self, index: Idx) -> &Self::Output;
}

pub trait IndexMut<Idx>: Index<Idx>
where
    Idx: ?Sized,
{
    fn index_mut(&mut self, index: Idx) -> &mut Self::Output;
}
#+end_src

example:

#+begin_src rust
use std::ops::Index;

enum Nucleotide {
    A,
    C,
    G,
    T,
}

struct NucleotideCount {
    a: usize,
    c: usize,
    g: usize,
    t: usize,
}

impl Index<Nucleotide> for NucleotideCount {
    type Output = usize;

    fn index(&self, nucleotide: Nucleotide) -> &Self::Output {
        match nucleotide {
            Nucleotide::A => &self.a,
            Nucleotide::C => &self.c,
            Nucleotide::G => &self.g,
            Nucleotide::T => &self.t,
        }
    }
}

let nucleotide_count = NucleotideCount {a: 14, c: 9, g: 10, t: 12};
assert_eq!(nucleotide_count[Nucleotide::A], 14);
assert_eq!(nucleotide_count[Nucleotide::C], 9);
assert_eq!(nucleotide_count[Nucleotide::G], 10);
assert_eq!(nucleotide_count[Nucleotide::T], 12);
#+end_src

IndexMut:

#+begin_src rust
use std::ops::{Index, IndexMut};

#[derive(Debug)]
enum Side {
    Left,
    Right,
}

#[derive(Debug, PartialEq)]
enum Weight {
    Kilogram(f32),
    Pound(f32),
}

struct Balance {
    pub left: Weight,
    pub right: Weight,
}

impl Index<Side> for Balance {
    type Output = Weight;

    fn index(&self, index: Side) -> &Self::Output {
        println!("Accessing {:?}-side of balance immutably", index);
        match index {
            Side::Left => &self.left,
            Side::Right => &self.right,
        }
    }
}

impl IndexMut<Side> for Balance {
    fn index_mut(&mut self, index: Side) -> &mut Self::Output {
        println!("Accessing {:?}-side of balance mutably", index);
        match index {
            Side::Left => &mut self.left,
            Side::Right => &mut self.right,
        }
    }
}

let mut balance = Balance {
    right: Weight::Kilogram(2.5),
    left: Weight::Pound(1.5),
};

// In this case, `balance[Side::Right]` is sugar for
// `*balance.index(Side::Right)`, since we are only *reading*
// `balance[Side::Right]`, not writing it.
assert_eq!(balance[Side::Right], Weight::Kilogram(2.5));

// However, in this case `balance[Side::Left]` is sugar for
// `*balance.index_mut(Side::Left)`, since we are writing
// `balance[Side::Left]`.
balance[Side::Left] = Weight::Kilogram(3.0);
#+end_src

** trait object
:PROPERTIES:
:CUSTOM_ID: trait-object-2
:END:

#+begin_quote

#+begin_quote

#+begin_quote
在 Rust 中使用 trait
实现多态有两种方式，静态分发或者动态分发。静态分发使用 trait bound 或者
impl trait
方式实现编译期单态化，根据类型参数生成对应的结构或者函数。动态分发使用
trait object 的方式实现，而由于 trait object
是动态大小类型，无法在编译期确定类型大小，所以一般会使用指向 trait
object 的引用或者指针来操作 trait object。而指向 trait object
的引用或者指针本质上是一个胖指针，其中包含了指向擦除了具体类型的对象指针与虚函数表。所以每次调用
trait object
的方法时，需要解引用该胖指针，所以部分观点认为动态分发比静态分发开销更大，而相反的观点认为使用静态分发会导致编译时间变长，编译后二进制文件膨胀以及增加缓存失效概率等问题，所以具体使用哪种方式就见仁见智了。

#+end_quote

#+end_quote

#+end_quote

copy from [[https://juejin.cn/post/7011317906969460766][Trait Object
还是 Virtual Method Table]]

** Higher-ranked trait bounds (hrtd)
:PROPERTIES:
:CUSTOM_ID: higher-ranked-trait-bounds-hrtd
:END:
#+begin_src rust
impl<'a> PartialEq<i32> for &'a T {
    // ...
}


fn call_on_ref_zero<F>(f: F) where for<'a> F: Fn(&'a i32) {
    let zero = 0;
    f(&zero);
}

fn call_on_ref_zero<F>(f: F) where F: for<'a> Fn(&'a i32) {
    let zero = 0;
    f(&zero);
}
#+end_src

copy from
[[https://dev-doc.rust-lang.org/beta/reference/trait-bounds.html#higher-ranked-trait-bounds][Higher-ranked
trait bounds]]

** dyn trait usage
:PROPERTIES:
:CUSTOM_ID: dyn-trait-usage
:END:
#+begin_src rust
trait Foo {
    fn do_stuff(&self);
}

// Run-time polymorphism (dynamic dispatch).
// Here `Foo` acts like an Java interface or a abstract base class.
fn runtime(obj: &dyn Foo) {
    obj.do_stuff();
}

// Compile-time polymorphism (generics).
// Here `Foo` acts as a constraint on what types can be passed to the function
// (what C++ calls a "concept").
fn compile_time<T: Foo>(obj: &T) {
    obj.do_stuff();
}
#+end_src

copy from [[https://www.rerun.io/blog/why-rust][Why Rust?]]
