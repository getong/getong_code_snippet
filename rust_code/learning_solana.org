* learning solana

** Install Solana CLI

#+begin_src shell
wget -c https://github.com/solana-labs/solana/releases/download/v1.17.31/solana-release-x86_64-unknown-linux-gnu.tar.bz2
tar jxf solana-release-x86_64-unknown-linux-gnu.tar.bz2
cd solana-release/

export PATH=$HOME/solana-release/bin:$PATH
#+end_src

** A local Solana cluster

#+begin_src shell
## start a local cluster
solana-test-validator

## view local configuration
solana config get

## configure the CLI to interact with localhost
solana config set --url http://127.0.0.1:8899

## verify the CLI tool configuration with the genesis hash
solana genesis-hash
#+end_src

** Rust for Solana

The solana_program crate: https://docs.rs/solana-program/latest/solana_program/

#+begin_src rust
use solana_program::{
  account_info::AccountInfo,
  entrypoint,
  entrypoint::ProgramResult,
  pubkey::Pubkey,
};

entrypoint!(process_instruction);

pub fn process_instruction(
  program_id: &Pubkey,
  accounts: &[AccountInfo],
  instruction_data: &[u8],
) -> ProgramResult {
  // Decode and dispatch instructions here.
  todo!()
}
#+end_src

** Create local wallets

*** Create a folder for local wallets

#+begin_src shell
mkdir ~/solana-wallets
#+end_src

*** Generate keypairs for Alice and Bob

#+begin_src shell
solana-keygen new --outfile ~/solana-wallets/bob.json

solana-keygen new --outfile ~/solana-wallets/alice.json

solana-keygen new --outfile ~/.config/solana/id.json
#+end_src

*** Display Bob and Alice's public keys using their private keys

#+begin_src shell
solana-keygen pubkey ~/solana-wallets/bob.json

solana-keygen pubkey ~/solana-wallets/alice.json

solana-keygen pubkey ~/.config/solana/id.json
#+end_src

*** Set Alice's wallet as the default wallet

#+begin_src shell
solana config set -k ~/solana-wallets/alice.json

## check the default wallet
solana address
#+end_src


*** Wallet operations

#+begin_src shell
## check balance
solana balance

## airdrop 2 SOLs
solana airdrop 2

## check balance of Bob's walltet
solana balance $bobs_public_key

## airdrop a SOL to Bob's wallet
solana airdrop 1 $bobs_public_key
#+end_src


** A "Hello world!" Solana program

*** Create a library

#+begin_src shell
cargo new --lib solana_rust_demo
cd solana_rust_demo
#+end_src

*** Add the solana_program crate

#+begin_src shell
cargo add solana-program
#+end_src

*** Update the TOML file

#+begin_src rust
[lib]
name = "solana_rust_demo"
crate-type = ["cdylib", "lib"]
#+end_src

*** A "Hello world!" Solana program

#+begin_src rust
// lib.rs

use solana_program::{
    account_info::AccountInfo,
    entrypoint,
    entrypoint::ProgramResult,
    pubkey::Pubkey,
    msg,
};

entrypoint!(process_instruction);

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8]
) -> ProgramResult {
    msg!("Hello, world!");
    Ok(())
}
#+end_src

*** install cargo-build-bpf

#+begin_src shell
# it might fail, but it does not matter
cargo-build-bpf

mkdir -p ~/solana-release/bin/sdk/sbf/dependencies
wget -c https://github.com/Snaipe/Criterion/releases/download/v2.3.3/criterion-v2.3.3-linux-x86_64.tar.bz2 -O ~/solana-release/bin/sdk/sbf/dependencies
cd ~/solana-release/bin/sdk/sbf/dependencies
mkdir -p criterion
tar --strip-components 1 -xjf criterion-v2.3.3-linux-x86_64.tar.bz2 -C criterion

wget -c https://github.com/anza-xyz/platform-tools/releases/download/v1.41/platform-tools-linux-x86_64.tar.bz2 -O ~/solana-release/bin/sdk/sbf/dependencies
cd ~/solana-release/bin/sdk/sbf/dependencies
mkdir -p platform-tools
tar xjf platform-tools-linux-x86_64.tar.bz2 -C platform-tools
#+end_src

#+RESULTS:

*** Build the Solana program

#+begin_src shell
cd solana_rust_demo
cargo-build-bpf
#+end_src

*** Deploy the Solana program

#+begin_src shell
solana program deploy ./target/deploy/solana_rust_demo.so
#+end_src

*** Show all deployed programs

#+begin_src shell
solana program show --programs
#+end_src

*** View a program

#+begin_src shell
solana account $program_id
solana program show $program_id
#+end_src
