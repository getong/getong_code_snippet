* rust poem code reading

** WrappedAcceptor

#+begin_src rust
struct WrappedAcceptor<T: Acceptor>(T);

#[async_trait::async_trait]
impl<T: Acceptor> Acceptor for WrappedAcceptor<T> {
    type Io = BoxIo;

    fn local_addr(&self) -> Vec<LocalAddr> {
        self.0.local_addr()
    }

    async fn accept(&mut self) -> IoResult<(Self::Io, LocalAddr, RemoteAddr, Scheme)> {
        self.0
            .accept()
            .await
            .map(|(io, local_addr, remote_addr, scheme)| {
                (BoxIo::new(io), local_addr, remote_addr, scheme)
            })
    }
}

/// Wrap the acceptor in a `Box`.
fn boxed(self) -> BoxAcceptor
where
  Self: Sized + 'static,
{
  Box::new(WrappedAcceptor(self))
}

let mut acceptor = match listener {
  Either::Listener(listener) => listener.into_acceptor().await?.boxed(),
  Either::Acceptor(acceptor) => acceptor.boxed(),
};

loop {
  tokio::select! {
    res = acceptor.accept() => {
      if let Ok((socket, local_addr, remote_addr, scheme)) = res {
        alive_connections.fetch_add(1, Ordering::Release);
#+end_src
