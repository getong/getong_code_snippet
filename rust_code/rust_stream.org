* rust stream
:PROPERTIES:
:CUSTOM_ID: rust-stream
:END:
** AsyncRead and AsyncWrite
:PROPERTIES:
:CUSTOM_ID: asyncread-and-asyncwrite
:END:
#+begin_example
use futures::prelude::*;
use runtime::fs::File;

let f = file::create("foo.txt").await?; // create a file
f.write_all(b"hello world").await?;     // write data to the file (AsyncWrite)

let f = file::open("foo.txt").await?; // open a file
let mut buffer = Vec::new();          // init the buffer to read the data into
f.read_to_end(&mut buffer).await?;    // read the whole file (AsyncRead)
#+end_example

** Streams and Roles
:PROPERTIES:
:CUSTOM_ID: streams-and-roles
:END:
让我们首先列举可以在典型系统中表达的各种流：

source：可以生成数据的流 Sink：可以消费数据的流
Through：消费数据，对其进行操作然后生成新数据的流
Duplex：流可以生成数据，也可以独立的消费数据 copy from
[[https://zhuanlan.zhihu.com/p/70247995][Rust流(Streams)]]

** rust tokio trait bounds were not satisfied on forward method
:PROPERTIES:
:CUSTOM_ID: rust-tokio-trait-bounds-were-not-satisfied-on-forward-method
:END:

#+begin_quote

#+begin_quote

#+begin_quote
The most telling lines of that error message are the following:

#+end_quote

#+end_quote

#+end_quote

| doesn't satisfy =_: warp::Stream= | doesn't satisfy
=tokio::sync::mpsc::UnboundedReceiver<_>: StreamExt= The forward method
is defined in the StreamExt trait; due to a blanket implementation,
anything that implements Stream also implements StreamExt. However, as
of Tokio v1.6.0, UnboundedReceiver no longer implements Stream. The
documentation instead states:

This receiver can be turned into a Stream using UnboundedReceiverStream.

Hence:

let (client_ws_sender, mut client_ws_rcv) = ws.split(); let
(client_sender, client_rcv) = mpsc::unbounded_channel(); let client_rcv
= UnboundedReceiverStream::new(client_rcv); // <-- this

tokio::task::spawn(client_rcv.forward(client_ws_sender).map(|result| {
if let Err(e) = result { eprintln!("error sending websocket msg: {}",
e); } }));

copy from
[[https://stackoverflow.com/questions/67602278/rust-tokio-trait-bounds-were-not-satisfied-on-forward-method][rust
tokio trait bounds were not satisfied on forward method]]


** async_stream macro

stream!返回一个实现Stream的匿名类型，Stream::Item是yield值的类型；
try_stream类似，不过Stream::Item是Result<T, Error>，支持?语法，使用方式大致如下：

#+begin_src rust
fn zero_to_three() -> impl Stream<Item = u32> {
    stream! {
        for i in 0..3 {
            yield i;
        }
    }
}

fn bind_and_accept(addr: SocketAddr)
    -> impl Stream<Item = io::Result<TcpStream>>
{
    try_stream! {
        let mut listener = TcpListener::bind(&addr)?;
        loop {
            let (stream, addr) = listener.accept().await?;
            println!("received on {:?}", addr);
            yield stream;
        }
    }
}
#+end_src
copy from [[https://zhuanlan.zhihu.com/p/266269521][Rust Async: async-stream源码分析]]

** stream for_each method

#+begin_src rust
for await item in stream { /* process item */ }

while let Some(item) = stream.next().await { /* process item */ }

async fn batch_job(db: &Database) {
    let work = run_query(db, FIND_WORK_QUERY).await;
    for item in work {
        let result = run_query(db, work_query(item)).await;
        upload_result(result).await;
    }
}

async fn run_query(db: &Database, query: Query) -> Vec<Row> {
    let conn = db.connect().await;
    conn.select_query(query).await
}

async fn batch_job(db: &Database) {
    let work = run_query(db, FIND_WORK_QUERY).await;
    let work_queries = stream::iter(work)
        .map(|item| run_query(db, work_query(item)))
        .buffered(5);
    for await result in work_queries {
        upload_result(result).await;
    }
}

// change to be
async fn batch_job(db: &Database) {
    let work = run_query(db, FIND_WORK_QUERY).await;
    let work_queries = stream::iter(work)
        .map(|item| run_query(db, work_query(item)))
        .buffered(5);
    work_queries.for_each(async |result| {
        upload_result(result).await;
    }).await;
}
#+end_src

copy from [[https://tmandry.gitlab.io/blog/posts/for-await-buffered-streams/][`for await` and the battle of buffered streams]]


** use channel as stream

#+begin_src rust
use super::handler::CtlHandler;
use crate::{ctl_gateway::server::MgrReceiver,
            manager::{action::ActionSender,
                      ManagerState}};
use futures::{channel::oneshot,
              future::FutureExt,
              stream::{Stream,
                       StreamExt},
              task::{Context,
                     Poll}};
use log::{error,
          info};
use std::{pin::Pin,
          sync::Arc};

pub struct CtlAcceptor {
    /// Communication channel from the control gateway server. User
    /// interactions are received there and then sent here into the
    /// `CtlAcceptor` future for further processing.
    mgr_receiver:     MgrReceiver,
    /// Reference to the Supervisor's main state. This is passed into
    /// handlers that need to access, e.g., what services are running,
    /// etc.
    state:            Arc<ManagerState>,
    /// Signaling channel for the intention to shut down. A message
    /// received on this channel will cause the `CtlAcceptor` future
    /// stream to terminate.
    shutdown_trigger: oneshot::Receiver<()>,
    /// Communication channel back into the main Supervisor loop. This
    /// is passed into any generated command handlers as a way to
    /// send actions into the Supervisor.
    action_sender:    ActionSender,
}

impl CtlAcceptor {
    pub fn new(state: Arc<ManagerState>,
               mgr_receiver: MgrReceiver,
               shutdown_trigger: oneshot::Receiver<()>,
               action_sender: ActionSender)
               -> Self {
        CtlAcceptor { mgr_receiver,
                      state,
                      shutdown_trigger,
                      action_sender }
    }
}

impl Stream for CtlAcceptor {
    type Item = CtlHandler;

    fn poll_next(mut self: Pin<&mut Self>, cx: &mut Context) -> Poll<Option<Self::Item>> {
        match self.shutdown_trigger.poll_unpin(cx) {
            Poll::Ready(Ok(())) => {
                info!("Signal received; stopping CtlAcceptor");
                Poll::Ready(None)
            }
            Poll::Ready(Err(e)) => {
                error!("Error polling CtlAcceptor shutdown trigger: {}", e);
                Poll::Ready(None)
            }
            Poll::Pending => {
                match futures::ready!(self.mgr_receiver.poll_next_unpin(cx)) {
                    Some(cmd) => {
                        let task =
                            CtlHandler::new(cmd, self.state.clone(), self.action_sender.clone());
                        Poll::Ready(Some(task))
                    }
                    None => Poll::Ready(None),
                }
            }
        }
    }
}
#+end_src

copy from [[https://github.com/habitat-sh/habitat][habitat]]

First listen to check shutdown_trigger.
If not, poll the next CtlCommand, each CtlCommand will be handled with CtlHandler.