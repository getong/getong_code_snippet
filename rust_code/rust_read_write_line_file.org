* rust read write line file
:PROPERTIES:
:CUSTOM_ID: rust-read-write-line-file
:END:
** rust read line file
:PROPERTIES:
:CUSTOM_ID: rust-read-line-file
:END:
#+begin_src rust
use std::{
    fs::File,
    io::{prelude::*, BufReader},
    path::Path,
};

fn lines_from_file(filename: impl AsRef<Path>) -> Vec<String> {
    let file = File::open(filename).expect("no such file");
    let buf = BufReader::new(file);
    buf.lines()
        .map(|l| l.expect("Could not parse line"))
        .collect()
}

// ---

fn main() {
    let lines = lines_from_file("/etc/hosts");
    for line in lines {
        println!("{:?}", line);
    }
}
#+end_src

copy from
[[https://stackoverflow.com/questions/30801031/read-a-file-and-get-an-array-of-strings][Read
a file and get an array of strings]]

** rust write line file
:PROPERTIES:
:CUSTOM_ID: rust-write-line-file
:END:
#+begin_src rust
use std::fs;

fn main() {
    let v = vec![
        String::from("aaa"),
        String::from("bbb"),
        String::from("ccc")];

    fs::write("file", v.join("\n")).expect("");
}
#+end_src

copy from
[[https://stackoverflow.com/questions/72957085/writing-a-vecstring-to-files-using-stdfswrite/72957754][Writing
a Vec to files using std::fs::write]]

** rewind file
:PROPERTIES:
:CUSTOM_ID: rust-write-line-file
:END:

#+begin_src rust
use std::io::{self, Seek, SeekFrom};
use std::fs::File;

fn main() -> io::Result<()> {
    let mut file = File::open("foo.bar")?;
    file.seek(SeekFrom::Start(0))?;
    Ok(())
}
#+end_src

From version 1.55.0
#+begin_src rust
use std::io::{self, Seek};
use std::fs::File;

fn main() -> io::Result<()> {
    let mut file = File::open("foo.bar")?;
    file.rewind()?;
    Ok(())
}
#+end_src

copy from [[https://stackoverflow.com/questions/58151676/how-to-rewind-the-file-pointer-in-rust][How to rewind the file pointer in rust]]
