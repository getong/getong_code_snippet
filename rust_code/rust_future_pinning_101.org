* rust future pinning 101
#+begin_quote
A list of best practices from tomaka.

I thought it would be useful to people outside of Parity, too.
He allowed me to post it here and share all the info with you.

For people who are not super confident within Futures and pinning (which includes me), here's a 101 guide:

As a reminder, the way it works is: you create a Future, move it around if you want, then you pin it, then you start polling it. If a Future implements Unpin then you can pin it, poll it, unpin it, move it, pin it again, poll it, unpin it, move it, and so on. If a Future does not implement Unpin, then you need to pin it once and keep it pinned forever.

It almost never makes sense to use Box<dyn Future> rather than Pin<Box<dyn Future>>. Use Box::pin(fut) rather than Box::new(fut).

Returning -> impl Future + Unpin from a function is okay-ish, but means that for instance that you can't use async/await within the function unless you put Box::pin around your async block (which is an overhead). I think it's preferable for the caller (rather than the callee) to decide how the returned Future should be pinned. By enforcing that Future implement Unpin, I can totally imagine situations where we end up boxing a future multiple times because of misunderstandings.

If you're writing a struct that wraps around a Future (e.g. similar to the combinators that are in the futures crate), you can use the pin-utils crate to safely turn a Pin<&mut MyStruct> into a Pin<&mut FutureThatIsInsideMyStruct>. Don't try too hard though. Worst case scenario, just put a Pin<Box<>> around the culprit.

On that topic: pinning a Future doesn't mean you have to turn it into a Pin<Box<dyn Future>>. It can also be Pin<Box<F>> if you know what F is.

You can pin a Future to the stack using futures::pin_mut!. I've found that particularly useful in the context of future::select within async blocks. This function requires its parameters to be Unpin, and that can be solved by passing pinned versions of your futures.

Everything above is applicable to Stream and Sink. For AsyncRead/AsyncWrite it is a bit more debatable. Since you generally want to pass around references to AsyncRead/AsyncWrite-implementing objects so that functions can read/write a bit and then return, it makes sense to me to require + Unpin on them. I'm very uncertain about this point.

If you write struct Foo<T>, the compiler automatically generates impl<T: Unpin> Unpin for Foo<T>. This means that you sometimes need to manually add impl<T> Unpin for Foo<T> {}. As long as you're not using unsafe code, it's never wrong to write this. (this problem is similar to when you're deriving Clone on a struct that contains an Arc<T>, and the compiler enforces T: Clone for no reason).
#+end_quote

copy from [[https://www.reddit.com/r/rust/comments/eo7u4o/futures_pinning_101/][Futures & Pinning 101]]