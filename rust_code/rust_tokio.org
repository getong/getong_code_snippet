* rust tokio

** tutorial
#+begin_src sh
cargo install mini-redis
cargo new my-redis
cd my-redis
#+end_src

Add dependencies to `Cargo.toml`

#+begin_src rust
tokio = { version = "0.3", features = ["full"] }
mini-redis = "0.3"
#+end_src


Write the code

#+begin_src rust
use mini_redis::{client, Result};

#[tokio::main]
pub async fn main() -> Result<()> {
    // Open a connection to the mini-redis address.
    let mut client = client::connect("127.0.0.1:6379").await?;

    // Set the key "hello" with value "world"
    client.set("hello", "world".into()).await?;

    // Get key "hello"
    let result = client.get("hello").await?;

    println!("got value from the server; result={:?}", result);

    Ok(())
}
#+end_src

run the mini-redis-server

#+begin_src shell
mini-redis-server
#+end_src

#+begin_src shell
cargo run
#+end_src

copy from [[https://tokio.rs/tokio/tutorial/hello-tokio][Hello Tokio]]

** code reading

The code is copy from [[https://zhuanlan.zhihu.com/p/107820568][深入浅出Rust异步编程之Tokio]]

#+begin_src rust
pub trait Future {

    type Item;

    type Error;


    fn poll(&mut self) -> Poll<Self::Item, Self::Error>;
}
#+end_src

假设一个future要做这样的功能，从TCP数据流读取数据并计算自己读了多少个字节并进行回调。那用代码表示：

#+begin_src rust
struct MyTcpStream {
    socket: TcpStream,
    nread: u64,
}

impl Future for MyTcpStream {
    type Item =u64;
    type Error = io::Error;

   fn poll(&mut self) -> Poll<Item, io::Error> {
        let mut buf = [0;10];
        loop {
            match self.socket.read(&mut buf) {
                Async::Ready(0) => return Async::Ready(self.nread),
                Async::Ready(n) => self.nread += n,
                Async::NotReady => return Async::NotReady,
            }
        }
    }
}
#+end_src

每次调用poll方法，MyTcpStream都会调用socket的read方法(这里的TcpStream本身也是一个future，read内部也是调用poll方法)，当read返回为Async::NotReady的时候，调度器会将当前的Task休眠，如果返回Async::Read(n)表示读到了数据，则给计数器加对应的数，如果返回Async::Ready(0)，则表示TcpStream里有的数据已经读完，就将计数器返回。

为了方便大家使用，future库包提供了很多组合子，以AndThen组合子为例：

#+begin_src rust
enum AndThen<A,F> {
    First(A, F),
}

fn poll(&mut self) -> Async<Item> {
   match fut_a.poll() {
        Async::Ready(v) => Async::Ready(f(v)),
        Async::NotReady => Async::NotReady,
    }
}
#+end_src

这里AndThen枚举，First有两个值，其中A是一个future，F是一个闭包，AndThen实现的poll方法，就是假如调用future_a的poll方法有返回值，那么就调用闭包，并将其返回值包装为Async::Ready返回，如果poll的返回值是Async::NotReady则同样返回Async::NotReady。有了这个AndThen方法，通过组合子函数（比如and_then实际上是将上一个future和闭包传入生成一个AndThen future），我们就可以实现一些复杂逻辑：

#+begin_src rust
let f=MyTcpStream::connect(&remote_addr)
  .and_then(|num| {println!("already read %d",num);
  return num;}).and_then(|num| {
    process(num)
  });

tokio::spawn(f);
#+end_src

上面的代码就是建立Tcp连接，然后每次读数据，都通过第一个and_then打印日志，然后再通过第二个and_then做其他处理，tokio::spawn用于执行最终的future.
如果将MyTcpStream的poll实现改为：

#+begin_src rust
fn poll(&mut self) -> Poll<Item, io::Error> {
        let mut buf = [0;1024];
        let mut bytes = bytesMut::new();
        loop {
            match self.socket.read(&mut buf) {
                Async::Ready(0) => return Async::Ready(bytes.to_vec()),
                Async::Ready(n) => bytes.put(buf[0..n]),
                Async::NotReady => return Async::NotReady,
            }
        }
    }
#+end_src


这段代码主要是将socket中数据读出，然后包装为Async::Ready或者Async::NotReady供下一个future使用，我们就可以实现更复杂的逻辑，比如：

#+begin_src rust
MyTcpStream::connect(&remote_addr)
  .and_then(|sock| io::write(sock, handshake)) //这里发送handshake
  .and_then(|sock| io::read_exact(sock, 10)) // 这里读handshake的响应，假设handeshake很短
  .and_then(|(sock, handshake)| {  // 这个future做验证并发送请求
    validate(handshake);
    io::write(sock, request)
  })
  .and_then(|sock| io::read_exact(sock, 10))// 这里读取响应
  .and_then(|(sock, response)| { // 这里处理响应
    process(response)
  })
#+end_src

用taokio启动一个服务器，代码如下：

#+begin_src rust
let listener = TcpListener::bind(&addr).unwrap();

let server = listener.incoming().for_each(move |socket| {
    tokio::spawn(process(socket));
    Ok(())
}).map_err(|err| {
        println!("accept error = {:?}", err);
});

tokio::run(server);
#+end_src


上面的代码首先生成一个TcpListener，listener的incomming和foreach会将连进来的tcp连接生成TcpStream（即代码中的socket），针对每一个连接启动一个用户态线程处理。

Tokio本身是基于Mio和future库来实现的，其主要包含两个主要的大功能部分（本文不是对源码进行分析，Tokio不同版本之间的差异也较大，只是进行原理说明），reactor和scheduler。

scheduler负责对task进行调度，上文所展示的task调度部分功能就是由scheduler负责，reactor部分主要是负责事件触发，比如网络事件，文件系统事件，定时器等等。

#+begin_src rust
#[tokio::main]
pub async fn main() -> Result<(), Box<dyn Error>> {
    let mut stream = TcpStream::connect("127.0.0.1:6142").await?;
    println!("created stream");
    let result = stream.write(b"hello world\n").await;
    println!("wrote to stream; success={:?}", result.is_ok());
    Ok(())
}
#+end_src


[[https://zhuanlan.zhihu.com/p/244047486][Rust 的异步函数与 Tokio.rs]]


** rust Future trait

#+begin_src rust
pub trait Future {
    type Item;
    type Error;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error>;
}
#+end_src


** Feature flags

#+begin_src rust
full: Enables all Tokio public API features listed below except test-util.
rt: Enables tokio::spawn, the basic (current thread) scheduler, and non-scheduler utilities.
rt-multi-thread: Enables the heavier, multi-threaded, work-stealing scheduler.
io-util: Enables the IO based Ext traits.
io-std: Enable Stdout, Stdin and Stderr types.
net: Enables tokio::net types such as TcpStream, UnixStream and UdpSocket, as well as (on Unix-like systems) AsyncFd
time: Enables tokio::time types and allows the schedulers to enable the built in timer.
process: Enables tokio::process types.
macros: Enables #[tokio::main] and #[tokio::test] macros.
sync: Enables all tokio::sync types.
signal: Enables all tokio::signal types.
fs: Enables tokio::fs types.
test-util: Enables testing based infrastructure for the Tokio runtime.
Note: AsyncRead and AsyncWrite traits do not require any features and are always available.
#+end_src


** Modules

#+begin_src rust
fs	fsAsynchronous file and standard stream adaptation.
io	Traits, helpers, and type definitions for asynchronous I/O functionality.
net	TCP/UDP/Unix bindings for tokio.
process	processAn implementation of asynchronous process management for Tokio.
runtime	rtThe Tokio runtime.
signal	signalAsynchronous signal handling for Tokio
stream	Due to the Stream trait’s inclusion in std landing later than Tokio’s 1.0 release, most of the Tokio stream utilities have been moved into the tokio-stream crate.
sync	syncSynchronization primitives for use in asynchronous contexts.
task	Asynchronous green-threads.
time	timeUtilities for tracking time.
#+end_src

** UdpSocket

#+begin_src rust
let addr = SocketAddrV4::New(Ipv4Addr:new(0,0,0,0), port);
UdpSocket::bind(addr).await;

socket.send_to(b"hello world", &packet.dest()).await;
#+end_src

** send and recv method return a Future instance

#+begin_src rust
let (tx, mut rx) = mpsc::channel(32);

tx.send("sending from first handle").await;
let Some(message) = rx.recv().await;
#+end_src


** tokio reference or book
[[https://tokio.rs/][tokio]]

[[https://zhuanlan.zhihu.com/p/104098627][深入了解 Rust 异步开发模式]]

[[https://github.com/tony612/tokio-internals][tokio-internals]]

[[https://github.com/fujita/tokio-reuseport][tokio-reuseport]]

[[https://medium.com/@fujita.tomonori/scalable-server-design-in-rust-with-tokio-4c81a5f350a3][Scalable server design in Rust with Tokio]]


** tokio sync method
#+begin_quote
通常来说，有以下几种基本的同步原语，这些也是tokio所提供的：

Mutex: 互斥锁，任务要执行某些操作时，必须先申请锁，只有申请到锁之后才能执行操作，否则就等待
RwLock: 读写锁，类似于互斥锁，但粒度更细，区分读操作和写操作，可以同时存在多个读操作，但写操作必须独占锁资源
Notify: 任务通知，用于唤醒正在等待的任务，使其进入就绪态等待调度
Barrier: 屏障，多个任务在某个屏障处互相等待，只有这些任务都达到了那个屏障点，这些任务才都继续向下执行
Semaphore: 信号量(信号灯)，限制同时执行的任务数量，例如限制最多只有20个线程(或tokio的异步任务)同时执行
#+end_quote

copy from [[https://rust-book.junmajinlong.com/ch100/04_task_communication_and_sync.html][tokio task的通信和同步(1): 简介]]

** axum use tokio runtime
#+begin_src rust
use axum::{Router, Server};
use std::{net::SocketAddr, sync::Arc, time::Duration};
use tokio::{runtime::Handle, select, sync::Barrier, time::sleep};

#[tokio::main(flavor = "multi_thread")]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Create the socket & the router
    let socket = SocketAddr::new("0.0.0.0".parse()?, 12678);
    let router = Router::new();
    /* many routes */

    // wait for ctrl-c: can be given to multiple tasks
    let barrier = Arc::new(Barrier::new(2));

    // Start the cache manager thread
    let blocking_task = {
        let barrier = barrier.clone();
        Handle::current().spawn_blocking(move || {
            Handle::current().block_on(async move {
                // ...

                select! {
                    _ = sleep(Duration::from_secs(3)) => println!("sleep done"),
                    _ = barrier.wait() => println!("server closed"),
                }
            });
        })
    };

    // Start the Axum HTTP server
    Server::bind(&socket)
        .serve(router.into_make_service())
        .with_graceful_shutdown(async move {
            tokio::signal::ctrl_c()
                .await
                .expect("Failed to catch the SIGINT signal");
            barrier.wait().await;
        })
        .await?;

    // ensure the blocking_task is finished
    blocking_task.await?;

    Ok(())
}
#+end_src

The key point is to tell the task to finish before the runtime shuts down. Otherwise, you'll get the runtime worker's panic.

copy from [[https://users.rust-lang.org/t/tokio-runtime-panics-at-shutdown/93651/3][Tokio runtime panics at shutdown]]

The axum does not spawn a task, only use tokio runtime:
#+begin_src rust
pin_project! {
    /// A listening HTTP server that accepts connections in both HTTP1 and HTTP2 by default.
    ///
    /// `Server` is a `Future` mapping a bound listener with a set of service
    /// handlers. It is built using the [`Builder`](Builder), and the future
    /// completes when the server has been shutdown. It should be run by an
    /// `Executor`.
    pub struct Server<I, S, E = Exec> {
        #[pin]
        incoming: I,
        make_service: S,
        protocol: Http_<E>,
    }
}

#[cfg_attr(docsrs, doc(cfg(any(feature = "http1", feature = "http2"))))]
impl<I, IO, IE, S, B, E> Future for Server<I, S, E>
where
    I: Accept<Conn = IO, Error = IE>,
    IE: Into<Box<dyn StdError + Send + Sync>>,
    IO: AsyncRead + AsyncWrite + Unpin + Send + 'static,
    S: MakeServiceRef<IO, Body, ResBody = B>,
    S::Error: Into<Box<dyn StdError + Send + Sync>>,
    B: HttpBody + 'static,
    B::Error: Into<Box<dyn StdError + Send + Sync>>,
    E: ConnStreamExec<<S::Service as HttpService<Body>>::Future, B>,
    E: NewSvcExec<IO, S::Future, S::Service, E, NoopWatcher>,
{
    type Output = crate::Result<()>;

    fn poll(self: Pin<&mut Self>, cx: &mut task::Context<'_>) -> Poll<Self::Output> {
        self.poll_watch(cx, &NoopWatcher)
    }
}

#+end_src
