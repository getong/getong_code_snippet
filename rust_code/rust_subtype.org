* rust subtype
:PROPERTIES:
:CUSTOM_ID: rust-subtype
:END:
** doc reference
:PROPERTIES:
:CUSTOM_ID: doc-reference
:END:
[[https://doc.rust-lang.org/nomicon/subtyping.html][Subtyping and
Variance]]
[[https://doc.rust-lang.org/nomicon/phantom-data.html][PhantomData]]
[[https://zhuanlan.zhihu.com/p/41814387][逆变、协变与子类型，以及Rust]]
[[https://iovxw.net/p/phantomdata-magic/][PhantomData 黑魔法]]
[[https://stackoverflow.com/questions/74266349/subtyping-and-variance-mut-invariant-violate-error-in-rust][Subtyping
and Variance (&mut invariant) violate error in rust]]

** code explaination
:PROPERTIES:
:CUSTOM_ID: code-explaination
:END:
#+begin_src rust
fn main() {
    struct Foo<'a, T> {
        a: &'a mut T,
    }

    let p1 = 1;
    let mut p2 = &p1;
    {
        let p3 = 2;
        let mut p4 = &p3;
        let mut f = Foo {
            a: &mut p4,
        };
        f.a = &mut p2;
        println!("{}", f.a);
    }
    println!("{}", p2);
}
#+end_src

#+begin_quote

#+begin_quote

#+begin_quote
The core of the problem is that f has a single fixed type Foo<'a, &'b
i32> and by the variance rules for mutable references, &'b i32 is
invariant and thus 'b is invariant.

#+end_quote

#+end_quote

#+end_quote

However, f is used with T as two separate lifetimes via p2 and p4. How
does the compiler choose? Well it cannot shorten the lifetime used by p2
into that of p4, because then p2 can be modified to reference something
of a smaller lifetime and thus p2 can dangle at the last println!
(consider what would happen if you added *f.a = &p3; right after
assigning f.a to &mut p2). The only option is for the lifetime used by
p4 to be widened to match p2.

Since p4 must match the lifetime of p2, the assignment from p3 is now
too short, so you get the error you see.

The second example works because the lifetime used by p2 does not extend
after the println! in the inner block, so p3 can satisfy that lifetime.

#+begin_src rust
fn main() {
    struct Foo<'a, T> {
        a: &'a mut T,
    }

    let p1 = 1;
    let mut p2 = &p1;
    {
        let p3 = 2;
        let mut p4 = &p3;
        let mut f = Foo {
            a: &mut p4,
        };
        f.a = &mut p2;
        println!("{}", f.a);
    }
    // println!("{}", p2);
}
#+end_src

** variable invariant might be move out of scope, and free the memory.
:PROPERTIES:
:CUSTOM_ID: variable-invariant-might-be-move-out-of-scope-and-free-the-memory.
:END:


** 定义
#+begin_quote
假设1 C<T>是一个泛型类或接口, T是类型参数.

假设2 类型Dog是Animal的子类型.

定义1 Covariance/Covariant译作协变:
如果C<Dog>是C<Animal>的子类型, 那么C<T>对T协变.

定义2 Contravariance/Contravariant译作逆变:
如果C<Animal>是C<Dog>的子类型, 那么C<T>对T逆变.

定义3 Invariance/Invariant译作不变, 或译作抗变:
C<T>对T既不是协变也不是逆变, 那么C<T>对T不变.
#+end_quote

copy from [[https://rustcc.cn/article?id=698f0ff0-c96d-4686-89d4-af71f5656051][代码写明 Rust 中的泛型型变]]
also see [[https://waruto.top/posts/rust-lifetime-variance/][Rust生命周期与变形]]

#+begin_quote
Vec<T> 以及所有其他拥有指针和集合遵循与 Box<T> 相同的逻辑
Cell<T> 以及所有其他内部可变性类型遵循与 UnsafeCell<T> 相同的逻辑
具有内部可变性的 UnsafeCell<T> 使其具有与 &mut T 相同的协变属性
*const T 遵循 &T 的逻辑
*mut T 遵循 &mut T（或 UnsafeCell<T>）的逻辑
#+end_quote
also see [[https://nomicon.purewhite.io/subtyping.html][子类型和协变]]

** example
#+begin_src rust
// compile error
fn invariant<'a: 'b, 'b, 'c>(
    sub: &'c mut Vec<&'a String>,
    sup: &'c mut Vec<&'b String>,
) -> &'c mut Vec<&'b String> {
    sub
}

// compile ok
fn covariant<'a: 'b, 'b, 'c>(
    sub: &'c Vec<&'a String>,
    sup: &'c Vec<&'b String>,
) -> &'c Vec<&'b String> {
    sub
}
#+end_src

explaination
#+begin_quote
在两个函数的泛型参数中，显式标注了'a : 'b；
由于&'a T对'a covariant，所以&'a String : &'b String；
由于Vec<T>对T covariant，所以Vec<&'a String> : Vec<&'b String>；
由于&'a T对 T 是 covariant，所以&'c Vec<&'a String> : &'c Vec<&'b String>；
所以在 covariant 函数中，当函数要求返回&'c Vec<&'b String>时，可以直接返回&'c Vec<&'a String>；
但是&'c mut T对 T 是 invariant，&'c mut Vec<&'a String>与``&‘c mut Vec<&‘b String>`间没有子类型关系，所以在 invariant 函数中无法再这么做。
#+end_quote

#+begin_src rust
struct ContraVariant<Mixed> {
    f: fn(Mixed),
}

fn test<'a>(
    a: &mut ContraVariant<&'a i32>,
    b: &mut ContraVariant<&'static i32>,
    f1: fn(&'a i32),
    f2: fn(&'static i32),
) {
    a.f = f1;
    a.f = f2;
    b.f = f1;
    b.f = f2;
}
#+end_src

#+begin_quote
可以看到，四个赋值语句中，只有a.f = f2失败了。

fn(T)对T contravariant，&'static i32 : &'a i32，所以 fn(&'a i32) : fn(&'static i32)；
a.f类型为fn(&'a i32)，f2类型为fn(&'static i32)；
a.f = f2，相当于把父类型变量赋值给了子类型，类型不匹配，失败了。
#+end_quote

copy from [[https://waruto.top/posts/rust-lifetime-variance/][Rust生命周期与变形]]