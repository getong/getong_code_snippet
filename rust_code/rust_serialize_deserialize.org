* rust deserialize deserialize

** bincode

#+begin_src rust
use bincode::{config, Decode, Encode};

#[derive(Encode, Decode, PartialEq, Debug)]
struct Entity {
  x: f32,
  y: f32,
}

#[derive(Encode, Decode, PartialEq, Debug)]
struct World(Vec<Entity>);

fn main() {
  let config = config::standard();

  let world = World(vec![Entity { x: 0.0, y: 4.0 }, Entity { x: 10.0, y: 20.5 }]);

  let encoded: Vec<u8> = bincode::encode_to_vec(&world, config).unwrap();

  // The length of the vector is encoded as a varint u64, which in this case gets collapsed to a single byte
  // See the documentation on varint for more info for that.
  // The 4 floats are encoded in 4 bytes each.
  assert_eq!(encoded.len(), 1 + 4 * 4);

  let (decoded, len): (World, usize) = bincode::decode_from_slice(&encoded[..], config).unwrap();

  assert_eq!(world, decoded);
  assert_eq!(len, encoded.len()); // read all bytes

#+end_src

** serde

#+begin_src rust
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug)]
struct MyStruct {
  field1: String,
  field2: i32,
}

async fn handle_client(mut socket: TcpStream) -> Result<(), Box<dyn Error>> {
  let mut buffer = vec![0; 1024];
  let n = socket.read(&mut buffer).await?;
  let received_json = String::from_utf8(buffer[..n].to_vec())?;
  let received_struct: MyStruct = serde_json::from_str(&received_json)?;

  println!("Server Received: {:?}", received_struct);

  // Optionally, send a response back
  let response_struct = MyStruct {
    field1: "Response".to_string(),
    field2: 42,
  };
  println!("server send {:?}", response_struct);
  let response_json = serde_json::to_string(&response_struct)?;
  socket.write_all(response_json.as_bytes()).await?;

  Ok(())
}

#+end_src

** raw code

#+begin_src rust
pub async fn start_main(
  group_ids: Vec<GroupId>,
  p2p_config: P2pConfig,
  out_send: Sender<ReceiveMessage>,
  mut self_recv: Receiver<SendMessage>,
  rpc_send: Option<Sender<RpcSendMessage>>,
  key: Option<PeerKey>,
) -> Result<PeerId> {
  // start chamomile network & inner rpc.
  let res1 = if let Some(key) = key {
    chamomile_start_with_key(p2p_config, key).await
  } else {
    chamomile_start(p2p_config).await
  };

  let (peer_id, p2p_send, mut p2p_recv) = res1?;

  debug!("chamomile & jsonrpc service started");
  let my_groups = Arc::new(RwLock::new(group_ids));
  let my_groups_1 = my_groups.clone();

  // handle chamomile send msg.
  let listen_task = tokio::spawn(async move {
    // if group's inner message, from_group in our groups.
    // if layer's message,       from_group not in our groups.

    while let Some(message) = p2p_recv.recv().await {
      match message {
        ChamomileReceiveMessage::StableConnect(peer, mut data) => {
          if data.len() < GROUP_BYTES_LENGTH * 2 {
            continue;
          }
          let mut fgid_bytes = [0u8; GROUP_BYTES_LENGTH];
          let mut tgid_bytes = [0u8; GROUP_BYTES_LENGTH];
          fgid_bytes.copy_from_slice(data.drain(..GROUP_BYTES_LENGTH).as_slice());
          tgid_bytes.copy_from_slice(data.drain(..GROUP_BYTES_LENGTH).as_slice());
          let fgid = GroupId::from_be_bytes(fgid_bytes);
          let tgid = GroupId::from_be_bytes(tgid_bytes);

          let group_lock = my_groups.read().await;
          if group_lock.len() == 0 {
            continue;
          }

          if fgid == tgid && group_lock.contains(&fgid) {
            drop(group_lock);
            let _ = group_handle_connect(&fgid, &out_send, peer.into(), data).await;
          } else {
            drop(group_lock);
            // layer handle it.
            #[cfg(any(feature = "std", feature = "full"))]
            let _ = layer_handle_connect(fgid, tgid, &out_send, peer.into(), data)
              .await;
          }
        }
        ChamomileReceiveMessage::ResultConnect(peer, mut data) => {
          if data.len() < GROUP_BYTES_LENGTH * 2 {
            continue;
          }
          let mut fgid_bytes = [0u8; GROUP_BYTES_LENGTH];
          let mut tgid_bytes = [0u8; GROUP_BYTES_LENGTH];
          fgid_bytes.copy_from_slice(data.drain(..GROUP_BYTES_LENGTH).as_slice());
          tgid_bytes.copy_from_slice(data.drain(..GROUP_BYTES_LENGTH).as_slice());
          let fgid = GroupId::from_be_bytes(fgid_bytes);
          let tgid = GroupId::from_be_bytes(tgid_bytes);

          let group_lock = my_groups.read().await;
          if group_lock.len() == 0 {
            continue;
          }

          if fgid == tgid && group_lock.contains(&fgid) {
            drop(group_lock);
            let _ =
              group_handle_result_connect(&fgid, &out_send, peer.into(), data)
              .await;
          } else {
            drop(group_lock);
            // layer handle it.
            #[cfg(any(feature = "std", feature = "full"))]
            let _ = layer_handle_result_connect(
              fgid,
              tgid,
              &out_send,
              peer.into(),
              data,
            )
              .await;
          }
        }
        ChamomileReceiveMessage::StableResult(peer, is_ok, mut data) => {
          if data.len() < GROUP_BYTES_LENGTH * 2 {
            continue;
          }
          let mut fgid_bytes = [0u8; GROUP_BYTES_LENGTH];
          let mut tgid_bytes = [0u8; GROUP_BYTES_LENGTH];
          fgid_bytes.copy_from_slice(data.drain(..GROUP_BYTES_LENGTH).as_slice());
          tgid_bytes.copy_from_slice(data.drain(..GROUP_BYTES_LENGTH).as_slice());
          let fgid = GroupId::from_be_bytes(fgid_bytes);
          let tgid = GroupId::from_be_bytes(tgid_bytes);

          let group_lock = my_groups.read().await;
          if group_lock.len() == 0 {
            continue;
          }

          if fgid == tgid && group_lock.contains(&fgid) {
            drop(group_lock);
            let _ = group_handle_result(&fgid, &out_send, peer.into(), is_ok, data)
              .await;
          } else {
            drop(group_lock);
            // layer handle it.
            #[cfg(any(feature = "std", feature = "full"))]
            let _ = layer_handle_result(
              fgid,
              tgid,
              &out_send,
              peer.into(),
              is_ok,
              data,
            )
              .await;
          }
        }
        ChamomileReceiveMessage::StableLeave(peer) => {
          let group_lock = my_groups.read().await;
          for gid in group_lock.iter() {
            let _ = group_handle_leave(&gid, &out_send, peer).await;
            #[cfg(any(feature = "std", feature = "full"))]
            let _ = layer_handle_leave(*gid, &out_send, peer).await;
          }
          drop(group_lock);
        }
        ChamomileReceiveMessage::Data(peer_id, mut data) => {
          if data.len() < GROUP_BYTES_LENGTH * 2 {
            continue;
          }
          let mut fgid_bytes = [0u8; GROUP_BYTES_LENGTH];
          let mut tgid_bytes = [0u8; GROUP_BYTES_LENGTH];
          fgid_bytes.copy_from_slice(data.drain(..GROUP_BYTES_LENGTH).as_slice());
          tgid_bytes.copy_from_slice(data.drain(..GROUP_BYTES_LENGTH).as_slice());
          let fgid = GroupId::from_be_bytes(fgid_bytes);
          let tgid = GroupId::from_be_bytes(tgid_bytes);

          let group_lock = my_groups.read().await;
          if group_lock.len() == 0 {
            continue;
          }

          if fgid == tgid && group_lock.contains(&fgid) {
            drop(group_lock);
            let _ = group_handle_data(&fgid, &out_send, peer_id, data).await;
          } else {
            drop(group_lock);
            // layer handle it.
            #[cfg(any(feature = "std", feature = "full"))]
            let _ = layer_handle_data(fgid, tgid, &out_send, peer_id, data).await;
          }
        }
        ChamomileReceiveMessage::Stream(id, stream, mut data) => {
          if data.len() < GROUP_BYTES_LENGTH * 2 {
            continue;
          }
          let mut fgid_bytes = [0u8; GROUP_BYTES_LENGTH];
          let mut tgid_bytes = [0u8; GROUP_BYTES_LENGTH];
          fgid_bytes.copy_from_slice(data.drain(..GROUP_BYTES_LENGTH).as_slice());
          tgid_bytes.copy_from_slice(data.drain(..GROUP_BYTES_LENGTH).as_slice());
          let fgid = GroupId::from_be_bytes(fgid_bytes);
          let tgid = GroupId::from_be_bytes(tgid_bytes);

          let group_lock = my_groups.read().await;
          if group_lock.len() == 0 {
            continue;
          }

          if fgid == tgid && group_lock.contains(&fgid) {
            drop(group_lock);
            let _ = group_handle_stream(&fgid, &out_send, id, stream, data).await;
          } else {
            drop(group_lock);
            // layer handle it.
            #[cfg(any(feature = "std", feature = "full"))]
            let _ =
              layer_handle_stream(fgid, tgid, &out_send, id, stream, data).await;
          }
        }
        ChamomileReceiveMessage::Delivery(t, tid, is_ok, mut data) => {
          if data.len() < GROUP_BYTES_LENGTH * 2 {
            continue;
          }
          let mut fgid_bytes = [0u8; GROUP_BYTES_LENGTH];
          let mut tgid_bytes = [0u8; GROUP_BYTES_LENGTH];
          fgid_bytes.copy_from_slice(data.drain(..GROUP_BYTES_LENGTH).as_slice());
          tgid_bytes.copy_from_slice(data.drain(..GROUP_BYTES_LENGTH).as_slice());
          let fgid = GroupId::from_be_bytes(fgid_bytes);
          let tgid = GroupId::from_be_bytes(tgid_bytes);

          let group_lock = my_groups.read().await;
          if group_lock.len() == 0 {
            continue;
          }

          if fgid == tgid && group_lock.contains(&fgid) {
            drop(group_lock);
            let _ =
              group_handle_delivery(&fgid, &out_send, t.into(), tid, is_ok).await;
          } else {
            drop(group_lock);
            // layer handle it.
            #[cfg(any(feature = "std", feature = "full"))]
            let _ = layer_handle_delivery(
              tgid, // Assuming it is remote sended.
              fgid,
              &out_send,
              t.into(),
              tid,
              is_ok,
            )
              .await;
          }
        }
        ChamomileReceiveMessage::NetworkLost => {
          out_send
            .send(ReceiveMessage::NetworkLost)
            .await
            .map_err(|e| error!("Outside channel: {:?}", e));
        }
        ChamomileReceiveMessage::OwnConnect(peer) => {
          let assist_id = peer.assist;
          let mut new_peer: Peer = peer.into();
          new_peer.id = assist_id;
          out_send
            .send(ReceiveMessage::Own(RecvType::Connect(new_peer, vec![])))
            .await
            .map_err(|e| error!("Outside channel: {:?}", e));
        }
        ChamomileReceiveMessage::OwnLeave(peer) => {
          let assist_id = peer.assist;
          let mut new_peer: Peer = peer.into();
          new_peer.id = assist_id;
          out_send
            .send(ReceiveMessage::Own(RecvType::Leave(new_peer)))
            .await
            .map_err(|e| error!("Outside channel: {:?}", e));
        }
        ChamomileReceiveMessage::OwnEvent(aid, data) => {
          out_send
            .send(ReceiveMessage::Own(RecvType::Event(aid, data)))
            .await
            .map_err(|e| error!("Outside channel: {:?}", e));
        }
      }
    }

    warn!("Chamomile network is stopped");
  });
#+end_src

copy from tdn