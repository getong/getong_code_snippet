* libp2p code reading

** NetworkBehaviour

#+begin_src rust
impl NetworkBehaviour for Behaviour {
    type ConnectionHandler = Handler;
    type ToSwarm = ();

    fn handle_established_inbound_connection(
        &mut self,
        connection_id: ConnectionId,
        peer: PeerId,
        _: &Multiaddr,
        _: &Multiaddr,
    ) -> Result<THandler<Self>, ConnectionDenied> {
        Ok(Handler::new(
            peer,
            self.shared.clone(),
            Shared::lock(&self.shared).receiver(peer, connection_id),
        ))
    }

    fn handle_established_outbound_connection(
        &mut self,
        connection_id: ConnectionId,
        peer: PeerId,
        _: &Multiaddr,
        _: Endpoint,
    ) -> Result<THandler<Self>, ConnectionDenied> {
        Ok(Handler::new(
            peer,
            self.shared.clone(),
            Shared::lock(&self.shared).receiver(peer, connection_id),
        ))
    }

    fn on_swarm_event(&mut self, event: FromSwarm) {
        match event {
            FromSwarm::ConnectionEstablished(ConnectionEstablished {
                peer_id,
                connection_id,
                ..
            }) => Shared::lock(&self.shared).on_connection_established(connection_id, peer_id),
            FromSwarm::ConnectionClosed(ConnectionClosed { connection_id, .. }) => {
                Shared::lock(&self.shared).on_connection_closed(connection_id)
            }
            FromSwarm::DialFailure(DialFailure {
                peer_id: Some(peer_id),
                error:
                    error @ (DialError::Transport(_)
                    | DialError::Denied { .. }
                    | DialError::NoAddresses
                    | DialError::WrongPeerId { .. }),
                ..
            }) => {
                let reason = error.to_string(); // We can only forward the string repr but it is better than nothing.

                Shared::lock(&self.shared).on_dial_failure(peer_id, reason)
            }
            _ => {}
        }
    }

    fn on_connection_handler_event(
        &mut self,
        _peer_id: PeerId,
        _connection_id: ConnectionId,
        event: THandlerOutEvent<Self>,
    ) {
        void::unreachable(event);
    }

    fn poll(
        &mut self,
        cx: &mut Context<'_>,
    ) -> Poll<ToSwarm<Self::ToSwarm, THandlerInEvent<Self>>> {
        if let Poll::Ready(Some(peer)) = self.dial_receiver.poll_next_unpin(cx) {
            return Poll::Ready(ToSwarm::Dial {
                opts: DialOpts::peer_id(peer)
                    .condition(PeerCondition::DisconnectedAndNotDialing)
                    .build(),
            });
        }

        Poll::Pending
    }
}
#+end_src

The NetworkBehaviour is trait for network communication, and Behaviour stores the basic info.


** tokio::select and swarm.select_next_some() example

#+begin_src rust
pub async fn init_p2p_client(server_ip_address: String) -> Result<(), Box<dyn Error>> {
    // env_logger::init();

    let key_pair = identity::Keypair::generate_ed25519();
    let rendezvous_point_address = format!("/ip4/{}/tcp/62649", server_ip_address).as_str().parse::<Multiaddr>().unwrap();
    // let rendezvous_point = "12D3KooWDpJ7As7BWAwRMfu1VU2WCqNjvq387JEYKDBj4kx6nXTN".parse().unwrap();

    let mut swarm = SwarmBuilder::with_tokio_executor(
        tcp::tokio::Transport::default()
            .upgrade(Version::V1Lazy)
            .authenticate(noise::Config::new(&key_pair).unwrap())
            .multiplex(yamux::Config::default())
            .boxed(),
        MyBehaviour {
            identify: identify::Behaviour::new(identify::Config::new(
                "rendezvous-example/1.0.0".to_string(),
                key_pair.public(),
            )),
            rendezvous: rendezvous::client::Behaviour::new(key_pair.clone()),
            ping: ping::Behaviour::new(ping::Config::new().with_interval(Duration::from_secs(1))),
            keep_alive: keep_alive::Behaviour,
        },
        PeerId::from(key_pair.public()),
    )
    .build();

    let external_address = format!("/ip4/{}/tcp/62649", server_ip_address).as_str().parse::<Multiaddr>().unwrap();
    swarm.add_external_address(external_address, libp2p::swarm::AddressScore::Infinite);

    log::warn!("Local peer id: {}", swarm.local_peer_id());

    swarm.dial(rendezvous_point_address.clone()).unwrap();

    let mut discover_tick = tokio::time::interval(Duration::from_secs(30));
    let mut cookie = None;

    loop {
        tokio::select! {
                event = swarm.select_next_some() => match event {
                    SwarmEvent::ConnectionEstablished { peer_id, .. } => {
                        log::warn!(
                            "Connected to rendezvous point, discovering nodes in '{}' namespace ...",
                            NAMESPACE
                        );

                        swarm.behaviour_mut().rendezvous.discover(
                            Some(rendezvous::Namespace::new(NAMESPACE.to_string()).unwrap()),
                            None,
                            None,
                            peer_id,
                        );

                        swarm.behaviour_mut().rendezvous.register(
                            rendezvous::Namespace::from_static("rendezvous"),
                            peer_id,
                            None,
                        );

                        log::warn!("Connection established with rendezvous point {}", peer_id);
                    }
                    SwarmEvent::Behaviour(MyBehaviourEvent::Rendezvous(rendezvous::client::Event::Discovered {
                        registrations,
                        cookie: new_cookie,
                        ..
                    })) => {
                        cookie.replace(new_cookie);

                        for registration in registrations {
                            for address in registration.record.addresses() {
                                let peer = registration.record.peer_id();
                                log::warn!("Discovered peer {} at {}", peer, address);

                                let p2p_suffix = Protocol::P2p(*peer.as_ref());
                                let address_with_p2p =
                                    if !address.ends_with(&Multiaddr::empty().with(p2p_suffix.clone())) {
                                        address.clone().with(p2p_suffix)
                                    } else {
                                        address.clone()
                                    };

                                swarm.dial(address_with_p2p).unwrap();
                            }
                        }
                    }
                    SwarmEvent::Behaviour(MyBehaviourEvent::Identify(identify::Event::Received {
                        peer_id, info, ..
                    })) => {
                        log::warn!("{peer_id:?}: {info:?}");

                    }
                    SwarmEvent::Behaviour(MyBehaviourEvent::Identify(identify::Event::Sent {
                        peer_id, ..
                    })) => {
                        log::warn!("Sent identify info to {peer_id:?}");
                        swarm.behaviour_mut().rendezvous.register(
                            rendezvous::Namespace::from_static("rendezvous"),
                            peer_id,
                            None,
                        );
                    }

                    SwarmEvent::Behaviour(MyBehaviourEvent::Rendezvous(
                        rendezvous::client::Event::Registered {
                            namespace,
                            ttl,
                            rendezvous_node,
                        },
                    )) => {
                        log::warn!(
                            "Registered for namespace '{}' at rendezvous point {} for the next {} seconds",
                            namespace,
                            rendezvous_node,
                            ttl
                        );
                    }
                    SwarmEvent::Behaviour(MyBehaviourEvent::Rendezvous(
                        rendezvous::client::Event::RegisterFailed(error),
                    )) => {
                        log::error!("Failed to register {}", error);
                    }

                    SwarmEvent::Behaviour(MyBehaviourEvent::Ping(ping::Event {
                        peer,
                        result: Ok(rtt),
                        ..
                    })) => {
                        match rtt {
                            libp2p::ping::Success::Ping{rtt: stt} => {
                                log::warn!("Ping to {} in {:?}", peer, stt);
                            },
                            libp2p::ping::Success::Pong{} => {

                            }
                        }

                    }
                    other => {
                        log::debug!("Unhandled {:?}", other);
                    }
            },
            _ = discover_tick.tick(), if cookie.is_some() => {}
                // swarm.behaviour_mut().rendezvous.discover(
                //     Some(rendezvous::Namespace::new(NAMESPACE.to_string()).unwrap()),
                //     cookie.clone(),
                //     None,
                //     rendezvous_point)
        }
    }
}
#+end_src

copy from https://github.com/PixelCoda/Thalamus

** authenticate with Kepair example

#+begin_src rust
pub fn create_transport(
    id_keys: &Keypair,
) -> Result<transport::Boxed<(PeerId, StreamMuxerBox)>, noise::Error> {
    // Setup the transport + multiplex + auth
    // Zinnia will hard-code this configuration initially.
    // We need to pick reasonable defaults that will allow Zinnia nodes to interoperate with
    // as many other libp2p nodes as possible.
    let tcp_transport = libp2p::dns::TokioDnsConfig::system(libp2p::tcp::tokio::Transport::new(
        libp2p::tcp::Config::new(),
    ))?
    .upgrade(upgrade::Version::V1Lazy)
    .authenticate(noise::Config::new(id_keys)?)
    .multiplex(upgrade::SelectUpgrade::new(
        yamux::Config::default(),
        libp2p::mplex::MplexConfig::default(),
    ))
    .timeout(std::time::Duration::from_secs(5))
    .boxed();
    Ok(tcp_transport)
}
#+end_src

copy from https://github.com/filecoin-station/zinnia


** libp2p with_other_transport usage

#+begin_src rust
#[allow(missing_debug_implementations)]
pub struct Relay<P: Provider + Sync> {
  swarm: Swarm<Behaviour>,
  db: Sql,
  provider: Box<P>,
}

impl<P: Provider + Sync> Relay<P> {
  pub fn new(
    pool: Sql,
    provider: P,
    port: u16,
    port_webrtc: u16,
    local_key_path: Option<String>,
    cert_path: Option<String>,
  ) -> Result<Self, Error> {
    let local_key = if let Some(path) = local_key_path {
      let path = Path::new(&path);
      read_or_create_identity(path).map_err(Error::ReadIdentityError)?
    } else {
      identity::Keypair::generate_ed25519()
    };

    let cert = if let Some(path) = cert_path {
      let path = Path::new(&path);
      read_or_create_certificate(path).map_err(Error::ReadCertificateError)?
    } else {
      Certificate::generate(&mut thread_rng()).unwrap()
    };

    info!(target: LOG_TARGET, peer_id = %PeerId::from(local_key.public()), "Relay peer id.");

    let mut swarm = libp2p::SwarmBuilder::with_existing_identity(local_key)
      .with_tokio()
      .with_tcp(tcp::Config::default(), noise::Config::new, yamux::Config::default)?
      .with_quic()
      .with_other_transport(|key| {
        Ok(webrtc::tokio::Transport::new(key.clone(), cert)
           .map(|(peer_id, conn), _| (peer_id, StreamMuxerBox::new(conn))))
      })
      .expect("Failed to create WebRTC transport")
      .with_behaviour(|key| {
        // Hash messages by their content. No two messages of the same content will be
        // propagated.
        let _message_id_fn = |message: &gossipsub::Message| {
          let mut s = DefaultHasher::new();
          message.data.hash(&mut s);
          gossipsub::MessageId::from(s.finish().to_string())
        };
        let gossipsub_config = gossipsub::ConfigBuilder::default()
          .heartbeat_interval(Duration::from_secs(constants::GOSSIPSUB_HEARTBEAT_INTERVAL_SECS)) // This is set to aid debugging by not cluttering the log space
          .validation_mode(gossipsub::ValidationMode::Strict) // This sets the kind of message validation. The default is Strict (enforce message signing)
        // TODO: Use this once we incorporate nonces in the message model?
        // .message_id_fn(message_id_fn) // content-address messages. No two messages of the same content will be propagated.
          .build()
          .map_err(|msg| io::Error::new(io::ErrorKind::Other, msg)).unwrap(); // Temporary hack because `build` does not return a proper `std::error::Error`.

        Behaviour {
          relay: relay::Behaviour::new(key.public().to_peer_id(), Default::default()),
          ping: ping::Behaviour::new(ping::Config::new()),
          identify: identify::Behaviour::new(identify::Config::new(
            "/torii-relay/0.0.1".to_string(),
            key.public(),
          )),
          gossipsub: gossipsub::Behaviour::new(
            gossipsub::MessageAuthenticity::Signed(key.clone()),
            gossipsub_config,
          )
            .unwrap(),
        }
      })?
      .with_swarm_config(|cfg| {
        cfg.with_idle_connection_timeout(Duration::from_secs(
          constants::IDLE_CONNECTION_TIMEOUT_SECS,
        ))
      })
      .build();

    // TCP
    let listen_addr_tcp = Multiaddr::from(Ipv4Addr::UNSPECIFIED).with(Protocol::Tcp(port));
    swarm.listen_on(listen_addr_tcp.clone())?;

    // UDP QUIC
    let listen_addr_quic =
      Multiaddr::from(Ipv4Addr::UNSPECIFIED).with(Protocol::Udp(port)).with(Protocol::QuicV1);
    swarm.listen_on(listen_addr_quic.clone())?;

    // WebRTC
    let listen_addr_webrtc = Multiaddr::from(Ipv4Addr::UNSPECIFIED)
      .with(Protocol::Udp(port_webrtc))
      .with(Protocol::WebRTCDirect);
    swarm.listen_on(listen_addr_webrtc.clone())?;

    // Clients will send their messages to the "message" topic
    // with a room name as the message data.
    // and we will forward those messages to a specific room - in this case the topic
    // along with the message data.
    swarm
      .behaviour_mut()
      .gossipsub
      .subscribe(&IdentTopic::new(constants::MESSAGING_TOPIC))
      .unwrap();

    Ok(Self { swarm, db: pool, provider: Box::new(provider) })
  }
}
#+end_src

copy from https://github.com/dojoengine/dojo

** tcp config

#+begin_src rust
pub async fn init_swarm() -> Result<Swarm<chain::Behaviour>, Box<dyn SError>> {
  let auth_keys = gen_ed25519(0);
  let mut swarm = libp2p::SwarmBuilder::with_existing_identity(auth_keys.clone())
    .with_tokio()
    .with_tcp(tcp::Config::default()
              .nodelay(true)
              .port_reuse(true)
              , noise::Config::new, yamux::Config::default)?
    .with_quic()
    .with_other_transport(|k| {
      tcp::tokio::Transport::new(tcp::Config::default().port_reuse(false).nodelay(true))
        .upgrade(Version::V1Lazy)
        .authenticate(NoiseConfig::new(k).unwrap())
        .multiplex(YamuxConfig::default())
    })?
    .with_other_transport(|k| {
      tcp::tokio::Transport::new(tcp::Config::default().port_reuse(false).nodelay(true))
        .upgrade(Version::V1)
        .authenticate(NoiseConfig::new(k).unwrap())
        .multiplex(YamuxConfig::default())
    })?
    .with_dns()?
    .with_relay_client(noise::Config::new, yamux::Config::default)?
    .with_behaviour(|k, relay_behaviour| chain::Behaviour::from(k.clone()))?
    .with_swarm_config(|c| c.with_idle_connection_timeout(Duration::from_secs(5)))
    .build();
  swarm.behaviour_mut()
    .kad
    .set_mode(Some(libp2p::kad::Mode::Server));
  let gst = gossipsub::IdentTopic::new("test-net");
  let fst = floodsub::Topic::new("chain");
  swarm.behaviour_mut().fs.subscribe(fst);
  swarm.behaviour_mut().gs.subscribe(&gst)?;
  // let mut stdin = std::io::BufReader::new(std::io::stdin()).lines();


  Ok(swarm)
}
#+end_src

copy from https://github.com/clpi/mbc

** libp2p gossipsub and libp2p_stream code example

#+begin_src rust

#[derive(thiserror::Error, Debug)]
pub enum SwarmError {
    #[error("duplicate dialing")]
    DuplicateDialing,
}

/// How long to keep a connection alive once it is idling.
const IDLE_CONN_TIMEOUT: Duration = Duration::from_secs(300);

impl Swarm {
    /// Builds a [`Swarm`] configured for use with Nomos on top of a tokio executor.
    //
    // TODO: define error types
    pub fn build(config: &SwarmConfig) -> Result<Self, Box<dyn Error>> {
        let keypair =
            libp2p::identity::Keypair::from(secp256k1::Keypair::from(config.node_key.clone()));
        let peer_id = PeerId::from(keypair.public());
        tracing::info!("libp2p peer_id:{}", peer_id);

        let mut swarm = libp2p::SwarmBuilder::with_existing_identity(keypair)
            .with_tokio()
            .with_quic()
            .with_dns()?
            .with_behaviour(|_| Behaviour::new(peer_id, config.gossipsub_config.clone()).unwrap())?
            .with_swarm_config(|c| c.with_idle_connection_timeout(IDLE_CONN_TIMEOUT))
            .build();

        swarm.listen_on(Self::multiaddr(config.host, config.port))?;

        Ok(Swarm { swarm })
    }

    /// Initiates a connection attempt to a peer
    pub fn connect(&mut self, peer_addr: Multiaddr) -> Result<ConnectionId, DialError> {
        let opt = DialOpts::from(peer_addr.clone());
        let connection_id = opt.connection_id();

        tracing::debug!("attempting to dial {peer_addr}. connection_id:{connection_id:?}",);
        self.swarm.dial(opt)?;
        Ok(connection_id)
    }

    /// Subscribes to a topic
    ///
    /// Returns true if the topic is newly subscribed or false if already subscribed.
    pub fn subscribe(&mut self, topic: &str) -> Result<bool, SubscriptionError> {
        self.swarm
            .behaviour_mut()
            .gossipsub
            .subscribe(&gossipsub::IdentTopic::new(topic))
    }

    pub fn broadcast(
        &mut self,
        topic: &str,
        message: impl Into<Vec<u8>>,
    ) -> Result<MessageId, PublishError> {
        self.swarm
            .behaviour_mut()
            .gossipsub
            .publish(gossipsub::IdentTopic::new(topic), message)
    }

    /// Unsubscribes from a topic
    ///
    /// Returns true if previously subscribed
    pub fn unsubscribe(&mut self, topic: &str) -> Result<bool, PublishError> {
        self.swarm
            .behaviour_mut()
            .gossipsub
            .unsubscribe(&gossipsub::IdentTopic::new(topic))
    }

    /// Returns a reference to the underlying [`libp2p::Swarm`]
    pub fn swarm(&self) -> &libp2p::Swarm<Behaviour> {
        &self.swarm
    }

    pub fn is_subscribed(&mut self, topic: &str) -> bool {
        let topic_hash = Self::topic_hash(topic);

        //TODO: consider O(1) searching by having our own data structure
        self.swarm
            .behaviour_mut()
            .gossipsub
            .topics()
            .any(|h| h == &topic_hash)
    }

    pub fn topic_hash(topic: &str) -> TopicHash {
        gossipsub::IdentTopic::new(topic).hash()
    }

    /// Returns a stream control that can be used to accept streams and establish streams to
    /// other peers.
    /// Stream controls can be cloned.
    pub fn stream_control(&self) -> Control {
        self.swarm.behaviour().stream.new_control()
    }

    pub fn multiaddr(ip: std::net::Ipv4Addr, port: u16) -> Multiaddr {
        multiaddr!(Ip4(ip), Udp(port), QuicV1)
    }
}

impl futures::Stream for Swarm {
    type Item = SwarmEvent<BehaviourEvent>;

    fn poll_next(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {
        Pin::new(&mut self.swarm).poll_next(cx)
    }
}

fn compute_message_id(message: &Message) -> MessageId {
    let mut hasher = Blake2b::<U32>::new();
    hasher.update(&message.data);
    MessageId::from(hasher.finalize().to_vec())
}

#[cfg(test)]
mod tests {
    use std::time::Duration;

    use futures::{AsyncReadExt, AsyncWriteExt, StreamExt};
    use libp2p::StreamProtocol;
    use rand::Rng;

    use crate::{Swarm, SwarmConfig};

    #[tokio::test]
    async fn stream() {
        // Init two swarms
        let (config1, mut swarm1) = init_swarm();
        let (_, mut swarm2) = init_swarm();
        let swarm1_peer_id = *swarm1.swarm().local_peer_id();

        // Dial to swarm1
        swarm2
            .connect(Swarm::multiaddr(config1.host, config1.port))
            .unwrap();

        // Prepare stream controls
        let mut stream_control1 = swarm1.stream_control();
        let mut stream_control2 = swarm2.stream_control();

        // Poll swarms to make progress
        tokio::spawn(async move { while (swarm1.next().await).is_some() {} });
        tokio::spawn(async move { while (swarm2.next().await).is_some() {} });

        // Make swarm1 accept incoming streams
        let protocol = StreamProtocol::new("/test");
        let mut incoming_streams = stream_control1.accept(protocol).unwrap();
        tokio::spawn(async move {
            // If a new stream is established, write bytes and close the stream.
            while let Some((_, mut stream)) = incoming_streams.next().await {
                stream.write_all(&[1, 2, 3, 4]).await.unwrap();
                stream.close().await.unwrap();
            }
        });

        // Wait until the connection is established
        tokio::time::sleep(Duration::from_secs(1)).await;

        // Establish a stream with swarm1 and read bytes
        let mut stream = stream_control2
            .open_stream(swarm1_peer_id, StreamProtocol::new("/test"))
            .await
            .unwrap();
        let mut buf = [0u8; 4];
        stream.read_exact(&mut buf).await.unwrap();
        assert_eq!(buf, [1, 2, 3, 4]);
    }

    fn init_swarm() -> (SwarmConfig, Swarm) {
        let config = SwarmConfig {
            host: std::net::Ipv4Addr::new(127, 0, 0, 1),
            port: rand::thread_rng().gen_range(10000..30000),
            ..Default::default()
        };
        let swarm = Swarm::build(&config).unwrap();
        (config, swarm)
    }
}
#+end_src

copy from https://github.com/logos-co/nomos-node
