* libp2p code reading

** NetworkBehaviour

#+begin_src rust
impl NetworkBehaviour for Behaviour {
    type ConnectionHandler = Handler;
    type ToSwarm = ();

    fn handle_established_inbound_connection(
        &mut self,
        connection_id: ConnectionId,
        peer: PeerId,
        _: &Multiaddr,
        _: &Multiaddr,
    ) -> Result<THandler<Self>, ConnectionDenied> {
        Ok(Handler::new(
            peer,
            self.shared.clone(),
            Shared::lock(&self.shared).receiver(peer, connection_id),
        ))
    }

    fn handle_established_outbound_connection(
        &mut self,
        connection_id: ConnectionId,
        peer: PeerId,
        _: &Multiaddr,
        _: Endpoint,
    ) -> Result<THandler<Self>, ConnectionDenied> {
        Ok(Handler::new(
            peer,
            self.shared.clone(),
            Shared::lock(&self.shared).receiver(peer, connection_id),
        ))
    }

    fn on_swarm_event(&mut self, event: FromSwarm) {
        match event {
            FromSwarm::ConnectionEstablished(ConnectionEstablished {
                peer_id,
                connection_id,
                ..
            }) => Shared::lock(&self.shared).on_connection_established(connection_id, peer_id),
            FromSwarm::ConnectionClosed(ConnectionClosed { connection_id, .. }) => {
                Shared::lock(&self.shared).on_connection_closed(connection_id)
            }
            FromSwarm::DialFailure(DialFailure {
                peer_id: Some(peer_id),
                error:
                    error @ (DialError::Transport(_)
                    | DialError::Denied { .. }
                    | DialError::NoAddresses
                    | DialError::WrongPeerId { .. }),
                ..
            }) => {
                let reason = error.to_string(); // We can only forward the string repr but it is better than nothing.

                Shared::lock(&self.shared).on_dial_failure(peer_id, reason)
            }
            _ => {}
        }
    }

    fn on_connection_handler_event(
        &mut self,
        _peer_id: PeerId,
        _connection_id: ConnectionId,
        event: THandlerOutEvent<Self>,
    ) {
        void::unreachable(event);
    }

    fn poll(
        &mut self,
        cx: &mut Context<'_>,
    ) -> Poll<ToSwarm<Self::ToSwarm, THandlerInEvent<Self>>> {
        if let Poll::Ready(Some(peer)) = self.dial_receiver.poll_next_unpin(cx) {
            return Poll::Ready(ToSwarm::Dial {
                opts: DialOpts::peer_id(peer)
                    .condition(PeerCondition::DisconnectedAndNotDialing)
                    .build(),
            });
        }

        Poll::Pending
    }
}
#+end_src

The NetworkBehaviour is trait for network communication, and Behaviour stores the basic info.


** tokio::select and swarm.select_next_some() example

#+begin_src rust
pub async fn init_p2p_client(server_ip_address: String) -> Result<(), Box<dyn Error>> {
    // env_logger::init();

    let key_pair = identity::Keypair::generate_ed25519();
    let rendezvous_point_address = format!("/ip4/{}/tcp/62649", server_ip_address).as_str().parse::<Multiaddr>().unwrap();
    // let rendezvous_point = "12D3KooWDpJ7As7BWAwRMfu1VU2WCqNjvq387JEYKDBj4kx6nXTN".parse().unwrap();

    let mut swarm = SwarmBuilder::with_tokio_executor(
        tcp::tokio::Transport::default()
            .upgrade(Version::V1Lazy)
            .authenticate(noise::Config::new(&key_pair).unwrap())
            .multiplex(yamux::Config::default())
            .boxed(),
        MyBehaviour {
            identify: identify::Behaviour::new(identify::Config::new(
                "rendezvous-example/1.0.0".to_string(),
                key_pair.public(),
            )),
            rendezvous: rendezvous::client::Behaviour::new(key_pair.clone()),
            ping: ping::Behaviour::new(ping::Config::new().with_interval(Duration::from_secs(1))),
            keep_alive: keep_alive::Behaviour,
        },
        PeerId::from(key_pair.public()),
    )
    .build();

    let external_address = format!("/ip4/{}/tcp/62649", server_ip_address).as_str().parse::<Multiaddr>().unwrap();
    swarm.add_external_address(external_address, libp2p::swarm::AddressScore::Infinite);

    log::warn!("Local peer id: {}", swarm.local_peer_id());

    swarm.dial(rendezvous_point_address.clone()).unwrap();

    let mut discover_tick = tokio::time::interval(Duration::from_secs(30));
    let mut cookie = None;

    loop {
        tokio::select! {
                event = swarm.select_next_some() => match event {
                    SwarmEvent::ConnectionEstablished { peer_id, .. } => {
                        log::warn!(
                            "Connected to rendezvous point, discovering nodes in '{}' namespace ...",
                            NAMESPACE
                        );

                        swarm.behaviour_mut().rendezvous.discover(
                            Some(rendezvous::Namespace::new(NAMESPACE.to_string()).unwrap()),
                            None,
                            None,
                            peer_id,
                        );

                        swarm.behaviour_mut().rendezvous.register(
                            rendezvous::Namespace::from_static("rendezvous"),
                            peer_id,
                            None,
                        );

                        log::warn!("Connection established with rendezvous point {}", peer_id);
                    }
                    SwarmEvent::Behaviour(MyBehaviourEvent::Rendezvous(rendezvous::client::Event::Discovered {
                        registrations,
                        cookie: new_cookie,
                        ..
                    })) => {
                        cookie.replace(new_cookie);

                        for registration in registrations {
                            for address in registration.record.addresses() {
                                let peer = registration.record.peer_id();
                                log::warn!("Discovered peer {} at {}", peer, address);

                                let p2p_suffix = Protocol::P2p(*peer.as_ref());
                                let address_with_p2p =
                                    if !address.ends_with(&Multiaddr::empty().with(p2p_suffix.clone())) {
                                        address.clone().with(p2p_suffix)
                                    } else {
                                        address.clone()
                                    };

                                swarm.dial(address_with_p2p).unwrap();
                            }
                        }
                    }
                    SwarmEvent::Behaviour(MyBehaviourEvent::Identify(identify::Event::Received {
                        peer_id, info, ..
                    })) => {
                        log::warn!("{peer_id:?}: {info:?}");

                    }
                    SwarmEvent::Behaviour(MyBehaviourEvent::Identify(identify::Event::Sent {
                        peer_id, ..
                    })) => {
                        log::warn!("Sent identify info to {peer_id:?}");
                        swarm.behaviour_mut().rendezvous.register(
                            rendezvous::Namespace::from_static("rendezvous"),
                            peer_id,
                            None,
                        );
                    }

                    SwarmEvent::Behaviour(MyBehaviourEvent::Rendezvous(
                        rendezvous::client::Event::Registered {
                            namespace,
                            ttl,
                            rendezvous_node,
                        },
                    )) => {
                        log::warn!(
                            "Registered for namespace '{}' at rendezvous point {} for the next {} seconds",
                            namespace,
                            rendezvous_node,
                            ttl
                        );
                    }
                    SwarmEvent::Behaviour(MyBehaviourEvent::Rendezvous(
                        rendezvous::client::Event::RegisterFailed(error),
                    )) => {
                        log::error!("Failed to register {}", error);
                    }

                    SwarmEvent::Behaviour(MyBehaviourEvent::Ping(ping::Event {
                        peer,
                        result: Ok(rtt),
                        ..
                    })) => {
                        match rtt {
                            libp2p::ping::Success::Ping{rtt: stt} => {
                                log::warn!("Ping to {} in {:?}", peer, stt);
                            },
                            libp2p::ping::Success::Pong{} => {

                            }
                        }

                    }
                    other => {
                        log::debug!("Unhandled {:?}", other);
                    }
            },
            _ = discover_tick.tick(), if cookie.is_some() => {}
                // swarm.behaviour_mut().rendezvous.discover(
                //     Some(rendezvous::Namespace::new(NAMESPACE.to_string()).unwrap()),
                //     cookie.clone(),
                //     None,
                //     rendezvous_point)
        }
    }
}
#+end_src

copy from https://github.com/PixelCoda/Thalamus

** authenticate with Kepair example

#+begin_src rust
pub fn create_transport(
    id_keys: &Keypair,
) -> Result<transport::Boxed<(PeerId, StreamMuxerBox)>, noise::Error> {
    // Setup the transport + multiplex + auth
    // Zinnia will hard-code this configuration initially.
    // We need to pick reasonable defaults that will allow Zinnia nodes to interoperate with
    // as many other libp2p nodes as possible.
    let tcp_transport = libp2p::dns::TokioDnsConfig::system(libp2p::tcp::tokio::Transport::new(
        libp2p::tcp::Config::new(),
    ))?
    .upgrade(upgrade::Version::V1Lazy)
    .authenticate(noise::Config::new(id_keys)?)
    .multiplex(upgrade::SelectUpgrade::new(
        yamux::Config::default(),
        libp2p::mplex::MplexConfig::default(),
    ))
    .timeout(std::time::Duration::from_secs(5))
    .boxed();
    Ok(tcp_transport)
}
#+end_src

copy from https://github.com/filecoin-station/zinnia
