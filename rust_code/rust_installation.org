* rust installation
:PROPERTIES:
:CUSTOM_ID: rust-installation
:END:
** install using ustc
:PROPERTIES:
:CUSTOM_ID: install-using-ustc
:END:
#+begin_src shell
$ export RUSTUP_DIST_SERVER="https://rsproxy.cn"
$ export RUSTUP_UPDATE_ROOT="https://rsproxy.cn/rustup"
$ export CARGO_UNSTABLE_SPARSE_REGISTRY=true
$ export CARGO_HOME=/backup/rust_installation/cargo
$ export RUSTUP_HOME=/backup/rust_installation/rustup
$ curl --proto '=https' --tlsv1.2 -sSf https://rsproxy.cn/rustup-init.sh | sh
$ source $CARGO_HOME/env
$ export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/library"
$ rustup toolchain add nightly
$ rustup component add rls-preview rust-analysis rust-src

$ rustup toolchain install nightly
$ rustup component add rustc-dev --toolchain=nightly
$ cargo install tokio-console savage cargo-expand sea-orm-cli abscissa cargo-generate cargo-edit cargo-outdated cargo-web wasm-bindgen-cli wasm-pack cargo-fuzz evcxr_repl cargo-wasi rust-script
$ rustup component add clippy-preview
$ rustup +nightly component add rust-analyzer-preview
$ rustup target add wasm32-wasi wasm32-unknown-emscripten wasm32-unknown-unknown
$ cargo install cargo-make
$ cargo update -p wasm-bindgen


// copy from https://github.com/rust-lang/rustfmt/issues/4454
## ensure rustfmt
echo 'edition = "2021"\n' >> ~/.rustfmt.toml
#+end_src

The =cargo/env= file is just like this:

#+begin_src shell
#!/bin/sh
# rustup shell setup
# affix colons on either side of $PATH to simplify matching
case ":${PATH}:" in
    *:"/backup/rust_installation/cargo/bin":*)
        ;;
    *)
        # Prepending path in case a system-installed rustc needs to be overridden
        export PATH="/backup/rust_installation/cargo/bin:$PATH"
        ;;
esac
#+end_src

** abscissa
:PROPERTIES:
:CUSTOM_ID: abscissa
:END:
#+begin_src shell
abscissa new my_app

cd my_app
cargo build
#+end_src

** cargo config file
:PROPERTIES:
:CUSTOM_ID: cargo-config-file
:END:
#+begin_src shell
emacs $CARGO_HOME/config

---------------
[source.crates-io]
replace-with = 'rsproxy'
[source.rsproxy]
registry = "https://rsproxy.cn/crates.io-index"
[source.rsproxy-sparse]
registry = "sparse+https://rsproxy.cn/index/"
[registries.rsproxy]
index = "https://rsproxy.cn/crates.io-index"
[net]
git-fetch-with-cli = true
#+end_src

** rustup install the stable by default
:PROPERTIES:
:CUSTOM_ID: rustup-install-the-stable-by-default
:END:
#+begin_src shell
curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
#+end_src

** another method install the rust
:PROPERTIES:
:CUSTOM_ID: another-method-install-the-rust
:END:
#+begin_src shell
RUSTUP_HOME=~/rustup && CARGO_HOME=~/cargo && PATH=~/cargo/bin:$PATH && RUST_VERSION=1.39.0
wget -c https://static.rust-lang.org/rustup/archive/1.20.2/x86_64-unknown-linux-gnu/rustup-init
chmod +x rustup-init
./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION
#+end_src

** rustup usage
:PROPERTIES:
:CUSTOM_ID: rustup-usage
:END:
#+begin_src shell
## update the rustup script
rustup self update

## delete updateup script
rustup self uninstall

## update the rust
rustup update

## component
rustup component add rust-src
rustup component add rust-analysis
#+end_src

** nightly build
:PROPERTIES:
:CUSTOM_ID: nightly-build
:END:
#+begin_src shell
rustup self update
rustup install stable
rustup install nightly
rustup update nightly
rustup override set nightly
rustup override set stable
rustup component add rls --toolchain nightly
rustup component add rust-analysis --toolchain nightly
rustup component add rust-src --toolchain nightly
rustup component add rust-docs
## set toolchain ngithly
rustup default nightly
rustup docs
rustup show
#+end_src

** cargo usage
:PROPERTIES:
:CUSTOM_ID: cargo-usage
:END:
#+begin_src shell
cargo new project_name --bin
cargo build --release
cargo run
cargo run --quiet
cargo update
cargo bench
cargo test
carge install
cargo check
cargo clean
# cargo install clippy
rustup component add clippy-preview

cd project_name
cargo add async-std
## tokio library
cargo add tokio
## command option
cargo add clap
## time operation library
cargo add chrono

cargo add tokio@1.9.0 --features full
cargo add mio --features "os-poll os-ext net"
cargo add tokio_stream --features "sync"

cargo clippy
// get the build detail report
cargo +nightly build -Z timings
#+end_src

** rustdoc and cargo
:PROPERTIES:
:CUSTOM_ID: rustdoc-and-cargo
:END:
#+begin_src shell
$ rustdoc main.rs
$ cargo doc
#+end_src

** switch stable and nightly
:PROPERTIES:
:CUSTOM_ID: switch-stable-and-nightly
:END:
#+begin_src shell
rustup override set nightly
rustup show

rustup override set stable
rustup show
#+end_src

** cargo mirror
:PROPERTIES:
:CUSTOM_ID: cargo-mirror
:END:
#+begin_src shell
# ~/.cargo/config
[source.crates-io]
replace-with = 'tuna'

[source.tuna]
registry = "https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git"
#+end_src

copy from [[https://mirrors.tuna.tsinghua.edu.cn/help/crates.io-index.git/][Rust crates.io 索引镜像使用帮助]]

or use ustc

#+begin_src shell
[source.crates-io]
replace-with = 'ustc'

[source.ustc]
registry = "git://mirrors.ustc.edu.cn/crates.io-index"
#+end_src

copy from [[https://mirrors.ustc.edu.cn/help/crates.io-index.html][Rust Crates 源使用帮助]]

** install evcxr
:PROPERTIES:
:CUSTOM_ID: install-evcxr
:END:
#+begin_src shell
rustup component add rust-src
cargo install evcxr_repl
evcxr
#+end_src

see [[https://github.com/google/evcxr/blob/master/evcxr_repl/README.md][Evcxr REPL]]
see [[https://github.com/rust-lang/rust/issues/1120][Implement a Rust REPL #1120]]

** install rustlings
:PROPERTIES:
:CUSTOM_ID: install-rustlings
:END:
#+begin_src shell
cd
curl -L https://git.io/rustlings | bash
# Or if you want it to be installed to a different path:
curl -L https://git.io/rustlings | bash -s mypath/

cd rustlings
rustlings watch
#+end_src

** log, env_logger, openssl
:PROPERTIES:
:CUSTOM_ID: log-env_logger-openssl
:END:
#+begin_src shell
cargo add log env_logger openssl
#+end_src

** update installed crates
:PROPERTIES:
:CUSTOM_ID: update-installed-crates
:END:
#+begin_src shell
cargo install cargo-update
cargo install-update -a
cargo install-update crate1 crate2 ...
## self update
cargo-update
#+end_src

** wasi
:PROPERTIES:
:CUSTOM_ID: wasi
:END:
#+begin_src shell
cargo install cargo-wasi
curl https://wasmtime.dev/install.sh -sSf | bash

cargo wasi build
cargo wasi build --release
cargo wasi run
cargo wasi test
cargo wasi bench
#+end_src

** install wasm-pack error in debian with openssl not found
:PROPERTIES:
:CUSTOM_ID: install-wasm-pack-error-in-debian-with-openssl-not-found
:END:
#+begin_src shell
sudo apt install libssl-dev pkg-config
#+end_src

** offline mode
:PROPERTIES:
:CUSTOM_ID: offline-mode
:END:
#+begin_src shell
cargo build --offline
#+end_src

** rustdoc
:PROPERTIES:
:CUSTOM_ID: rustdoc
:END:
#+begin_src shell
rustup doc --reference
rustup doc --std
#+end_src

** rust-script
:PROPERTIES:
:CUSTOM_ID: rust-script
:END:
#+begin_src shell
cargo install rust-script
#+end_src

** cargo doc
:PROPERTIES:
:CUSTOM_ID: cargo-doc
:END:
The doc will be generated in the target/doc. The project doc homepage
will be target/doc/{project_name}/index.html .

#+begin_src shell
cargo doc

cargo doc --open
#+end_src

** cargo-edit 0.8.0 bug in linux
:PROPERTIES:
:CUSTOM_ID: cargo-edit-0.8.0-bug-in-linux
:END:
the bug info:

#+begin_example
cargo upgrade
    Updating 'https://github.com/rust-lang/crates.io-index' index
Command failed due to unhandled error: invalid version 0 on git_proxy_options; class=Invalid (3)
#+end_example

solved by:

#+begin_src shell
cargo install cargo-edit --features "vendored-libgit2"
#+end_src

copy from [[https://github.com/killercup/cargo-edit/issues/510][cargo upgrade gives "unhandled error: invalid version 0 on git_proxy_options"]]

** rust-toolchain
:PROPERTIES:
:CUSTOM_ID: rust-toolchain
:END:
under the root of the root crate project, a file named =rust-toolchain=
use the rust version. Like this:

#+begin_src shell
nightly
#+end_src

or:

#+begin_src shell
nightly-2021-09-24
#+end_src

** install specific nightly version
:PROPERTIES:
:CUSTOM_ID: install-specific-nightly-version
:END:
#+begin_src shell
rustup toolchain install nightly-2021-09-24
# or
rustup install nightly-2021-09-24
#+end_src

copy from [[https://stackoverflow.com/questions/67024062/change-nightly-rust-version][Change nightly Rust version?]] [[https://stackoverflow.com/questions/27758387/is-it-possible-to-download-previous-nightly-builds][Is it possible to download previous nightly builds?]]

install component:

#+begin_src shell
rustup toolchain install nightly-2021-09-24 --component rust-src
rustup toolchain install nightly --component rust-docs
#+end_src

copy from [[https://rust-lang.github.io/rustup/concepts/components.html][Components]]

** expand the code macro
:PROPERTIES:
:CUSTOM_ID: expand-the-code-macro
:END:
#+begin_src shell
cd project_root_dir
cargo expand
#+end_src

** install rust-analyzer
:PROPERTIES:
:CUSTOM_ID: install-rust-analyzer
:END:
#+begin_src shell
git clone https://github.com/rust-analyzer/rust-analyzer
cd rust-analyzer
git checkout tags/2022-03-21 -b 2022-03-21
cargo xtask install --server
#+end_src

or install with rustup

#+begin_src shell
rustup +nightly component add rust-analyzer-preview

rustup +nightly which rust-analyzer
rust which rust-analyzer
#+end_src

the install path is
=~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rust-analyzer=

copy from
[[https://rustcc.cn/article?id=52912db2-85cb-4da8-afeb-020ae41871dd][分享一种安装/更新/切换rust-analyzer版本的方法]]

** linux cpu temperature
:PROPERTIES:
:CUSTOM_ID: linux-cpu-temperature
:END:
#+begin_src shell
cargo build --jobs 1
#+end_src

copy from [[https://github.com/rust-lang/rust/issues/88902][Compiling large projects with over-heating CPUs causes weird crashes]]

** Minimizing Rust Binary Size
:PROPERTIES:
:CUSTOM_ID: minimizing-rust-binary-size
:END:
#+begin_src shell
1 Use Rust 1.32.0 or newer (which doesn't include jemalloc by default)
2 Add the following to Cargo.toml:
[profile.release]
opt-level = 'z'     # Optimize for size.
lto = true          # Enable Link Time Optimization
codegen-units = 1   # Reduce number of codegen units to increase optimizations.
panic = 'abort'     # Abort on panic
strip = true        # Strip symbols from binary*
*strip = true requires Rust 1.59+. On older Rust versions, run strip manually on the resulting binary.

3 Build in release mode using cargo build --release
#+end_src

copy from [[https://stackoverflow.com/questions/29008127/why-are-rust-executables-so-huge/54842093#54842093][Why are Rust executables so huge?]]
also see [[https://github.com/johnthagen/min-sized-rust][Minimizing Rust Binary Size]]

** compile fast
:PROPERTIES:
:CUSTOM_ID: compile-fast
:END:
copy from [[https://robert.kra.hn/posts/2022-09-09-speeding-up-incremental-rust-compilation-with-dylibs/][Speeding up incremental Rust compilation with dynamic libraries]]

#+begin_src shell
cargo install cargo-add-dynamic
cargo add-dynamic polars --features csv-file,lazy,list,describe,rows,fmt,strings,temporal
cargo build
#+end_src

** switch rust toolchain
#+begin_src shell
# ~/.zshrc
export CARGO_HOME=$HOME/.cargo
export PATH=$CARGO_HOME/bin:$PATH

# switch
rustup override set nightly-2023-05-31
rustup override set nightly
rustup override set stable

# show the result
rustup show
#+end_src