* once_cell
:PROPERTIES:
:CUSTOM_ID: once_cell
:END:
** once_cell and sea-orm
:PROPERTIES:
:CUSTOM_ID: once_cell-and-sea-orm
:END:
#+begin_src rust
use sea_orm::{entity::prelude::DatabaseConnection, ConnectOptions, Database};
use tokio::sync::OnceCell;
//  异步初始化数据库
pub static DB: OnceCell<DatabaseConnection> = OnceCell::const_new();

pub async fn db_conn() -> DatabaseConnection {
    let mut opt = ConnectOptions::new(CFG.database.link.to_owned());
    opt.max_connections(1000)
        .min_connections(5)
        .connect_timeout(Duration::from_secs(8))
        .idle_timeout(Duration::from_secs(8))
        .sqlx_logging(false);
    let db = Database::connect(opt).await.expect("数据库打开失败");
    tracing::info!("Database connected");
    db
}
#+end_src

usage:

#+begin_src rust
use db::{
    db_conn,
    DB,
};

pub async fn get_by_id(Query(req): Query<SearchReq>) -> Res<Vec<sys_api_db::Model>> {
    let db = DB.get_or_init(db_conn).await;
    let res = service::sys_api_db::get_by_id(db, &req.api_id).await;
    match res {
        Ok(x) => Res::with_data(x),
        Err(e) => Res::with_err(&e.to_string()),
    }
}
#+end_src

copy from
[[https://github.com/liweilijie/wgr_axum_admin][wgr_axum_admin]]

** once_cell and spawn_blocking
#+begin_src rust
static LOCAL_WORKER: Lazy<flume::Sender<NonSendCons>> = Lazy::new(|| {
    // Create a new thread which runs the local futures
    let (tx, rx) = flume::unbounded::<NonSendCons>();
    let mut rx = rx.into_stream();

    tokio::task::spawn_blocking(|| {
        let rt = tokio::runtime::Handle::current();
        let mut set = FuturesUnordered::new();
        rt.block_on(async move {
            loop {
                tokio::select! {
                    Some(()) = set.next() => {
                        tracing::info!("Local future completed");
                    },
                    Some(task) = rx.next() => {
                        tracing::info!("Received new future");
                        set.push(task());
                    },
                }
            }
        });
    });

    tx
});
#+end_src

copy from https://github.com/sarvex/Ambient/blob/6d8ec36162cb51787d62d6ebe7deb43ecb9008d6/crates/sys/src/native/task.rs#L10