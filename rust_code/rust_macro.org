* rust macro
:PROPERTIES:
:CUSTOM_ID: rust-macro
:END:
** macro pattern
:PROPERTIES:
:CUSTOM_ID: macro-pattern
:END:
#+begin_example
A macro defined with macro_rules! works entirely by pattern matching. The body of
a macro is just a series of rules:
( pattern1 ) => ( template1 );
( pattern2 ) => ( template2 );
#+end_example

** macro fragement type
:PROPERTIES:
:CUSTOM_ID: macro-fragement-type
:END:
#+begin_example
expr An expression: 2 + 2, "udon", x.len() => , ;

stmt An expression or declaration, not including any trailing semicolon (hard to use; try expr or block instead) => , ;

ty A type: String, Vec<u8>, (&str, bool), dyn Read + Send => , ; = | { [ : > as where

path A path (discussed on page 183): ferns, ::std::sync::mpsc => , ; = | { [ : > as where

pat A pattern (discussed on page 239): _, Some(ref x) => , = | if in

item An item (discussed on page 138): struct Point { x: f64, y: f64 }, mod ferns; Anything

block A block (discussed on page 137): { s += "ok\n"; true } Anything

meta The body of an attribute (discussed on page 191): inline, derive(Copy, Clone), doc="3D models." Anything

ident An identifier: std, Json, longish_variable_name Anything

literal A literal value: 1024, "Hello, world!", 1_000_000f64 Anything

lifetime A lifetime: 'a, 'item, 'static Anything

vis A visibility specifier: pub, pub(crate), pub(in module::submodule) Anything

tt A token tree (see text): ;, >=, {}, [0 1 (+ 0 1)] Anything
#+end_example

** proc_macro example
:PROPERTIES:
:CUSTOM_ID: proc_macro-example
:END:
#+begin_src rust
use proc_macro::TokenStream;
use quote::{format_ident, quote};
use syn::{
   parse::{Parse, ParseStream},
   parse_macro_input, Ident, LitInt, Result,
};

#[proc_macro]
pub fn all_tuples(input: TokenStream) -> TokenStream {
    let Input { name, start, end, ident } = parse_macro_input!(input);
    let id = |s: u8, e: u8| (s..e).map(|n| format_ident!("{ident}{n}"));
    let items = (start..=end).map(|n| {
                                 let ids = id(start, n + 1);
                                 quote!( #name!{#(#ids),*} )
                             });
    quote!(#(#items)*).into()
}

struct Input {
    name:  Ident,
    start: u8,
    end:   u8,
    ident: Ident,
}

impl Parse for Input {
    fn parse(input: ParseStream) -> Result<Self> {
        use syn::token::Comma;
        let name     = input.parse()?;
        let _: Comma = input.parse()?;
        let start    = input.parse::<LitInt>()?.base10_parse()?;
        let _: Comma = input.parse()?;
        let end:     = input.parse::<LitInt>()?.base10_parse()?;
        let _: Comma = input.parse()?;
        let ident    = input.parse()?;
        Ok(Input { name, start, end, ident })
    }
}
#+end_src

copy from
[[https://zjp-cn.github.io/rust-note/dcl/variadic.html]["变长参数"函数与回调]]

** library
:PROPERTIES:
:CUSTOM_ID: library
:END:
[[https://github.com/dtolnay/syn][syn]]
[[https://github.com/dtolnay/quote][quote]]
[[https://github.com/dtolnay/proc-macro2][proc-macro2]]

** 反复
:PROPERTIES:
:CUSTOM_ID: 反复
:END:

#+begin_quote
matcher 可以有反复捕获 (repetition)，这使得匹配一连串标记 (token)
成为可能。反复捕获的一般形式为 $ ( ... ) sep rep。
#+end_quote

$ 是字面上的美元符号标记 ( ... ) 是被反复匹配的模式，由小括号包围。 sep
是可选的分隔标记。它不能是括号或者反复操作符 rep。常用例子有 , 和 ; 。
rep 是必须的重复操作符。当前可以是：
?：表示最多一次重复，所以此时不能前跟分隔标记。 *：表示零次或多次重复。
+：表示一次或多次重复。

#+begin_src rust
macro_rules! vec_strs {
    (
        // 开始反复捕获
        $(
            // 每个反复必须包含一个表达式
            $element:expr
        )
        // 由逗号分隔
        ,
        // 0 或多次
        *
    ) => {
        // 在这个块内用大括号括起来，然后在里面写多条语句
        {
            let mut v = Vec::new();

            // 开始反复捕获
            $(
                // 每个反复会展开成下面表达式，其中 $element 被换成相应被捕获的表达式
                v.push(format!("{}", $element));
            )*

            v
        }
    };
}

fn main() {
    let s = vec_strs![1, "a", true, 3.14159f32];
    assert_eq!(s, &["1", "a", "true", "3.14159"]);
}
#+end_src

** Procedural macros come in three flavors:
#+begin_src rust
Function-like macros — custom!(…)
Derive macros — #[derive(CustomDerive)]
Attribute macros — #[CustomAttribute]
#+end_src