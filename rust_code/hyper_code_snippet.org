* hyper 1.0 code snippet


** hyper 1.0 how to get Incoming body

#+begin_src rust
use http_body_util::BodyExt;
async fn echo(req: Request<hyper::body::Incoming>) -> Result<Response<BoxBody<Bytes, hyper::Error>>, hyper::Error> {
  let reversed_body = req.collect().await?.to_bytes().to_vec();
#+end_src

or
#+begin_src rust
use http_body_util::BodyExt;
async fn echo(req: Request<hyper::body::Incoming>) -> Result<Response<BoxBody<Bytes, hyper::Error>>, hyper::Error> {

  let (parts, body) = req.into_parts();
  let body = body.collect().await?.to_bytes().to_vec();
#+end_src

** Body usage

#+begin_src rust
use hyper::body::Body;

pub type BoxError = Box<dyn std::error::Error + Send + Sync>;

Boxed(Pin<Box<dyn Body<Data = Bytes, Error = BoxError> + Send + Sync + 'static>>),
#+end_src

** http_body_util BodyExt trait
#+begin_src rust
pub trait BodyExt: Body {
    // Provided methods
    fn frame(&mut self) -> Frame<'_, Self> ⓘ
       where Self: Unpin { ... }
    fn map_frame<F, B>(self, f: F) -> MapFrame<Self, F>
       where Self: Sized,
             F: FnMut(Frame<Self::Data>) -> Frame<B>,
             B: Buf { ... }
    fn map_err<F, E>(self, f: F) -> MapErr<Self, F>
       where Self: Sized,
             F: FnMut(Self::Error) -> E { ... }
    fn boxed(self) -> BoxBody<Self::Data, Self::Error>
       where Self: Sized + Send + Sync + 'static { ... }
    fn boxed_unsync(self) -> UnsyncBoxBody<Self::Data, Self::Error>
       where Self: Sized + Send + 'static { ... }
    fn collect(self) -> Collect<Self> ⓘ
       where Self: Sized { ... }
}

impl<T: ?Sized> BodyExt for T where T: http_body::Body {}
#+end_src

BodyExt auto add method to Body trait object.