* rand ThreadRng does not implement send
:PROPERTIES:
:CUSTOM_ID: rand-threadrng-does-not-implement-send
:END:
** How to generate random numbers in async rust?
:PROPERTIES:
:CUSTOM_ID: how-to-generate-random-numbers-in-async-rust
:END:
see
[[https://stackoverflow.com/questions/67443847/how-to-generate-random-numbers-in-async-rust][How
to generate random numbers in async rust?]]

** code can not write like below:
:PROPERTIES:
:CUSTOM_ID: code-can-not-write-like-below
:END:
#+begin_src rust
    let (tx1, mut rx1) = mpsc::channel(32);

    tokio::spawn(async move {
        let mut i = 0;
        let mut rng = rand::thread_rng();
        tokio::pin!(rng);

        loop {
            let rand_sec = rng.gen_range(1u64..3u64);
            let _ = sleep(Duration::from_secs(rand_sec)).await;
            tx1.send(i).await.unwrap();
            i += 1;
        }
    });
#+end_src

** code change like this
:PROPERTIES:
:CUSTOM_ID: code-change-like-this
:END:
#+begin_src rust
async fn random_number() -> u64 {
    let mut rng = rand::thread_rng();
    rng.gen_range(1u64..3u64)
}

    let (tx1, mut rx1) = mpsc::channel(32);

    tokio::spawn(async move {
        let mut i = 0;

        loop {
            let rand_sec = random_number().await;
            let _ = sleep(Duration::from_secs(rand_sec)).await;
            tx1.send(i).await.unwrap();
            i += 1;
        }
    });
#+end_src

** use getrandom crate
:PROPERTIES:
:CUSTOM_ID: use-getrandom-crate
:END:
see
[[https://users.rust-lang.org/t/how-can-i-get-secure-random-bytes-in-a-actix-route-for-password-hashing/50076][How
can I get secure random bytes in a actix route, for password hashing?]]

** impl UniformRand trait

#+begin_src rust
#[cfg(feature = "std")]
use rand::RngCore;
use rand::{
    distr::{Distribution, StandardUniform},
    prelude::StdRng,
    Rng,
};

pub use rand;

pub trait UniformRand: Sized {
    fn rand<R: Rng + ?Sized>(rng: &mut R) -> Self;
}

impl<T> UniformRand for T
where
    StandardUniform: Distribution<T>,
{
    #[inline]
    fn rand<R: Rng + ?Sized>(rng: &mut R) -> Self {
        rng.sample(StandardUniform)
    }
}

fn test_rng_helper() -> StdRng {
    use rand::SeedableRng;
    // arbitrary seed
    let seed = [
        1, 0, 0, 0, 23, 0, 0, 0, 200, 1, 0, 0, 210, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0,
    ];
    rand::rngs::StdRng::from_seed(seed)
}

/// Should be used only for tests, not for any real world usage.
#[cfg(not(feature = "std"))]
pub fn test_rng() -> impl rand::Rng {
    test_rng_helper()
}

/// Should be used only for tests, not for any real world usage.
#[cfg(feature = "std")]
pub fn test_rng() -> impl rand::Rng {
    #[cfg(any(feature = "getrandom", test))]
    {
        let is_deterministic =
            std::env::vars().any(|(key, val)| key == "DETERMINISTIC_TEST_RNG" && val == "1");
        if is_deterministic {
            RngWrapper::Deterministic(test_rng_helper())
        } else {
            RngWrapper::Randomized(rand::rng())
        }
    }
    #[cfg(not(any(feature = "getrandom", test)))]
    {
        RngWrapper::Deterministic(test_rng_helper())
    }
}

/// Helper wrapper to enable `test_rng` to return `impl::Rng`.
#[cfg(feature = "std")]
enum RngWrapper {
    Deterministic(StdRng),
    #[cfg(any(feature = "getrandom", test))]
    Randomized(rand::rngs::ThreadRng),
}

#[cfg(feature = "std")]
impl RngCore for RngWrapper {
    #[inline(always)]
    fn next_u32(&mut self) -> u32 {
        match self {
            Self::Deterministic(rng) => rng.next_u32(),
            #[cfg(any(feature = "getrandom", test))]
            Self::Randomized(rng) => rng.next_u32(),
        }
    }

    #[inline(always)]
    fn next_u64(&mut self) -> u64 {
        match self {
            Self::Deterministic(rng) => rng.next_u64(),
            #[cfg(any(feature = "getrandom", test))]
            Self::Randomized(rng) => rng.next_u64(),
        }
    }

    #[inline(always)]
    fn fill_bytes(&mut self, dest: &mut [u8]) {
        match self {
            Self::Deterministic(rng) => rng.fill_bytes(dest),
            #[cfg(any(feature = "getrandom", test))]
            Self::Randomized(rng) => rng.fill_bytes(dest),
        }
    }
}

#[cfg(all(test, feature = "std"))]
mod test {
    #[test]
    fn test_deterministic_rng() {
        use super::*;

        let mut rng = super::test_rng();
        let a = u128::rand(&mut rng);

        // Reset the rng by sampling a new one.
        let mut rng = super::test_rng();
        let b = u128::rand(&mut rng);
        assert_ne!(a, b); // should be unequal with high probability.

        // Let's make the rng deterministic.
        std::env::set_var("DETERMINISTIC_TEST_RNG", "1");
        let mut rng = super::test_rng();
        let a = u128::rand(&mut rng);

        // Reset the rng by sampling a new one.
        let mut rng = super::test_rng();
        let b = u128::rand(&mut rng);
        assert_eq!(a, b); // should be equal with high probability.
    }
}
#+end_src

copy from [[https://github.com/arkworks-rs/std/blob/bda9647d79bf5d3058c2c301da55a19e73cb5028/src/rand_helper.rs][update rand 0.9]]
