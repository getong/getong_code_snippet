* erlang atom
:PROPERTIES:
:CUSTOM_ID: erlang-atom
:END:
** atom memory
:PROPERTIES:
:CUSTOM_ID: atom-memory
:END:
#+begin_src erlang
memory(atom).
memory(atom_used).
#+end_src

** get all atoms (hacks and no documented)
:PROPERTIES:
:CUSTOM_ID: get-all-atoms-hacks-and-no-documented
:END:
#+begin_src erlang
-module(all_atoms).

-export([all_atoms/0]).

atom_by_number(N) ->
    binary_to_term(<<131,75,N:24>>).

all_atoms() ->
    atoms_starting_at(0).

atoms_starting_at(N) ->
    try atom_by_number(N) of
        Atom ->
            [Atom] ++ atoms_starting_at(N + 1)
    catch
        error:badarg ->
            []
    end.
#+end_src

See
[[https://stackoverflow.com/questions/13480462/erlang-can-i-get-a-list-of-all-currently-registered-atoms][Erlang:
Can I get a list of all currently-registered atoms?]]

** in 20
:PROPERTIES:
:CUSTOM_ID: in-20
:END:
#+begin_src erlang
erlang:system_info(atom_count).
#+end_src

See [Monitoring Erlang Atoms]
(https://engineering.klarna.com/monitoring-erlang-atoms-c1d6a741328e)

** binary_to_atom/2 doesn't increase duplicate atoms.
:PROPERTIES:
:CUSTOM_ID: binary_to_atom2-doesnt-increase-duplicate-atoms.
:END:
