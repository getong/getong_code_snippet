* erl_scan get string type
:PROPERTIES:
:CUSTOM_ID: erl_scan-get-string-type
:END:
** tsung use erl_scan:string/1 to get the string's value, like below:
:PROPERTIES:
:CUSTOM_ID: tsung-use-erl_scanstring1-to-get-the-strings-value-like-below
:END:
#+begin_example
getTypeAttr(string, String)-> String;
getTypeAttr(list, String)-> String;
getTypeAttr(float_or_integer, String)->
    case erl_scan:string(String) of
        {ok, [{integer,1,I}],1} -> I;
        {ok, [{float,1,F}],1} -> F
    end;
getTypeAttr(integer_or_string, String)->
    case erl_scan:string(String) of
        {ok, [{integer,1,I}],1} -> I;
        _ -> String
    end;
getTypeAttr(Type, String) ->
    {ok, [{Type,1,Val}],1} = erl_scan:string(String),
    Val.

{ok, [{atom,1,Name}],1} = erl_scan:string("tr_"++RawName),
#+end_example

copy from ts_config.erl The =String= is read from the xml files, and in
erlang, it is the list type. code exec info:

#+begin_example
$erl
1> erl_scan:string("800").
{ok,[{integer,1,800}],1}

2>erl_scan:string("tr_"++ "abc").
{ok,[{atom,1,tr_abc}],1}
#+end_example

** parse string to erlang term
:PROPERTIES:
:CUSTOM_ID: parse-string-to-erlang-term
:END:
#+begin_src erlang
string_to_term(String) when is_list(String) ->
    case erl_scan:string(String++".") of
        {ok, Tokens, _} ->
            case erl_parse:parse_term(Tokens) of
                {ok, Term} ->
                    Term;
                _Err ->
                    error
            end;
        _Error ->
            error
    end.
#+end_src

or like below:

#+begin_src erlang
{ok, Scan1, _} = erl_scan:string("String.").
{ok,P}=erl_parse:parse_exprs(Scan1).
erl_eval:exprs(P, []).
P.
#+end_src

copy from
[[https://www.cnblogs.com/daofen/p/6047789.html][erlang字符串动态解析成为Erlang数据结构（去掉“”）]]

** integer, binary, list
:PROPERTIES:
:CUSTOM_ID: integer-binary-list
:END:
#+begin_src erlang
1> binary:encode_unsigned(1258555).
<<19,52,59>>
2> integer_to_binary(1258555).
<<"1258555">>
#+end_src
