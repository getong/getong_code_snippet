* erlang http
:PROPERTIES:
:CUSTOM_ID: erlang-http
:END:
** four http content types
:PROPERTIES:
:CUSTOM_ID: four-http-content-types
:END:
- application/x-www-form-urlencoded
- multipart/form-data
- application/json
- text/xml

=application/x-www-form-urlencoded= will escape some special charactors,
use =application/json=. see
[[https://imququ.com/post/four-ways-to-post-data-in-http.html][四种常见的
POST 提交数据方式]]

** erlang post method
:PROPERTIES:
:CUSTOM_ID: erlang-post-method
:END:
#+begin_src shell
http_post_content(Url, Content) ->
    ContentType = "application/json",
    %% Concat the list of (character) lists
    Body = lists:concat(["{\"content\":\"", Content, "\"}"]),
    %% Explicitly encode to UTF8 before sending
    UnicodeBin = unicode:characters_to_binary(Body),
    httpc:request(post,
        {
            Url,
            [],          % HTTP headers
            ContentType, % content-type
            UnicodeBin   % the body as binary (UTF8)
            },
        [],            % HTTP Options
        [{body_format,binary}] % indicate the body is already binary
        ).
#+end_src

see
[[https://gist.github.com/flitbit/11388377][how-to-support-chinese-in-http-request-body-erlang]]

** mochiweb
:PROPERTIES:
:CUSTOM_ID: mochiweb
:END:
=application/x-www-form-urlencoded= use Req:parse_post()
=application/json= use Req:recv_body see
[[http://coolshell.cn/articles/1516.html][MOCHIWEB参数化模型REQ相关功能]]
see
[[http://willcodeforfoo.com/2009/07/using-mochiweb-to-create-a-web-framework-in-erlang][Using
mochiweb to create a web framework in erlang]] see
[[https://stackoverflow.com/questions/10439603/simple-json-request-with-curl-to-mochiweb][Simple
JSON request with cURL to Mochiweb]]

** hackney & gun
:PROPERTIES:
:CUSTOM_ID: hackney-gun
:END:
hackney is an HTTP client library, it offers a pool client feartur. gun
is also HTTP client library, and it supports websocket.

#+begin_src erlang
application:start(crypto),
application:start(public_key),
application:start(ssl),
application:start(hackney).
PoolName = mypool,
Options = [{timeout, 150000}, {max_connections, 100}],
ok = hackney_pool:start_pool(PoolName, Options),


Method = get,
URL = <<"https://friendpaste.com">>,
Headers = [],
Payload = <<>>,
Options = [{pool, default}],
{ok, StatusCode, RespHeaders, ClientRef} = hackney:request(Method, URL, Headers,
                                                        Payload, Options).
#+end_src

copy from [[https://github.com/benoitc/hackney][hackney]]

gun example:

#+begin_src erlang
{ok, ConnPid} = gun:open("example.org", 443).
%% or
{ok, ConnPid} = gun:open("example.org", 8443, #{transport => tls}).
%% wait for connection is ready.
{ok, Protocol} = gun:await_up(ConnPid).
%% get method
StreamRef = gun:get(ConnPid, "/organizations/ninenines").
%% head method
StreamRef = gun:head(ConnPid, "/organizations/ninenines").

%% post method
Body = "{\"msg\": \"Hello world!\"}",
StreamRef = gun:post(ConnPid, "/organizations/ninenines", [
    {<<"content-type">>, "application/json"}
], Body).

%% send file
sendfile(ConnPid, StreamRef, Filepath) ->
    {ok, IoDevice} = file:open(Filepath, [read, binary, raw]),
    do_sendfile(ConnPid, StreamRef, IoDevice).

do_sendfile(ConnPid, StreamRef, IoDevice) ->
    case file:read(IoDevice, 8000) of
        eof ->
            gun:data(ConnPid, StreamRef, fin, <<>>),
            file:close(IoDevice);
        {ok, Bin} ->
            gun:data(ConnPid, StreamRef, nofin, Bin),
            do_sendfile(ConnPid, StreamRef, IoDevice)
    end.

%% delete method
StreamRef = gun:delete(ConnPid, "/organizations/ninenines").

%% options method
StreamRef = gun:options(ConnPid, "/organizations/ninenines").
#+end_src

copy from [[https://ninenines.eu/docs/en/gun/2.0/guide/http/][99s gun
http]]

** username and password
:PROPERTIES:
:CUSTOM_ID: username-and-password
:END:
curl example:

#+begin_src shell
curl --user name:password http://www.example.com
curl -u name:password http://www.example.com
#+end_src

copy from
[[https://blog.csdn.net/bytxl/article/details/50379488][curl设置http头Authentication实现http基本认证]]
hackney example:

#+begin_src shell
Url = <<"http://localhost:8000/basic-auth/username/password">>,
Options = [{basic_auth, {<<"username">>, <<"password">>}}],
{ok, StatusCode, _, _} = hackney:request(get, URL, [], <<>>, Options)
#+end_src

copy from Basic auth with
Hackney](https://lookonmyworks.co.uk/2015/02/19/basic-auth-with-hackney/)

** elastic example
:PROPERTIES:
:CUSTOM_ID: elastic-example
:END:
#+begin_src shell
## curl
curl --user user:password -H "Content-Type: application/json" -X PUT  http://127.0.0.1:9200/_bulk -d '
{ "index" : { "_index" : "table_name", "_type" : "_doc"} }
{"a":"1","b":"2"}
'
## erlang
hackney:request(put, <<"http://127.0.0.1:9200/_bulk">>, [{<<"Content-Type">>, <<"application/json">>}, {<<"connection">>, <<"keep-alive">>}], jsx:encode({"a" => 1, "b" => 2}), []).
#+end_src

** query string
:PROPERTIES:
:CUSTOM_ID: query-string
:END:
#+begin_src shell
%% @doc calculate canonical query string out of query params and according to v4 documentation
canonical_query_string([]) ->
    "";
canonical_query_string(Params) ->
    Normalized = [{nodefinder_ec2_api_http:url_encode(Name), nodefinder_ec2_api_http:url_encode(nodefinder_ec2_api_http:value_to_string(Value))} || {Name, Value} <- Params],
    Sorted = lists:keysort(1, Normalized),
    lists:join($&,
               [case Value of
                    [] -> [Key, "="];
                    _ -> [Key, "=", Value]
                end
                || {Key, Value} <- Sorted, Value =/= none, Value =/= undefined]).
#+end_src

copy from nodefinder_ec2_api_aws.erl
