* deno
:PROPERTIES:
:CUSTOM_ID: deno
:END:
** installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
#+begin_src shell
## linux
curl -fsSL https://deno.land/x/install/install.sh | sh
## macos
brew install deno
#+end_src

** example
:PROPERTIES:
:CUSTOM_ID: example
:END:
#+begin_src shell
deno run https://deno.land/std/examples/welcome.ts
#+end_src

** migration to deno
:PROPERTIES:
:CUSTOM_ID: migration-to-deno
:END:
#+begin_src shell

## app.sh
#!/bin/bash
deno run -A myCode.ts

pm2 start app.sh

## fmt
deno fmt

## test
deno test
#+end_src

copy from
[[https://www.infoq.cn/article/IAHih5jdk8vslmaK10s4][手把手教你从 Node
快速迁移到 Deno]] [[https://aralroca.com/blog/from-node-to-deno][From
Node to Deno]]

** deno internal

#+begin_src shell
deno test -A --config tests/config/deno.json tests/unit/webcrypto_test.ts --filter "rsa keygen"

cargo install cargo-plonk
#+end_src

see [[https://littledivy.com/deno-2][Deno 2 internals]]

** deno architecture

see [[https://choubey.gitbook.io/internals-of-deno/architecture/core][Deno components]]

** deno fetch

Fetch API implementation for Deno

see [[https://github.com/denoland/deno/blob/main/ext/fetch/Cargo.toml][fetch]]

** deno_lib

deno_lib::worker module

** vitrine

see [[https://github.com/charlyisidore/vitrine][vitrine]]

vitrine copy the deno cli directory as vitrine_deno crate, and use [[https://github.com/rolldown/rolldown][rolldown]].

** denort

see [[https://github.com/denoland/deno/tree/main/cli/rt][denort]]


** deno copy source project

see [[https://github.com/Cassielxd/moduforge-rs][moduforge-rs]]

** orama-js-pool

[[https://github.com/oramasearch/orama-js-pool][orama-js-pool]]

** extension

deno_fetch is one of the deno extension

** deno download and compile typescript

** deno_embed

[[https://github.com/alshdavid-scratch/deno_embed][deno_embed]]

** edge_runtime

[[https://github.com/supabase/edge-runtime][edge-runtime]]

There are a lot of typescript example in edge-runtime/examples directory.

The edge-runtime call deno crate in cli directory, the cli directory contains the edge-runtime entry.

** metatype

metatype suppport wasm, include python and typescript

[[https://github.com/metatypedev/metatype][metatype]]

** reexport deno_core

#+begin_src rust

#[rustfmt::skip]
use deno_runtime::deno_core as deno_core; // necessary for re-exported macros to work
#+end_src


** rari

[[https://github.com/rari-build/rari][rari]]

** cloudstate

[[https://github.com/freestyle-sh/cloudstate][cloudstate]]
