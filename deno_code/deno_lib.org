* deno_lib

** worker

#+begin_src shell
et mut worker = MainWorker::bootstrap_from_options(
  &main_module,
  WorkerServiceOptions::<
    DenoInNpmPackageChecker,
    NpmResolver<sys_traits::impls::RealSys>,
    sys_traits::impls::RealSys,
  > {
    module_loader: Rc::new(FsModuleLoader),
    permissions: PermissionsContainer::allow_all(permission_desc_parser),
    blob_store: Default::default(),
    broadcast_channel: Default::default(),
    feature_checker: Default::default(),
    node_services: Default::default(),
    npm_process_state_provider: Default::default(),
    root_cert_store_provider: Default::default(),
    fetch_dns_resolver: Default::default(),
    shared_array_buffer_store: Default::default(),
    compiled_wasm_module_store: Default::default(),
    v8_code_cache: Default::default(),
    fs,
  },
  WorkerOptions {
    extensions: vec![hello_runtime::init_ops_and_esm()],
    ..Default::default()
  },
);
worker.execute_main_module(&main_module).await?;
worker.run_event_loop(false).await?;
#+end_src

copy from [[https://stackoverflow.com/questions/79486773/how-to-reuse-full-featured-deno-in-my-rust-project][How to reuse full-featured Deno in my Rust project?]]

all with default